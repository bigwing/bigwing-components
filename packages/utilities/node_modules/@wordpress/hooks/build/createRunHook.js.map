{"version":3,"sources":["@wordpress/hooks/src/createRunHook.js"],"names":["createRunHook","hooks","returnFirstArg","runHooks","hookName","handlers","runs","process","env","NODE_ENV","all","push","args","length","undefined","hookInfo","name","currentIndex","__current","handler","result","callback","apply","pop"],"mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;AAWA,SAASA,aAAT,CAAwBC,KAAxB,EAA+BC,cAA/B,EAAgD;AAC/C;;;;;;;;AAQA,SAAO,SAASC,QAAT,CAAmBC,QAAnB,EAAuC;AAC7C,QAAK,CAAEH,KAAK,CAAEG,QAAF,CAAZ,EAA2B;AAC1BH,MAAAA,KAAK,CAAEG,QAAF,CAAL,GAAoB;AACnBC,QAAAA,QAAQ,EAAE,EADS;AAEnBC,QAAAA,IAAI,EAAE;AAFa,OAApB;AAIA;;AAEDL,IAAAA,KAAK,CAAEG,QAAF,CAAL,CAAkBE,IAAlB;AAEA,QAAMD,QAAQ,GAAGJ,KAAK,CAAEG,QAAF,CAAL,CAAkBC,QAAnC,CAV6C,CAY7C;;AACA,QAAK,iBAAiBE,OAAO,CAACC,GAAR,CAAYC,QAAlC,EAA6C;AAC5C;AACA,UAAK,gBAAgBL,QAAhB,IAA4BH,KAAK,CAACS,GAAvC,EAA6C;AAC5CL,QAAAA,QAAQ,CAACM,IAAT,OAAAN,QAAQ,mCAAUJ,KAAK,CAACS,GAAN,CAAUL,QAApB,EAAR;AACA;AACD;;AAlB4C,sCAAPO,IAAO;AAAPA,MAAAA,IAAO;AAAA;;AAoB7C,QAAK,CAAEP,QAAF,IAAc,CAAEA,QAAQ,CAACQ,MAA9B,EAAuC;AACtC,aAAOX,cAAc,GAAGU,IAAI,CAAE,CAAF,CAAP,GAAeE,SAApC;AACA;;AAED,QAAMC,QAAQ,GAAG;AAChBC,MAAAA,IAAI,EAAEZ,QADU;AAEhBa,MAAAA,YAAY,EAAE;AAFE,KAAjB;;AAKAhB,IAAAA,KAAK,CAACiB,SAAN,CAAgBP,IAAhB,CAAsBI,QAAtB;;AAEA,WAAQA,QAAQ,CAACE,YAAT,GAAwBZ,QAAQ,CAACQ,MAAzC,EAAkD;AACjD,UAAMM,OAAO,GAAGd,QAAQ,CAAEU,QAAQ,CAACE,YAAX,CAAxB;AAEA,UAAMG,MAAM,GAAGD,OAAO,CAACE,QAAR,CAAiBC,KAAjB,CAAwB,IAAxB,EAA8BV,IAA9B,CAAf;;AACA,UAAKV,cAAL,EAAsB;AACrBU,QAAAA,IAAI,CAAE,CAAF,CAAJ,GAAYQ,MAAZ;AACA;;AAEDL,MAAAA,QAAQ,CAACE,YAAT;AACA;;AAEDhB,IAAAA,KAAK,CAACiB,SAAN,CAAgBK,GAAhB;;AAEA,QAAKrB,cAAL,EAAsB;AACrB,aAAOU,IAAI,CAAE,CAAF,CAAX;AACA;AACD,GA/CD;AAgDA;;eAEcZ,a","sourcesContent":["/**\n * Returns a function which, when invoked, will execute all callbacks\n * registered to a hook of the specified type, optionally returning the final\n * value of the call chain.\n *\n * @param  {Object}   hooks          Stored hooks, keyed by hook name.\n * @param  {?boolean}    returnFirstArg Whether each hook callback is expected to\n *                                   return its first argument.\n *\n * @return {Function}                Function that runs hook callbacks.\n */\nfunction createRunHook( hooks, returnFirstArg ) {\n\t/**\n\t * Runs all callbacks for the specified hook.\n\t *\n\t * @param  {string} hookName The name of the hook to run.\n\t * @param  {...*}   args     Arguments to pass to the hook callbacks.\n\t *\n\t * @return {*}               Return value of runner, if applicable.\n\t */\n\treturn function runHooks( hookName, ...args ) {\n\t\tif ( ! hooks[ hookName ] ) {\n\t\t\thooks[ hookName ] = {\n\t\t\t\thandlers: [],\n\t\t\t\truns: 0,\n\t\t\t};\n\t\t}\n\n\t\thooks[ hookName ].runs++;\n\n\t\tconst handlers = hooks[ hookName ].handlers;\n\n\t\t// The following code is stripped from production builds.\n\t\tif ( 'production' !== process.env.NODE_ENV ) {\n\t\t\t// Handle any 'all' hooks registered.\n\t\t\tif ( 'hookAdded' !== hookName && hooks.all ) {\n\t\t\t\thandlers.push( ...hooks.all.handlers );\n\t\t\t}\n\t\t}\n\n\t\tif ( ! handlers || ! handlers.length ) {\n\t\t\treturn returnFirstArg ? args[ 0 ] : undefined;\n\t\t}\n\n\t\tconst hookInfo = {\n\t\t\tname: hookName,\n\t\t\tcurrentIndex: 0,\n\t\t};\n\n\t\thooks.__current.push( hookInfo );\n\n\t\twhile ( hookInfo.currentIndex < handlers.length ) {\n\t\t\tconst handler = handlers[ hookInfo.currentIndex ];\n\n\t\t\tconst result = handler.callback.apply( null, args );\n\t\t\tif ( returnFirstArg ) {\n\t\t\t\targs[ 0 ] = result;\n\t\t\t}\n\n\t\t\thookInfo.currentIndex++;\n\t\t}\n\n\t\thooks.__current.pop();\n\n\t\tif ( returnFirstArg ) {\n\t\t\treturn args[ 0 ];\n\t\t}\n\t};\n}\n\nexport default createRunHook;\n"]}