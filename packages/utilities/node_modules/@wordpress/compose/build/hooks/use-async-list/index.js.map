{"version":3,"sources":["@wordpress/compose/src/hooks/use-async-list/index.js"],"names":["getFirstItemsPresentInState","list","state","firstItems","i","length","item","includes","push","listReducer","action","type","useAsyncList","current","dispatch","asyncQueue","append","index","add","reset"],"mappings":";;;;;;;;;;;;;AAGA;;AACA;;AAJA;;;;AAMA;;;;;;;AAOA,SAASA,2BAAT,CAAsCC,IAAtC,EAA4CC,KAA5C,EAAoD;AACnD,MAAMC,UAAU,GAAG,EAAnB;;AAEA,OAAM,IAAIC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGH,IAAI,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EAAwC;AACvC,QAAME,IAAI,GAAGL,IAAI,CAAEG,CAAF,CAAjB;;AACA,QAAK,CAAEF,KAAK,CAACK,QAAN,CAAgBD,IAAhB,CAAP,EAAgC;AAC/B;AACA;;AAEDH,IAAAA,UAAU,CAACK,IAAX,CAAiBF,IAAjB;AACA;;AAED,SAAOH,UAAP;AACA;AAED;;;;;;;;;;AAQA,SAASM,WAAT,CAAsBP,KAAtB,EAA6BQ,MAA7B,EAAsC;AACrC,MAAKA,MAAM,CAACC,IAAP,KAAgB,OAArB,EAA+B;AAC9B,WAAOD,MAAM,CAACT,IAAd;AACA;;AAED,MAAKS,MAAM,CAACC,IAAP,KAAgB,QAArB,EAAgC;AAC/B,sDAAYT,KAAZ,IAAmBQ,MAAM,CAACJ,IAA1B;AACA;;AAED,SAAOJ,KAAP;AACA;AAED;;;;;;;;;AAOA,SAASU,YAAT,CAAuBX,IAAvB,EAA8B;AAAA,oBACC,yBAAYQ,WAAZ,EAAyB,EAAzB,CADD;AAAA;AAAA,MACrBI,OADqB;AAAA,MACZC,QADY;;AAG7B,0BAAW,YAAM;AAChB;AACA,QAAMX,UAAU,GAAGH,2BAA2B,CAAEC,IAAF,EAAQY,OAAR,CAA9C;AACAC,IAAAA,QAAQ,CAAE;AACTH,MAAAA,IAAI,EAAE,OADG;AAETV,MAAAA,IAAI,EAAEE;AAFG,KAAF,CAAR;AAIA,QAAMY,UAAU,GAAG,iCAAnB;;AACA,QAAMC,MAAM,GAAG,SAATA,MAAS,CAAEC,KAAF;AAAA,aAAa,YAAM;AACjC,YAAKhB,IAAI,CAACI,MAAL,IAAeY,KAApB,EAA4B;AAC3B;AACA;;AACDH,QAAAA,QAAQ,CAAE;AAAEH,UAAAA,IAAI,EAAE,QAAR;AAAkBL,UAAAA,IAAI,EAAEL,IAAI,CAAEgB,KAAF;AAA5B,SAAF,CAAR;AACAF,QAAAA,UAAU,CAACG,GAAX,CAAgB,EAAhB,EAAoBF,MAAM,CAAEC,KAAK,GAAG,CAAV,CAA1B;AACA,OANc;AAAA,KAAf;;AAOAF,IAAAA,UAAU,CAACG,GAAX,CAAgB,EAAhB,EAAoBF,MAAM,CAAEb,UAAU,CAACE,MAAb,CAA1B;AAEA,WAAO;AAAA,aAAMU,UAAU,CAACI,KAAX,EAAN;AAAA,KAAP;AACA,GAlBD,EAkBG,CAAElB,IAAF,CAlBH;AAoBA,SAAOY,OAAP;AACA;;eAEcD,Y","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useEffect, useReducer } from '@wordpress/element';\nimport { createQueue } from '@wordpress/priority-queue';\n\n/**\n * Returns the first items from list that are present on state.\n *\n * @param {Array} list  New array.\n * @param {Array} state Current state.\n * @return {Array} First items present iin state.\n */\nfunction getFirstItemsPresentInState( list, state ) {\n\tconst firstItems = [];\n\n\tfor ( let i = 0; i < list.length; i++ ) {\n\t\tconst item = list[ i ];\n\t\tif ( ! state.includes( item ) ) {\n\t\t\tbreak;\n\t\t}\n\n\t\tfirstItems.push( item );\n\t}\n\n\treturn firstItems;\n}\n\n/**\n * Reducer keeping track of a list of appended items.\n *\n * @param {Array}  state  Current state\n * @param {Object} action Action\n *\n * @return {Array} update state.\n */\nfunction listReducer( state, action ) {\n\tif ( action.type === 'reset' ) {\n\t\treturn action.list;\n\t}\n\n\tif ( action.type === 'append' ) {\n\t\treturn [ ...state, action.item ];\n\t}\n\n\treturn state;\n}\n\n/**\n * React hook returns an array which items get asynchronously appended from a source array.\n * This behavior is useful if we want to render a list of items asynchronously for performance reasons.\n *\n * @param {Array} list Source array.\n * @return {Array} Async array.\n */\nfunction useAsyncList( list ) {\n\tconst [ current, dispatch ] = useReducer( listReducer, [] );\n\n\tuseEffect( () => {\n\t\t// On reset, we keep the first items that were previously rendered.\n\t\tconst firstItems = getFirstItemsPresentInState( list, current );\n\t\tdispatch( {\n\t\t\ttype: 'reset',\n\t\t\tlist: firstItems,\n\t\t} );\n\t\tconst asyncQueue = createQueue();\n\t\tconst append = ( index ) => () => {\n\t\t\tif ( list.length <= index ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdispatch( { type: 'append', item: list[ index ] } );\n\t\t\tasyncQueue.add( {}, append( index + 1 ) );\n\t\t};\n\t\tasyncQueue.add( {}, append( firstItems.length ) );\n\n\t\treturn () => asyncQueue.reset();\n\t}, [ list ] );\n\n\treturn current;\n}\n\nexport default useAsyncList;\n"]}