{"version":3,"sources":["@wordpress/compose/src/hooks/use-copy-on-click/index.js"],"names":["useCopyOnClick","ref","text","timeout","clipboard","hasCopied","setHasCopied","timeoutId","current","Clipboard","on","clearSelection","trigger","focus","clearTimeout","setTimeout","destroy"],"mappings":";;;;;;;;;;;AAGA;;AAKA;;AARA;;;;AAKA;;;;AAKA;;;;;;;;;;;AAWe,SAASA,cAAT,CAAyBC,GAAzB,EAA8BC,KAA9B,EAAqD;AAAA,MAAjBC,OAAiB,uEAAP,IAAO;AACnE,MAAMC,SAAS,GAAG,sBAAlB;;AADmE,kBAE/B,uBAAU,KAAV,CAF+B;AAAA;AAAA,MAE3DC,SAF2D;AAAA,MAEhDC,YAFgD;;AAInE,0BAAW,YAAM;AAChB,QAAIC,SAAJ,CADgB,CAGhB;;AACAH,IAAAA,SAAS,CAACI,OAAV,GAAoB,IAAIC,kBAAJ,CAAeR,GAAG,CAACO,OAAnB,EAA4B;AAC/CN,MAAAA,IAAI,EAAE;AAAA,eAAQ,OAAOA,KAAP,KAAgB,UAAhB,GAA6BA,KAAI,EAAjC,GAAsCA,KAA9C;AAAA;AADyC,KAA5B,CAApB;AAIAE,IAAAA,SAAS,CAACI,OAAV,CAAkBE,EAAlB,CAAsB,SAAtB,EAAiC,gBAAmC;AAAA,UAA/BC,cAA+B,QAA/BA,cAA+B;AAAA,UAAfC,OAAe,QAAfA,OAAe;AACnE;AACA;AACA;AACAD,MAAAA,cAAc,GAJqD,CAMnE;;AACA,UAAKC,OAAL,EAAe;AACdA,QAAAA,OAAO,CAACC,KAAR;AACA;;AAED,UAAKV,OAAL,EAAe;AACdG,QAAAA,YAAY,CAAE,IAAF,CAAZ;AACAQ,QAAAA,YAAY,CAAEP,SAAF,CAAZ;AACAA,QAAAA,SAAS,GAAGQ,UAAU,CAAE;AAAA,iBAAMT,YAAY,CAAE,KAAF,CAAlB;AAAA,SAAF,EAA+BH,OAA/B,CAAtB;AACA;AACD,KAhBD;AAkBA,WAAO,YAAM;AACZC,MAAAA,SAAS,CAACI,OAAV,CAAkBQ,OAAlB;AACAF,MAAAA,YAAY,CAAEP,SAAF,CAAZ;AACA,KAHD;AAIA,GA9BD,EA8BG,CAAEL,KAAF,EAAQC,OAAR,EAAiBG,YAAjB,CA9BH;AAgCA,SAAOD,SAAP;AACA","sourcesContent":["/**\n * External dependencies\n */\nimport Clipboard from 'clipboard';\n\n/**\n * WordPress dependencies\n */\nimport { useRef, useEffect, useState } from '@wordpress/element';\n\n/**\n * Copies the text to the clipboard when the element is clicked.\n *\n * @param {Object}          ref     Reference with the element.\n * @param {string|Function} text    The text to copy.\n * @param {number}          timeout Optional timeout to reset the returned\n *                                  state. 4 seconds by default.\n *\n * @return {boolean} Whether or not the text has been copied. Resets after the\n *                   timeout.\n */\nexport default function useCopyOnClick( ref, text, timeout = 4000 ) {\n\tconst clipboard = useRef();\n\tconst [ hasCopied, setHasCopied ] = useState( false );\n\n\tuseEffect( () => {\n\t\tlet timeoutId;\n\n\t\t// Clipboard listens to click events.\n\t\tclipboard.current = new Clipboard( ref.current, {\n\t\t\ttext: () => ( typeof text === 'function' ? text() : text ),\n\t\t} );\n\n\t\tclipboard.current.on( 'success', ( { clearSelection, trigger } ) => {\n\t\t\t// Clearing selection will move focus back to the triggering button,\n\t\t\t// ensuring that it is not reset to the body, and further that it is\n\t\t\t// kept within the rendered node.\n\t\t\tclearSelection();\n\n\t\t\t// Handle ClipboardJS focus bug, see https://github.com/zenorocha/clipboard.js/issues/680\n\t\t\tif ( trigger ) {\n\t\t\t\ttrigger.focus();\n\t\t\t}\n\n\t\t\tif ( timeout ) {\n\t\t\t\tsetHasCopied( true );\n\t\t\t\tclearTimeout( timeoutId );\n\t\t\t\ttimeoutId = setTimeout( () => setHasCopied( false ), timeout );\n\t\t\t}\n\t\t} );\n\n\t\treturn () => {\n\t\t\tclipboard.current.destroy();\n\t\t\tclearTimeout( timeoutId );\n\t\t};\n\t}, [ text, timeout, setHasCopied ] );\n\n\treturn hasCopied;\n}\n"]}