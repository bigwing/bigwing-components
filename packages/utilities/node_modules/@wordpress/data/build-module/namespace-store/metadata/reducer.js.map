{"version":3,"sources":["@wordpress/data/src/namespace-store/metadata/reducer.js"],"names":["flowRight","omit","has","EquivalentKeyMap","onSubKey","subKeysIsResolved","state","action","type","isStarting","nextState","set","args","delete","isResolved","selectorName"],"mappings":"AAAA;;;AAGA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,QAAqC,QAArC;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AAEA;;;;AAGA,SAASC,QAAT,QAAyB,SAAzB;AAEA;;;;;;;;;;;;AAWA,IAAMC,iBAAiB,GAAGL,SAAS,CAAE,CAAEI,QAAQ,CAAE,cAAF,CAAV,CAAF,CAAT,CACzB,YAA8C;AAAA,MAA5CE,KAA4C,uEAApC,IAAIH,gBAAJ,EAAoC;AAAA,MAAZI,MAAY;;AAC7C,UAASA,MAAM,CAACC,IAAhB;AACC,SAAK,kBAAL;AACA,SAAK,mBAAL;AAA0B;AACzB,YAAMC,UAAU,GAAGF,MAAM,CAACC,IAAP,KAAgB,kBAAnC;AACA,YAAME,SAAS,GAAG,IAAIP,gBAAJ,CAAsBG,KAAtB,CAAlB;AACAI,QAAAA,SAAS,CAACC,GAAV,CAAeJ,MAAM,CAACK,IAAtB,EAA4BH,UAA5B;AACA,eAAOC,SAAP;AACA;;AACD,SAAK,uBAAL;AAA8B;AAC7B,YAAMA,UAAS,GAAG,IAAIP,gBAAJ,CAAsBG,KAAtB,CAAlB;;AACAI,QAAAA,UAAS,CAACG,MAAV,CAAkBN,MAAM,CAACK,IAAzB;;AACA,eAAOF,UAAP;AACA;AAZF;;AAcA,SAAOJ,KAAP;AACA,CAjBwB,CAA1B;AAoBA;;;;;;;;;;;AAUA,IAAMQ,UAAU,GAAG,SAAbA,UAAa,GAA0B;AAAA,MAAxBR,KAAwB,uEAAhB,EAAgB;AAAA,MAAZC,MAAY;;AAC5C,UAASA,MAAM,CAACC,IAAhB;AACC,SAAK,iCAAL;AACC,aAAO,EAAP;;AACD,SAAK,0CAAL;AACC,aAAON,GAAG,CAAEI,KAAF,EAAS,CAAEC,MAAM,CAACQ,YAAT,CAAT,CAAH,GACJd,IAAI,CAAEK,KAAF,EAAS,CAAEC,MAAM,CAACQ,YAAT,CAAT,CADA,GAEJT,KAFH;;AAGD,SAAK,kBAAL;AACA,SAAK,mBAAL;AACA,SAAK,uBAAL;AACC,aAAOD,iBAAiB,CAAEC,KAAF,EAASC,MAAT,CAAxB;AAVF;;AAYA,SAAOD,KAAP;AACA,CAdD;;AAgBA,eAAeQ,UAAf","sourcesContent":["/**\n * External dependencies\n */\nimport { flowRight, omit, has } from 'lodash';\nimport EquivalentKeyMap from 'equivalent-key-map';\n\n/**\n * Internal dependencies\n */\nimport { onSubKey } from './utils';\n\n/**\n * Reducer function returning next state for selector resolution of\n * subkeys, object form:\n *\n *  selectorName -> EquivalentKeyMap<Array,boolean>\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Next state.\n */\nconst subKeysIsResolved = flowRight( [ onSubKey( 'selectorName' ) ] )(\n\t( state = new EquivalentKeyMap(), action ) => {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'START_RESOLUTION':\n\t\t\tcase 'FINISH_RESOLUTION': {\n\t\t\t\tconst isStarting = action.type === 'START_RESOLUTION';\n\t\t\t\tconst nextState = new EquivalentKeyMap( state );\n\t\t\t\tnextState.set( action.args, isStarting );\n\t\t\t\treturn nextState;\n\t\t\t}\n\t\t\tcase 'INVALIDATE_RESOLUTION': {\n\t\t\t\tconst nextState = new EquivalentKeyMap( state );\n\t\t\t\tnextState.delete( action.args );\n\t\t\t\treturn nextState;\n\t\t\t}\n\t\t}\n\t\treturn state;\n\t}\n);\n\n/**\n * Reducer function returning next state for selector resolution, object form:\n *\n *   selectorName -> EquivalentKeyMap<Array, boolean>\n *\n * @param {Object} state   Current state.\n * @param {Object} action  Dispatched action.\n *\n * @return {Object} Next state.\n */\nconst isResolved = ( state = {}, action ) => {\n\tswitch ( action.type ) {\n\t\tcase 'INVALIDATE_RESOLUTION_FOR_STORE':\n\t\t\treturn {};\n\t\tcase 'INVALIDATE_RESOLUTION_FOR_STORE_SELECTOR':\n\t\t\treturn has( state, [ action.selectorName ] )\n\t\t\t\t? omit( state, [ action.selectorName ] )\n\t\t\t\t: state;\n\t\tcase 'START_RESOLUTION':\n\t\tcase 'FINISH_RESOLUTION':\n\t\tcase 'INVALIDATE_RESOLUTION':\n\t\t\treturn subKeysIsResolved( state, action );\n\t}\n\treturn state;\n};\n\nexport default isResolved;\n"]}