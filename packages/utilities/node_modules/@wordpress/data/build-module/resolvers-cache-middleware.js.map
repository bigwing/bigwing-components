{"version":3,"sources":["@wordpress/data/src/resolvers-cache-middleware.js"],"names":["get","createResolversCacheMiddleware","registry","reducerKey","next","action","resolvers","select","getCachedResolvers","Object","entries","forEach","selectorName","resolversByArgs","resolver","stores","shouldInvalidate","value","args","dispatch","invalidateResolution"],"mappings":";;;AAAA;;;AAGA,SAASA,GAAT,QAAoB,QAApB;AAEA;;AAEA;;;;;;;;;;;AAUA,IAAMC,8BAA8B,GAAG,SAAjCA,8BAAiC,CAAEC,QAAF,EAAYC,UAAZ;AAAA,SAA4B;AAAA,WAAM,UACxEC,IADwE;AAAA,aAEpE,UAAEC,MAAF,EAAc;AAClB,YAAMC,SAAS,GAAGJ,QAAQ,CACxBK,MADgB,CACR,WADQ,EAEhBC,kBAFgB,CAEIL,UAFJ,CAAlB;AAGAM,QAAAA,MAAM,CAACC,OAAP,CAAgBJ,SAAhB,EAA4BK,OAA5B,CACC,gBAAyC;AAAA;AAAA,cAArCC,YAAqC;AAAA,cAAvBC,eAAuB;;AACxC,cAAMC,QAAQ,GAAGd,GAAG,CAAEE,QAAQ,CAACa,MAAX,EAAmB,CACtCZ,UADsC,EAEtC,WAFsC,EAGtCS,YAHsC,CAAnB,CAApB;;AAKA,cAAK,CAAEE,QAAF,IAAc,CAAEA,QAAQ,CAACE,gBAA9B,EAAiD;AAChD;AACA;;AACDH,UAAAA,eAAe,CAACF,OAAhB,CAAyB,UAAEM,KAAF,EAASC,IAAT,EAAmB;AAC3C;AACA;AACA;AACA,gBACCD,KAAK,KAAK,KAAV,IACA,CAAEH,QAAQ,CAACE,gBAAT,OAAAF,QAAQ,GAAmBT,MAAnB,4BAA8Ba,IAA9B,GAFX,EAGE;AACD;AACA,aAT0C,CAW3C;;;AACAhB,YAAAA,QAAQ,CACNiB,QADF,CACY,WADZ,EAEEC,oBAFF,CAEwBjB,UAFxB,EAEoCS,YAFpC,EAEkDM,IAFlD;AAGA,WAfD;AAgBA,SA1BF;AA4BA,eAAOd,IAAI,CAAEC,MAAF,CAAX;AACA,OAnCwE;AAAA,KAAN;AAAA,GAA5B;AAAA,CAAvC;;AAqCA,eAAeJ,8BAAf","sourcesContent":["/**\n * External dependencies\n */\nimport { get } from 'lodash';\n\n/** @typedef {import('./registry').WPDataRegistry} WPDataRegistry */\n\n/**\n * Creates a middleware handling resolvers cache invalidation.\n *\n * @param {WPDataRegistry} registry   The registry reference for which to create\n *                                    the middleware.\n * @param {string}         reducerKey The namespace for which to create the\n *                                    middleware.\n *\n * @return {Function} Middleware function.\n */\nconst createResolversCacheMiddleware = ( registry, reducerKey ) => () => (\n\tnext\n) => ( action ) => {\n\tconst resolvers = registry\n\t\t.select( 'core/data' )\n\t\t.getCachedResolvers( reducerKey );\n\tObject.entries( resolvers ).forEach(\n\t\t( [ selectorName, resolversByArgs ] ) => {\n\t\t\tconst resolver = get( registry.stores, [\n\t\t\t\treducerKey,\n\t\t\t\t'resolvers',\n\t\t\t\tselectorName,\n\t\t\t] );\n\t\t\tif ( ! resolver || ! resolver.shouldInvalidate ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresolversByArgs.forEach( ( value, args ) => {\n\t\t\t\t// resolversByArgs is the map Map([ args ] => boolean) storing the cache resolution status for a given selector.\n\t\t\t\t// If the value is false it means this resolver has finished its resolution which means we need to invalidate it,\n\t\t\t\t// if it's true it means it's inflight and the invalidation is not necessary.\n\t\t\t\tif (\n\t\t\t\t\tvalue !== false ||\n\t\t\t\t\t! resolver.shouldInvalidate( action, ...args )\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Trigger cache invalidation\n\t\t\t\tregistry\n\t\t\t\t\t.dispatch( 'core/data' )\n\t\t\t\t\t.invalidateResolution( reducerKey, selectorName, args );\n\t\t\t} );\n\t\t}\n\t);\n\treturn next( action );\n};\n\nexport default createResolversCacheMiddleware;\n"]}