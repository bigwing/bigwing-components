{"version":3,"sources":["@wordpress/data/src/components/use-select/index.js"],"names":["useMemoOne","createQueue","useLayoutEffect","useRef","useCallback","useEffect","useReducer","isShallowEqual","useRegistry","useAsyncMode","useIsomorphicLayoutEffect","window","renderQueue","useSelect","_mapSelect","deps","mapSelect","registry","isAsync","queueContext","queue","s","forceRender","latestMapSelect","latestIsAsync","latestMapOutput","latestMapOutputError","isMountedAndNotUnsubscribing","mapOutput","current","select","error","errorMessage","message","stack","Error","console","undefined","flush","onStoreChange","newMapOutput","add","unsubscribe","subscribe"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { useMemoOne } from 'use-memo-one';\n\n/**\n * WordPress dependencies\n */\nimport { createQueue } from '@wordpress/priority-queue';\nimport {\n\tuseLayoutEffect,\n\tuseRef,\n\tuseCallback,\n\tuseEffect,\n\tuseReducer,\n} from '@wordpress/element';\nimport isShallowEqual from '@wordpress/is-shallow-equal';\n\n/**\n * Internal dependencies\n */\nimport useRegistry from '../registry-provider/use-registry';\nimport useAsyncMode from '../async-mode-provider/use-async-mode';\n\n/**\n * Favor useLayoutEffect to ensure the store subscription callback always has\n * the selector from the latest render. If a store update happens between render\n * and the effect, this could cause missed/stale updates or inconsistent state.\n *\n * Fallback to useEffect for server rendered components because currently React\n * throws a warning when using useLayoutEffect in that environment.\n */\nconst useIsomorphicLayoutEffect =\n\ttypeof window !== 'undefined' ? useLayoutEffect : useEffect;\n\nconst renderQueue = createQueue();\n\n/**\n * Custom react hook for retrieving props from registered selectors.\n *\n * In general, this custom React hook follows the\n * [rules of hooks](https://reactjs.org/docs/hooks-rules.html).\n *\n * @param {Function} _mapSelect  Function called on every state change. The\n *                               returned value is exposed to the component\n *                               implementing this hook. The function receives\n *                               the `registry.select` method on the first\n *                               argument and the `registry` on the second\n *                               argument.\n * @param {Array}    deps        If provided, this memoizes the mapSelect so the\n *                               same `mapSelect` is invoked on every state\n *                               change unless the dependencies change.\n *\n * @example\n * ```js\n * const { useSelect } = wp.data;\n *\n * function HammerPriceDisplay( { currency } ) {\n *   const price = useSelect( ( select ) => {\n *     return select( 'my-shop' ).getPrice( 'hammer', currency )\n *   }, [ currency ] );\n *   return new Intl.NumberFormat( 'en-US', {\n *     style: 'currency',\n *     currency,\n *   } ).format( price );\n * }\n *\n * // Rendered in the application:\n * // <HammerPriceDisplay currency=\"USD\" />\n * ```\n *\n * In the above example, when `HammerPriceDisplay` is rendered into an\n * application, the price will be retrieved from the store state using the\n * `mapSelect` callback on `useSelect`. If the currency prop changes then\n * any price in the state for that currency is retrieved. If the currency prop\n * doesn't change and other props are passed in that do change, the price will\n * not change because the dependency is just the currency.\n *\n * @return {Function}  A custom react hook.\n */\nexport default function useSelect( _mapSelect, deps ) {\n\tconst mapSelect = useCallback( _mapSelect, deps );\n\tconst registry = useRegistry();\n\tconst isAsync = useAsyncMode();\n\t// React can sometimes clear the `useMemo` cache.\n\t// We use the cache-stable `useMemoOne` to avoid\n\t// losing queues.\n\tconst queueContext = useMemoOne( () => ( { queue: true } ), [ registry ] );\n\tconst [ , forceRender ] = useReducer( ( s ) => s + 1, 0 );\n\n\tconst latestMapSelect = useRef();\n\tconst latestIsAsync = useRef( isAsync );\n\tconst latestMapOutput = useRef();\n\tconst latestMapOutputError = useRef();\n\tconst isMountedAndNotUnsubscribing = useRef();\n\n\tlet mapOutput;\n\n\ttry {\n\t\tif (\n\t\t\tlatestMapSelect.current !== mapSelect ||\n\t\t\tlatestMapOutputError.current\n\t\t) {\n\t\t\tmapOutput = mapSelect( registry.select, registry );\n\t\t} else {\n\t\t\tmapOutput = latestMapOutput.current;\n\t\t}\n\t} catch ( error ) {\n\t\tlet errorMessage = `An error occurred while running 'mapSelect': ${ error.message }`;\n\n\t\tif ( latestMapOutputError.current ) {\n\t\t\terrorMessage += `\\nThe error may be correlated with this previous error:\\n`;\n\t\t\terrorMessage += `${ latestMapOutputError.current.stack }\\n\\n`;\n\t\t\terrorMessage += 'Original stack trace:';\n\n\t\t\tthrow new Error( errorMessage );\n\t\t} else {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error( errorMessage );\n\t\t}\n\t}\n\n\tuseIsomorphicLayoutEffect( () => {\n\t\tlatestMapSelect.current = mapSelect;\n\t\tlatestMapOutput.current = mapOutput;\n\t\tlatestMapOutputError.current = undefined;\n\t\tisMountedAndNotUnsubscribing.current = true;\n\n\t\t// This has to run after the other ref updates\n\t\t// to avoid using stale values in the flushed\n\t\t// callbacks or potentially overwriting a\n\t\t// changed `latestMapOutput.current`.\n\t\tif ( latestIsAsync.current !== isAsync ) {\n\t\t\tlatestIsAsync.current = isAsync;\n\t\t\trenderQueue.flush( queueContext );\n\t\t}\n\t} );\n\n\tuseIsomorphicLayoutEffect( () => {\n\t\tconst onStoreChange = () => {\n\t\t\tif ( isMountedAndNotUnsubscribing.current ) {\n\t\t\t\ttry {\n\t\t\t\t\tconst newMapOutput = latestMapSelect.current(\n\t\t\t\t\t\tregistry.select,\n\t\t\t\t\t\tregistry\n\t\t\t\t\t);\n\t\t\t\t\tif (\n\t\t\t\t\t\tisShallowEqual( latestMapOutput.current, newMapOutput )\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tlatestMapOutput.current = newMapOutput;\n\t\t\t\t} catch ( error ) {\n\t\t\t\t\tlatestMapOutputError.current = error;\n\t\t\t\t}\n\t\t\t\tforceRender();\n\t\t\t}\n\t\t};\n\n\t\t// catch any possible state changes during mount before the subscription\n\t\t// could be set.\n\t\tif ( latestIsAsync.current ) {\n\t\t\trenderQueue.add( queueContext, onStoreChange );\n\t\t} else {\n\t\t\tonStoreChange();\n\t\t}\n\n\t\tconst unsubscribe = registry.subscribe( () => {\n\t\t\tif ( latestIsAsync.current ) {\n\t\t\t\trenderQueue.add( queueContext, onStoreChange );\n\t\t\t} else {\n\t\t\t\tonStoreChange();\n\t\t\t}\n\t\t} );\n\n\t\treturn () => {\n\t\t\tisMountedAndNotUnsubscribing.current = false;\n\t\t\tunsubscribe();\n\t\t\trenderQueue.flush( queueContext );\n\t\t};\n\t}, [ registry ] );\n\n\treturn mapOutput;\n}\n"]}