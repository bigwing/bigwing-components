{"version":3,"sources":["@wordpress/data/src/components/registry-provider/context.js"],"names":["createContext","defaultRegistry","Context","Consumer","Provider","RegistryConsumer"],"mappings":"AAAA;;;AAGA,SAASA,aAAT,QAA8B,oBAA9B;AAEA;;;;AAGA,OAAOC,eAAP,MAA4B,wBAA5B;AAEA,OAAO,IAAMC,OAAO,GAAGF,aAAa,CAAEC,eAAF,CAA7B;IAECE,Q,GAAuBD,O,CAAvBC,Q;IAAUC,Q,GAAaF,O,CAAbE,Q;AAElB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAO,IAAMC,gBAAgB,GAAGF,QAAzB;AAEP;;;;;;;;AAOA,eAAeC,QAAf","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { createContext } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport defaultRegistry from '../../default-registry';\n\nexport const Context = createContext( defaultRegistry );\n\nconst { Consumer, Provider } = Context;\n\n/**\n * A custom react Context consumer exposing the provided `registry` to\n * children components. Used along with the RegistryProvider.\n *\n * You can read more about the react context api here:\n * https://reactjs.org/docs/context.html#contextprovider\n *\n * @example\n * ```js\n * const {\n *   RegistryProvider,\n *   RegistryConsumer,\n *   createRegistry\n * } = wp.data;\n *\n * const registry = createRegistry( {} );\n *\n * const App = ( { props } ) => {\n *   return <RegistryProvider value={ registry }>\n *     <div>Hello There</div>\n *     <RegistryConsumer>\n *       { ( registry ) => (\n *         <ComponentUsingRegistry\n *         \t\t{ ...props }\n *         \t  registry={ registry }\n *       ) }\n *     </RegistryConsumer>\n *   </RegistryProvider>\n * }\n * ```\n */\nexport const RegistryConsumer = Consumer;\n\n/**\n * A custom Context provider for exposing the provided `registry` to children\n * components via a consumer.\n *\n * See <a name=\"#RegistryConsumer\">RegistryConsumer</a> documentation for\n * example.\n */\nexport default Provider;\n"]}