{"version":3,"file":"react-use-gesture.esm.js","sources":["../src/utils/math.ts","../src/utils/utils.ts","../src/utils/state.ts","../src/utils/event.ts","../src/Controller.ts","../src/hooks/useRecognizers.ts","../src/recognizers/Recognizer.ts","../src/recognizers/CoordinatesRecognizer.ts","../src/recognizers/DragRecognizer.ts","../src/utils/config.ts","../src/hooks/useDrag.ts","../src/recognizers/DistanceAngleRecognizer.ts","../src/recognizers/PinchRecognizer.ts","../src/hooks/usePinch.ts","../src/recognizers/WheelRecognizer.ts","../src/hooks/useWheel.ts","../src/recognizers/MoveRecognizer.ts","../src/hooks/useMove.ts","../src/hooks/useHover.ts","../src/recognizers/ScrollRecognizer.ts","../src/hooks/useScroll.ts","../src/hooks/useGesture.ts"],"sourcesContent":["// vector add\nexport function addV<T extends number[]>(v1: T, v2: T): T {\n  return v1.map((v, i) => v + v2[i]) as T\n}\n\n// vector substract\nexport function subV<T extends number[]>(v1: T, v2: T): T {\n  return v1.map((v, i) => v - v2[i]) as T\n}\n/**\n * Calculates velocity\n * @param delta the difference between current and previous vectors\n * @param delta_t the time offset\n * @param len the length of the delta vector\n * @returns velocity\n */\nexport function calculateVelocity(delta: number[], delta_t: number, len: number): number {\n  len = len || Math.hypot(...delta)\n  return delta_t ? len / delta_t : 0\n}\n\n/**\n * Calculates velocities vector\n * @template T the expected vector type\n * @param delta the difference between current and previous vectors\n * @param delta_t the time offset\n * @returns velocities vector\n */\nexport function calculateVelocities<T extends number[]>(delta: T, delta_t: number): T {\n  return (delta_t ? delta.map(v => v / delta_t) : Array(delta.length).fill(0)) as T\n}\n\n/**\n * Calculates distance\n * @param movement the difference between current and initial vectors\n * @returns distance\n */\nexport function calculateDistance(movement: number[]): number {\n  return Math.hypot(...movement)\n}\n\n/**\n * Calculates direction\n * @template T the expected vector type\n * @param delta\n * @param len\n * @returns direction\n */\nexport function calculateDirection<T extends number[]>(delta: T, len?: number): T {\n  len = len || Math.hypot(...delta) || 1\n  return delta.map(v => v / len!) as T\n}\n\ninterface Kinematics<T extends number[]> {\n  velocities: T\n  velocity: number\n  distance: number\n  direction: T\n}\n\n/**\n * Calculates all kinematics\n * @template T the expected vector type\n * @param movement the difference between current and initial vectors\n * @param delta the difference between current and previous vectors\n * @param delta_t the time difference between current and previous timestamps\n * @returns all kinematics\n */\nexport function calculateAllKinematics<T extends number[]>(movement: T, delta: T, delta_t: number): Kinematics<T> {\n  const len = Math.hypot(...delta)\n\n  return {\n    velocities: calculateVelocities(delta, delta_t),\n    velocity: calculateVelocity(delta, delta_t, len),\n    distance: calculateDistance(movement),\n    direction: calculateDirection(delta, len),\n  }\n}\n\nexport function getIntentionalDisplacement(movement: number, threshold: number): number | false {\n  const abs = Math.abs(movement)\n  return abs >= threshold ? Math.sign(movement) * threshold : false\n}\n\nfunction minMax(value: number, min: number, max: number) {\n  return Math.max(min, Math.min(value, max))\n}\n\n// Based on @aholachek ;)\n// https://twitter.com/chpwn/status/285540192096497664\n// iOS constant = 0.55\n\n// https://medium.com/@nathangitter/building-fluid-interfaces-ios-swift-9732bb934bf5\nfunction rubberband2(distance: number, constant: number) {\n  // default constant from the article is 0.7\n  return Math.pow(distance, constant * 5)\n}\n\nfunction rubberband(distance: number, dimension: number, constant: number) {\n  if (dimension === 0 || Math.abs(dimension) === Infinity) return rubberband2(distance, constant)\n  return (distance * dimension * constant) / (dimension + constant * distance)\n}\n\nexport function rubberbandIfOutOfBounds(position: number, min: number, max: number, constant = 0.15) {\n  if (constant === 0) return minMax(position, min, max)\n\n  if (position < min) {\n    return -rubberband(min - position, max - min, constant) + min\n  }\n  if (position > max) {\n    return rubberband(position - max, max - min, constant) + max\n  }\n  return position\n}\n","import { Fn, Vector2 } from '../types'\n\n// blank function\nexport function noop() {}\n// returns a function that chains all functions given as parameters\nexport const chainFns = (...fns: Fn[]): Fn => (...args: any[]) => fns.forEach(fn => fn(...args))\n\nexport const def = {\n  array: <T>(value: T | T[]): T[] => (Array.isArray(value) ? value : [value, value]),\n  withDefault: <T>(value: T | undefined, defaultIfUndefined: T): T => (value !== void 0 ? value : defaultIfUndefined),\n}\n\nexport function matchKeysFromObject<T extends object, K extends object>(obj: T, matchingObject: K): Partial<T> {\n  const o: Partial<T> = {}\n  Object.entries(obj).forEach(\n    ([key, value]) => (value !== void 0 || key in matchingObject) && (o[key as keyof T] = value)\n  )\n  return o\n}\n\nexport function valueFn(v: Vector2 | (() => Vector2)) {\n  return typeof v === 'function' ? v() : v\n}\n","import { noop } from './utils'\nimport { CommonGestureState, Coordinates, State, DistanceAngle, Vector2 } from '../types'\n\nexport function getInitialState(): State {\n  // common initial state for all gestures\n  const initialCommon: CommonGestureState = {\n    _active: false,\n    _blocked: false,\n    _intentional: [false, false],\n    _movement: [0, 0],\n    _initial: [0, 0],\n    _lastEventType: undefined,\n    event: undefined,\n    // currentTarget: undefined,\n    // pointerId: undefined,\n    values: [0, 0],\n    velocities: [0, 0],\n    delta: [0, 0],\n    movement: [0, 0],\n    offset: [0, 0],\n    lastOffset: [0, 0],\n    direction: [0, 0],\n    initial: [0, 0],\n    previous: [0, 0],\n    first: false,\n    last: false,\n    active: false,\n    timeStamp: 0,\n    startTime: 0,\n    elapsedTime: 0,\n    cancel: noop,\n    canceled: false,\n    memo: undefined,\n    args: undefined,\n  }\n\n  // initial state for coordinates-based gestures\n  const initialCoordinates: Coordinates = {\n    axis: undefined,\n    xy: [0, 0] as Vector2,\n    vxvy: [0, 0] as Vector2,\n    velocity: 0,\n    distance: 0,\n  }\n\n  // initial state for distance and angle-based gestures (pinch)\n  const initialDistanceAngle: DistanceAngle = {\n    da: [0, 0] as Vector2,\n    vdva: [0, 0] as Vector2,\n    origin: undefined,\n    turns: 0,\n  }\n\n  // initial state object (used by the gesture controller)\n  return {\n    shared: {\n      hovering: false,\n      scrolling: false,\n      wheeling: false,\n      dragging: false,\n      moving: false,\n      pinching: false,\n      touches: 0,\n      buttons: 0,\n      down: false,\n      shiftKey: false,\n      altKey: false,\n      metaKey: false,\n      ctrlKey: false,\n    },\n    drag: {\n      ...initialCommon,\n      ...initialCoordinates,\n      _isTap: true,\n      _delayedEvent: false,\n      tap: false,\n      swipe: [0, 0],\n    },\n    pinch: { ...initialCommon, ...initialDistanceAngle },\n    wheel: { ...initialCommon, ...initialCoordinates },\n    move: { ...initialCommon, ...initialCoordinates },\n    scroll: { ...initialCommon, ...initialCoordinates },\n  }\n}\n","import { Fn, EventOptions, UseGestureEvent, Vector2, WebKitGestureEvent } from '../types'\n\nconst isBrowser = typeof window !== 'undefined'\n\nexport const supportsTouchEvents = () => isBrowser && window.ontouchstart === null\n\nconst setListeners = (add: boolean) => (el: EventTarget, listeners: [string, Fn][], options: EventOptions): void => {\n  const action = add ? 'addEventListener' : 'removeEventListener'\n  listeners.forEach(([eventName, fn]) => el[action](eventName, fn, options))\n}\n\n/**\n * Whether the browser supports GestureEvent (ie Safari)\n * @returns true if the browser supports gesture event\n */\nexport function supportsGestureEvents(): boolean {\n  try {\n    // TODO [TS] possibly find GestureEvent definitions?\n    // @ts-ignore: no type definitions for webkit GestureEvents\n    return 'constructor' in GestureEvent\n  } catch (e) {\n    return false\n  }\n}\n\nexport const addListeners = setListeners(true)\nexport const removeListeners = setListeners(false)\n\ninterface ModifierKeys {\n  shiftKey: boolean\n  altKey: boolean\n  metaKey: boolean\n  ctrlKey: boolean\n}\n\n/**\n * Gets modifier keys from event\n * @param event\n * @returns modifier keys\n */\nexport function getModifierKeys(event: UseGestureEvent): ModifierKeys {\n  const { shiftKey, altKey, metaKey, ctrlKey } = event\n  return { shiftKey, altKey, metaKey, ctrlKey }\n}\n\nfunction getTouchEvents(event: UseGestureEvent) {\n  if ('touches' in event) {\n    const { touches, changedTouches } = event\n    return touches.length > 0 ? touches : changedTouches\n  }\n  return null\n}\n\nexport function getGenericEventData(event: React.MouseEvent | React.TouchEvent | React.PointerEvent) {\n  const buttons = 'buttons' in event ? event.buttons : 0\n  const touchEvents = getTouchEvents(event)\n  const touches = (touchEvents && touchEvents.length) || 0\n  const down = touches > 0 || buttons > 0\n  return { touches, down, buttons, ...getModifierKeys(event) }\n}\n\ntype Values = { values: Vector2 }\n\n/**\n * Gets scroll event values\n * @param event\n * @returns scroll event values\n */\nexport function getScrollEventValues(event: UseGestureEvent): Values {\n  // If the currentTarget is the window then we return the scrollX/Y position.\n  // If not (ie the currentTarget is a DOM element), then we return scrollLeft/Top\n  const { scrollX, scrollY, scrollLeft, scrollTop } = event.currentTarget as Element & Window\n  return { values: [scrollX || scrollLeft || 0, scrollY || scrollTop || 0] }\n}\n\n/**\n * Gets wheel event values.\n * @param event\n * @returns wheel event values\n */\nexport function getWheelEventValues(event: UseGestureEvent<React.WheelEvent>): Values {\n  const { deltaX, deltaY } = event\n  //TODO implement polyfill ?\n  // https://developer.mozilla.org/en-US/docs/Web/Events/wheel#Polyfill\n  return { values: [deltaX, deltaY] }\n}\n\n/**\n * Gets pointer event values.\n * @param event\n * @returns pointer event values\n */\nexport function getPointerEventValues(event: React.MouseEvent | React.TouchEvent | React.PointerEvent): Values {\n  const touchEvents = getTouchEvents(event)\n  const { clientX, clientY } = touchEvents ? touchEvents[0] : (event as React.PointerEvent)\n  return { values: [clientX, clientY] }\n}\n\nconst WEBKIT_DISTANCE_SCALE_FACTOR = 260\n\n/**\n * Gets webkit gesture event values.\n * @param event\n * @returns webkit gesture event values\n */\nexport function getWebkitGestureEventValues(event: WebKitGestureEvent): Values {\n  return { values: [event.scale * WEBKIT_DISTANCE_SCALE_FACTOR, event.rotation] as Vector2 }\n}\n\n/**\n * Gets two touches event data\n * @param event\n * @returns two touches event data\n */\nexport function getTwoTouchesEventData(event: React.TouchEvent) {\n  const { touches } = event\n  const dx = touches[1].clientX - touches[0].clientX\n  const dy = touches[1].clientY - touches[0].clientY\n\n  const values: Vector2 = [Math.hypot(dx, dy), -(Math.atan2(dx, dy) * 180) / Math.PI]\n  const origin: Vector2 = [(touches[1].clientX + touches[0].clientX) / 2, (touches[1].clientY + touches[0].clientY) / 2]\n\n  return { values, origin }\n}\n","import {\n  StateKey,\n  State,\n  Fn,\n  ReactEventHandlerKey,\n  ReactEventHandlers,\n  InternalConfig,\n  InternalHandlers,\n} from './types'\nimport { getInitialState } from './utils/state'\nimport { addListeners, removeListeners } from './utils/event'\nimport { chainFns } from './utils/utils'\n\ntype GestureTimeouts = Partial<{ [stateKey in StateKey]: number }>\ntype WindowListeners = Partial<{ [stateKey in StateKey]: [string, Fn][] }>\ntype Bindings = Partial<{ [eventName in ReactEventHandlerKey]: Fn[] }>\n\n/**\n * The controller will keep track of the state for all gestures and also keep\n * track of timeouts, and window listeners.\n *\n * @template BinderType the type the bind function should return\n */\nexport default class Controller {\n  public config!: InternalConfig\n  public handlers!: Partial<InternalHandlers>\n  public state: State = getInitialState() // state for all gestures\n  public timeouts: GestureTimeouts = {} // keeping track of timeouts for debounced gestures (such as move, scroll, wheel)\n  private domListeners: [string, Fn][] = [] // when config.domTarget is set, we attach events directly to the dom\n  private windowListeners: WindowListeners = {} // keeps track of window listeners added by gestures (drag only at the moment)\n  private bindings: Bindings = {} // an object holding the handlers associated to the gestures\n\n  /**\n   * Function ran on component unmount: cleans timeouts and removes dom listeners set by the bind function.\n   */\n  public clean = (): void => {\n    this.resetBindings()\n    Object.values(this.timeouts).forEach(clearTimeout)\n    Object.keys(this.windowListeners).forEach(stateKey => this.removeWindowListeners(stateKey as StateKey))\n  }\n\n  /**\n   * Function run every time the bind function is run (ie on every render).\n   * Resets the binding object and remove dom listeners attached to config.domTarget\n   */\n  public resetBindings = (): void => {\n    this.bindings = {}\n    const domTarget = this.getDomTarget()\n    if (domTarget) {\n      removeListeners(domTarget, this.domListeners, this.config.eventOptions)\n      this.domListeners = []\n    }\n  }\n\n  /**\n   * Returns the domTarget element and parses a ref if needed.\n   */\n  private getDomTarget = (): EventTarget | null | undefined => {\n    const { domTarget } = this.config\n    return domTarget && 'current' in domTarget ? domTarget.current : domTarget\n  }\n\n  /**\n   * Commodity function to let recognizers simply add listeners to config.window.\n   */\n  public addWindowListeners = (stateKey: StateKey, listeners: [string, Fn][]): void => {\n    if (!this.config.window) return\n    // we use this.windowListeners to keep track of the listeners we add\n    this.windowListeners[stateKey] = listeners\n    addListeners(this.config.window, listeners, this.config.eventOptions)\n  }\n\n  /**\n   * Commodity function to let recognizers simply remove listeners to config.window.\n   */\n  public removeWindowListeners = (stateKey: StateKey): void => {\n    if (!this.config.window) return\n    const listeners = this.windowListeners[stateKey]\n    if (listeners) {\n      removeListeners(this.config.window, listeners, this.config.eventOptions)\n      delete this.windowListeners[stateKey]\n    }\n  }\n\n  /**\n   * When config.domTarget is set, this function will add dom listeners to it\n   */\n  public addDomTargetListeners = (target: EventTarget): void => {\n    /** We iterate on the entries of this.binding for each event, then we chain\n     * the array of functions mapped to it and push them to this.domListeners\n     */\n    Object.entries(this.bindings).forEach(([event, fns]) => {\n      this.domListeners.push([event.substr(2).toLowerCase(), chainFns(...(fns as Fn[]))])\n    })\n\n    addListeners(target, this.domListeners, this.config.eventOptions)\n  }\n\n  /**\n   * this.bindings is an object which keys match ReactEventHandlerKeys.\n   * Since a recognizer might want to bind a handler function to an event key already used by a previously\n   * added recognizer, we need to make sure that each event key is an array of all the functions mapped for\n   * that key.\n   */\n  public addBindings = (eventNames: ReactEventHandlerKey | ReactEventHandlerKey[], fn: Fn): void => {\n    const eventNamesArray = !Array.isArray(eventNames) ? [eventNames] : eventNames\n    eventNamesArray.forEach(eventName => {\n      if (this.bindings[eventName]) this.bindings[eventName]!.push(fn)\n      else this.bindings[eventName] = [fn]\n    })\n  }\n\n  /**\n   * getBindings will return an object that will be bound by users\n   * to the react component they want to interact with.\n   */\n  public getBindings = (): ReactEventHandlers => {\n    const bindings: ReactEventHandlers = {}\n    const { captureString } = this.config\n\n    Object.entries(this.bindings).forEach(([event, fns]) => {\n      const fnsArray = Array.isArray(fns) ? fns : [fns]\n      const key = (event + captureString) as ReactEventHandlerKey\n      bindings[key] = chainFns(...(fnsArray as Fn[]))\n    })\n\n    return bindings\n  }\n\n  public getBind = () => {\n    // If config.domTarget is set we add event listeners to it and return the clean function.\n    if (this.config.domTarget) {\n      const domTarget = this.getDomTarget()\n      domTarget && this.addDomTargetListeners(domTarget)\n      return this.clean\n    }\n\n    // If not, we return an object that contains gesture handlers mapped to react handler event keys.\n    return this.getBindings()\n  }\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\n\nimport React from 'react'\nimport Controller from '../Controller'\nimport {\n  InternalConfig,\n  HookReturnType,\n  InternalHandlers,\n  RecognizerClasses,\n  GenericOptions,\n  NativeHandlersPartial,\n  ReactEventHandlerKey,\n  Fn,\n} from '../types'\n/**\n * @private\n *\n * Utility hook called by all gesture hooks and that will be responsible for the internals.\n *\n * @param {Partial<InternalHandlers>} handlers\n * @param {RecognizerClasses} classes\n * @param {InternalConfig} config\n * @param {NativeHandlersPartial} nativeHandlers - native handlers such as onClick, onMouseDown, etc.\n * @returns {(...args: any[]) => HookReturnType<Config>}\n */\nexport default function useRecognizers<Config extends Partial<GenericOptions>>(\n  handlers: Partial<InternalHandlers>,\n  classes: RecognizerClasses,\n  config: InternalConfig,\n  nativeHandlers?: NativeHandlersPartial\n): (...args: any[]) => HookReturnType<Config> {\n  // The gesture controller keeping track of all gesture states\n  const controller = React.useMemo(() => {\n    const current = new Controller()\n\n    /**\n     * The bind function will create gesture recognizers and return the right\n     * bind object depending on whether `domTarget` was specified in the config object.\n     */\n    const bind = (...args: any[]) => {\n      current.resetBindings()\n      for (let RecognizerClass of classes) {\n        new RecognizerClass(current, args).addBindings()\n      }\n\n      // we also add event bindings for native handlers\n      if (controller.nativeRefs) {\n        for (let eventName in controller.nativeRefs)\n          current.addBindings(\n            eventName as ReactEventHandlerKey,\n            // @ts-ignore we're cheating when it comes to event type :(\n            controller.nativeRefs[eventName] as Fn\n          )\n      }\n\n      return current.getBind() as HookReturnType<Config>\n    }\n\n    return { nativeRefs: nativeHandlers, current, bind }\n  }, [])\n\n  // We reassign the config and handlers to the controller on every render.\n  controller.current!.config = config\n  controller.current!.handlers = handlers\n  // We assign nativeHandlers, otherwise they won't be refreshed on the next render.\n  controller.nativeRefs = nativeHandlers\n\n  // Run controller clean functions on unmount.\n  React.useEffect(() => controller.current!.clean, [])\n\n  return controller.bind\n}\n","import Controller from '../Controller'\nimport {\n  StateKey,\n  SharedGestureState,\n  Fn,\n  UseGestureEvent,\n  IngKey,\n  InternalConfig,\n  GestureState,\n  PartialGestureState,\n  Vector2,\n  FalseOrNumber,\n  FullGestureState,\n} from '../types'\nimport { getInitialState } from '../utils/state'\nimport { subV, addV, getIntentionalDisplacement, rubberbandIfOutOfBounds } from '../utils/math'\nimport { valueFn } from '../utils/utils'\n\n/**\n * @private\n * Recognizer abstract class.\n *\n * @protected\n * @abstract\n * @type {StateKey<T>} whether the Recognizer should deal with coordinates or distance / angle\n */\nexport default abstract class Recognizer<T extends StateKey> {\n  protected abstract ingKey: IngKey // dragging, scrolling, etc.\n  protected debounced: Boolean = true\n\n  /**\n   * Creates an instance of a gesture recognizer.\n   * @param stateKey drag, move, pinch, etc.\n   * @param controller the controller attached to the gesture\n   * @param [args] the args that should be passed to the gesture handler\n   */\n  constructor(\n    protected readonly stateKey: T,\n    protected readonly controller: Controller,\n    protected readonly args: any[] = []\n  ) {}\n\n  // Returns the gesture config\n  protected get config(): NonNullable<InternalConfig[T]> {\n    return this.controller.config[this.stateKey]!\n  }\n\n  // Is the gesture enabled\n  protected get enabled(): boolean {\n    return this.controller.config.enabled && this.config.enabled\n  }\n\n  // Returns the controller state for a given gesture\n  protected get state(): GestureState<T> {\n    return this.controller.state[this.stateKey]\n  }\n\n  // Returns the gesture handler\n  protected get handler() {\n    return this.controller.handlers[this.stateKey]!\n  }\n\n  // Conveninence method to update the shared state\n  protected updateSharedState(sharedState: Partial<SharedGestureState> | null) {\n    Object.assign(this.controller.state.shared, sharedState)\n  }\n\n  // Conveninence method to update the gesture state\n  protected updateGestureState(gestureState: PartialGestureState<T> | null) {\n    Object.assign(this.state, gestureState)\n  }\n\n  // Convenience method to set a timeout for a given gesture\n  protected setTimeout = (callback: (...args: any[]) => void, ms: number = 140, ...args: any[]): void => {\n    this.controller.timeouts[this.stateKey] = window.setTimeout(callback, ms, ...args)\n  }\n\n  // Convenience method to clear a timeout for a given gesture\n  protected clearTimeout = () => {\n    clearTimeout(this.controller.timeouts[this.stateKey])\n  }\n\n  // Convenience method to add window listeners for a given gesture\n  protected addWindowListeners = (listeners: [string, Fn][]) => {\n    this.controller.addWindowListeners(this.stateKey, listeners)\n  }\n\n  // Convenience method to remove window listeners for a given gesture\n  protected removeWindowListeners = () => {\n    this.controller.removeWindowListeners(this.stateKey)\n  }\n\n  /**\n   * Utility function to get kinematics of the gesture.\n   *\n   * @abstract\n   * @values - values we want to calculate the kinematics from\n   * @event - the pointer event\n   * @returns - set of values including movement, velocity, velocities, distance and direction\n   */\n  protected abstract getKinematics(values: Vector2, event: UseGestureEvent): PartialGestureState<T>\n\n  protected abstract mapStateValues(state: GestureState<T>): PartialGestureState<T>\n\n  // Should return the bindings to be added for a given gesture\n  public abstract addBindings(): void\n\n  /**\n   * Returns a generic, common payload for all gestures from an event.\n   *\n   * @param {UseGestureEvent} event\n   * @param {boolean} [isStartEvent]\n   * @returns - the generic gesture payload\n   */\n  protected getGenericPayload(event: UseGestureEvent, isStartEvent?: boolean) {\n    const { timeStamp, type } = event\n    const { values, startTime } = this.state\n\n    return {\n      _lastEventType: type,\n      event,\n      timeStamp,\n      elapsedTime: isStartEvent ? 0 : timeStamp - startTime!,\n      args: this.args,\n      previous: values,\n    }\n  }\n  /**\n   * Returns the reinitialized start state for the gesture.\n   * Should be common to all gestures.\n   *\n   * @param {Vector2} values\n   * @param {UseGestureEvent} event\n   * @returns - the start state for the gesture\n   */\n  protected getStartGestureState = (values: Vector2, event: UseGestureEvent) => {\n    return {\n      ...getInitialState()[this.stateKey],\n      _active: true,\n      values,\n      initial: values,\n      offset: this.state.offset,\n      lastOffset: this.state.offset,\n      startTime: event.timeStamp,\n    }\n  }\n\n  /**\n   * Returns state properties depending on the movement and state.\n   *\n   * Should be overriden for custom behavior, doesn't do anything in the implementation\n   * below.\n   */\n  protected checkIntentionality(\n    _intentional: [FalseOrNumber, FalseOrNumber],\n    _movement: Vector2,\n    _state: PartialGestureState<T>\n  ): PartialGestureState<T> {\n    return { _intentional, _blocked: false } as PartialGestureState<T>\n  }\n\n  protected abstract getInternalMovement(values: Vector2, state: GestureState<T>): Vector2\n\n  /**\n   * Returns basic movement properties for the gesture based on the next values and current state.\n   */\n  protected getMovement(values: Vector2, state: GestureState<T> = this.state): PartialGestureState<T> {\n    const { initial, threshold, rubberband } = this.config\n\n    const [t0, t1] = threshold\n\n    const { _initial, _active, _intentional: intentional, lastOffset, movement: prevMovement } = state\n    let [i0, i1] = intentional\n\n    const [_m0, _m1] = this.getInternalMovement(values, state)\n\n    /**\n     * For both dimensions of the gesture, check its intentionality on each frame.\n     */\n    if (i0 === false) {\n      i0 = getIntentionalDisplacement(_m0, t0)\n    }\n    if (i1 === false) {\n      i1 = getIntentionalDisplacement(_m1, t1)\n    }\n\n    // Get gesture specific state properties based on intentionality and movement.\n    const intentionalityCheck = this.checkIntentionality([i0, i1], [_m0, _m1], state)\n\n    const { _intentional, _blocked } = intentionalityCheck\n    const [_i0, _i1] = _intentional!\n    const _movement = [_m0, _m1]\n\n    if (_i0 !== false && intentional[0] === false) _initial[0] = valueFn(initial)[0]\n    if (_i1 !== false && intentional[1] === false) _initial[1] = valueFn(initial)[1]\n\n    /**\n     * If the gesture has been blocked (from gesture specific checkIntentionality),\n     * stop right there.\n     */\n    if (_blocked) return { ...intentionalityCheck, _movement, delta: [0, 0] }\n\n    /**\n     * The movement sent to the handler has 0 in its dimensions when intentionality is false.\n     * It is calculated from the actual movement minus the threshold.\n     */\n    let movement = [\n      _i0 !== false ? _m0 - _i0 : valueFn(initial)[0],\n      _i1 !== false ? _m1 - _i1 : valueFn(initial)[1],\n    ] as Vector2\n    const offset = addV(movement, lastOffset)\n\n    /**\n     * Rubberband should be 0 when the gesture is no longer active, so that movement\n     * and offset can return within their bounds.\n     */\n    const _rubberband: Vector2 = _active ? rubberband : [0, 0]\n    movement = this.rubberband(addV(movement, _initial), _rubberband) // rubberbanded movement\n\n    return {\n      ...intentionalityCheck,\n      _initial,\n      _movement,\n      movement,\n      offset: this.rubberband(offset, _rubberband), // rubberbanded offset\n      delta: subV(movement, prevMovement),\n    } as PartialGestureState<T>\n  }\n\n  // Runs rubberband on a vector\n  protected rubberband = (vector: Vector2, rubberband: Vector2): Vector2 => {\n    const { bounds } = this.config\n\n    /**\n     * [x, y]: [rubberband(x, min, max), rubberband(y, min, max)]\n     */\n    return vector.map((v, i) => rubberbandIfOutOfBounds(v, bounds[i][0], bounds[i][1], rubberband[i])) as Vector2\n  }\n\n  // Cleans the gesture. Can be overriden by gestures.\n  protected clean() {\n    this.clearTimeout()\n    this.removeWindowListeners()\n  }\n\n  /**\n   * Fires the gesture handler\n   *\n   * @param {boolean} [forceFlag] - if true, then the handler will fire even if the gesture is not intentional\n   */\n  protected fireGestureHandler = (forceFlag?: boolean): FullGestureState<T> | null => {\n    /**\n     * If the gesture has been blocked (this can happen when the gesture has started in an unwanted direction),\n     * clean everything and don't do anything.\n     */\n    if (this.state._blocked) {\n      // we need debounced gestures to end by themselves\n      if (!this.debounced) {\n        this.state._active = false\n        this.clean()\n      }\n      return null\n    }\n\n    // If the gesture has no intentional dimension, don't do fire the handler.\n    const [intentionalX, intentionalY] = this.state._intentional\n    if (!forceFlag && intentionalX === false && intentionalY === false) return null\n\n    const { _active, active } = this.state\n\n    this.state.active = _active\n    this.state.first = _active && !active // `first` is true when the gesture becomes active\n    this.state.last = active && !_active // `last` is true when the gesture becomes inactive\n\n    this.controller.state.shared[this.ingKey] = _active // Sets dragging, pinching, etc. to the gesture active state\n\n    const state = {\n      ...this.controller.state.shared,\n      ...this.state,\n      ...this.mapStateValues(this.state), // Sets xy or da to the gesture state values\n    } as FullGestureState<T>\n\n    // @ts-ignore\n    const newMemo = this.handler(state)\n\n    // Sets memo to the returned value of the handler (unless it's not undefined)\n    this.state.memo = newMemo !== void 0 ? newMemo : this.state.memo\n\n    // Cleans the gesture when the gesture is no longer active.\n    if (!_active) this.clean()\n\n    return state\n  }\n}\n","import Recognizer from './Recognizer'\nimport { calculateAllKinematics, subV } from '../utils/math'\nimport { Vector2, UseGestureEvent, PartialGestureState, FalseOrNumber, GestureState, CoordinatesKey } from '../types'\n\n/**\n * @private\n * Abstract class for coordinates-based gesture recongizers\n * @abstract\n * @class CoordinatesRecognizer\n * @extends {Recognizer<T>}\n * @template T\n */\nexport default abstract class CoordinatesRecognizer<T extends CoordinatesKey> extends Recognizer<T> {\n  /**\n   * Returns the real movement (without taking intentionality into acount)\n   */\n  protected getInternalMovement(values: Vector2, state: GestureState<T>): Vector2 {\n    return subV(values, state.initial)\n  }\n\n  /**\n   * In coordinates-based gesture, this function will detect the first intentional axis,\n   * lock the gesture axis if lockDirection is specified in the config, block the gesture\n   * if the first intentional axis doesn't match the specified axis in config.\n   *\n   * @param {[FalseOrNumber, FalseOrNumber]} _intentional\n   * @param {Vector2} _movement\n   * @param {PartialGestureState<T>} state\n   */\n  protected checkIntentionality(\n    _intentional: [FalseOrNumber, FalseOrNumber],\n    _movement: Vector2,\n    state: PartialGestureState<T>\n  ): PartialGestureState<T> {\n    let [_ix, _iy] = _intentional\n    const intentionalMovement = _ix !== false || _iy !== false\n    let { axis } = state\n    let _blocked = false\n\n    // If the movement is intentional, we can compute axis.\n    if (intentionalMovement) {\n      const [absX, absY] = _movement.map(Math.abs)\n\n      const { axis: configAxis, lockDirection } = this.config\n\n      // We make sure we only set axis value if it hadn't been detected before.\n      axis = axis || (absX > absY ? 'x' : absX < absY ? 'y' : undefined)\n      if (!!configAxis || lockDirection) {\n        if (!!axis) {\n          // If the detected axis doesn't match the config axis we block the gesture\n          if (!!configAxis && axis !== configAxis) _blocked = true\n          else {\n            // Otherwise we prevent the gesture from updating the unwanted axis.\n            const lockedIndex = axis === 'x' ? 1 : 0\n            _intentional![lockedIndex] = false\n          }\n        } else {\n          // Until we've detected the axis, we prevent the hnadler from updating.\n          _intentional = [false, false]\n        }\n      }\n    }\n\n    return { _intentional, _blocked, axis } as PartialGestureState<T>\n  }\n\n  getKinematics(values: Vector2, event: UseGestureEvent): PartialGestureState<T> {\n    const { timeStamp } = this.state\n\n    const movementDetection = this.getMovement(values, this.state)\n    const { _blocked, delta, movement } = movementDetection\n\n    if (_blocked) return movementDetection\n\n    const delta_t = event.timeStamp - timeStamp!\n    const kinematics = calculateAllKinematics(movement!, delta!, delta_t)\n\n    return {\n      values,\n      delta,\n      ...movementDetection,\n      ...kinematics,\n    }\n  }\n\n  protected mapStateValues(state: GestureState<T>): PartialGestureState<T> {\n    return { xy: state.values, vxvy: state.velocities } as PartialGestureState<T>\n  }\n}\n","import { PointerEvent } from 'react'\nimport CoordinatesRecognizer from './CoordinatesRecognizer'\nimport Controller from '../Controller'\nimport { UseGestureEvent, Fn, IngKey } from '../types'\nimport { noop } from '../utils/utils'\nimport { getPointerEventValues, getGenericEventData } from '../utils/event'\nimport { calculateDistance } from '../utils/math'\n\nconst TAP_DISTANCE_THRESHOLD = 3\nconst SWIPE_MAX_ELAPSED_TIME = 220\nconst FILTER_REPEATED_EVENTS_DELAY = 200\n\nexport default class DragRecognizer extends CoordinatesRecognizer<'drag'> {\n  ingKey = 'dragging' as IngKey\n  wasTouch = false\n\n  constructor(controller: Controller, args: any[]) {\n    super('drag', controller, args)\n  }\n\n  private isEventTypeTouch = (type?: string) => !!type && type.indexOf('touch') === 0\n\n  private dragShouldStart = (event: UseGestureEvent) => {\n    const { touches } = getGenericEventData(event)\n    const { _lastEventType } = this.state\n    /**\n     * This tries to filter out mouse events triggered by touch screens\n     * */\n    // If the previous gesture was touch-based, and the current one is mouse based,\n    // this means that we might be dealing with mouse simulated events if they're close to\n    // each other. We're only doing this check when we're not using pointer events.\n    if (\n      !this.controller.config.pointer &&\n      this.isEventTypeTouch(_lastEventType) &&\n      !this.isEventTypeTouch(event.type)\n    ) {\n      const delay = Math.abs(event.timeStamp - this.state.startTime)\n      if (delay < FILTER_REPEATED_EVENTS_DELAY) return false\n    }\n\n    return this.enabled && touches < 2\n  }\n\n  private setPointers = (event: UseGestureEvent<PointerEvent>) => {\n    const { currentTarget, pointerId } = event\n    if (currentTarget) currentTarget.setPointerCapture(pointerId)\n    this.updateGestureState({ currentTarget, pointerId })\n  }\n\n  private removePointers = () => {\n    const { currentTarget, pointerId } = this.state\n    if (currentTarget && pointerId) currentTarget.releasePointerCapture(pointerId)\n  }\n\n  private setListeners = (isTouch: boolean) => {\n    this.removeWindowListeners()\n    const dragListeners: [string, Fn][] = isTouch\n      ? [\n          ['touchmove', this.onDragChange],\n          ['touchend', this.onDragEnd],\n          ['touchcancel', this.onDragEnd],\n        ]\n      : [\n          ['mousemove', this.onDragChange],\n          ['mouseup', this.onDragEnd],\n        ]\n    this.addWindowListeners(dragListeners)\n  }\n\n  onDragStart = (event: UseGestureEvent): void => {\n    if (!this.dragShouldStart(event)) return\n    // if pointers events\n    if (this.controller.config.pointer) this.setPointers(event as PointerEvent)\n    else this.setListeners(this.isEventTypeTouch(event.type))\n\n    if (this.config.delay > 0) {\n      this.state._delayedEvent = true\n      if (typeof event.persist === 'function') event.persist()\n      this.setTimeout(() => this.startDrag(event), this.config.delay)\n    } else {\n      this.startDrag(event)\n    }\n  }\n\n  startDrag(event: UseGestureEvent) {\n    const { values } = getPointerEventValues(event)\n    this.updateSharedState(getGenericEventData(event))\n\n    const startState = {\n      ...this.getStartGestureState(values, event),\n      ...this.getGenericPayload(event, true),\n    }\n\n    this.updateGestureState({\n      ...startState,\n      ...this.getMovement(values, startState),\n      cancel: () => this.onCancel(),\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onDragChange = (event: UseGestureEvent): void => {\n    const { canceled } = this.state\n    if (canceled) return\n\n    if (!this.state._active) {\n      if (this.state._delayedEvent) {\n        this.clearTimeout()\n        this.startDrag(event)\n      }\n      return\n    }\n\n    const genericEventData = getGenericEventData(event)\n\n    if (!genericEventData.down) {\n      this.onDragEnd(event)\n      return\n    }\n\n    this.updateSharedState(genericEventData)\n\n    const { values } = getPointerEventValues(event)\n    const kinematics = this.getKinematics(values, event)\n\n    let { _isTap } = this.state\n    if (_isTap && calculateDistance(kinematics._movement!) >= TAP_DISTANCE_THRESHOLD) _isTap = false\n\n    this.updateGestureState({\n      ...this.getGenericPayload(event),\n      ...kinematics,\n      _isTap,\n      cancel: () => this.onCancel(),\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onDragEnd = (event: UseGestureEvent): void => {\n    this.state._active = false\n    this.updateSharedState({ down: false, buttons: 0, touches: 0 })\n\n    const {\n      _isTap,\n      values,\n      velocities: [vx, vy],\n      movement: [mx, my],\n      _intentional: [ix, iy],\n    } = this.state\n\n    const endState = {\n      ...this.getGenericPayload(event),\n      ...this.getMovement(values),\n    }\n\n    const { elapsedTime } = endState\n\n    const {\n      swipeVelocity: [svx, svy],\n      swipeDistance: [sx, sy],\n    } = this.config\n\n    const swipe: [number, number] = [0, 0]\n\n    if (elapsedTime < SWIPE_MAX_ELAPSED_TIME) {\n      if (ix !== false && Math.abs(vx) > svx && Math.abs(mx) > sx) swipe[0] = Math.sign(vx)\n      if (iy !== false && Math.abs(vy) > svy && Math.abs(my) > sy) swipe[1] = Math.sign(vy)\n    }\n\n    this.updateGestureState({\n      event,\n      ...endState,\n      tap: _isTap,\n      swipe,\n    })\n    this.fireGestureHandler(this.config.filterTaps && this.state._isTap)\n  }\n\n  clean = (): void => {\n    super.clean()\n    this.state._delayedEvent = false\n\n    if (this.controller.config.pointer) this.removePointers()\n  }\n\n  onCancel = (): void => {\n    this.updateGestureState({ canceled: true, cancel: noop })\n    this.state._active = false\n    this.updateSharedState({ down: false, buttons: 0, touches: 0 })\n    requestAnimationFrame(() => this.fireGestureHandler())\n  }\n\n  addBindings(): void {\n    if (this.controller.config.pointer) {\n      this.controller.addBindings('onPointerDown', this.onDragStart)\n      this.controller.addBindings('onPointerMove', this.onDragChange)\n      this.controller.addBindings(['onPointerUp', 'onPointerCancel'], this.onDragEnd)\n    } else {\n      this.controller.addBindings(['onTouchStart', 'onMouseDown'], this.onDragStart)\n    }\n  }\n}\n","import { def, matchKeysFromObject } from './utils'\nimport {\n  Vector2,\n  GenericOptions,\n  InternalGenericOptions,\n  DragConfig,\n  Tuple,\n  GestureOptions,\n  InternalDragOptions,\n  InternalGestureOptions,\n  CoordinatesConfig,\n  CoordinatesOptions,\n  InternalCoordinatesOptions,\n  DistanceAngleConfig,\n  InternalDistanceAngleOptions,\n} from '../types'\n\nconst DEFAULT_DRAG_DELAY = 180\nconst DEFAULT_RUBBERBAND = 0.15\nconst DEFAULT_SWIPE_VELOCITY = 0.5\nconst DEFAULT_SWIPE_DISTANCE = 60\n\nconst defaultWindow = typeof window !== 'undefined' ? window : undefined\n\nconst defaultCoordinatesOptions: CoordinatesOptions = {\n  lockDirection: false,\n  axis: undefined,\n  bounds: undefined,\n}\n\n/**\n * @private\n *\n * Returns the internal generic option object.\n *\n * @param {Partial<GenericOptions>} [config={}]\n * @returns {InternalGenericOptions}\n */\nexport function getInternalGenericOptions(config: Partial<GenericOptions> = {}): InternalGenericOptions {\n  let {\n    eventOptions: { passive = true, capture = false, pointer = false } = {},\n    window = defaultWindow,\n    domTarget = undefined,\n    enabled = true,\n    ...restConfig\n  } = config\n\n  return {\n    ...restConfig,\n    enabled,\n    domTarget,\n    window,\n    // passive is always true if there's no domTarget\n    eventOptions: { passive: !domTarget || !!passive, capture: !!capture },\n    captureString: capture ? 'Capture' : '',\n    pointer: !!pointer,\n  }\n}\n\nexport function getInternalGestureOptions(gestureConfig: Partial<GestureOptions>): InternalGestureOptions {\n  let { threshold = undefined, rubberband = 0, enabled = true, initial = [0, 0] } = gestureConfig\n\n  if (typeof rubberband === 'boolean') rubberband = rubberband ? DEFAULT_RUBBERBAND : 0\n  if (threshold === void 0) threshold = 0\n\n  return {\n    enabled,\n    initial,\n    threshold: def.array(threshold) as Vector2,\n    rubberband: def.array(rubberband) as Vector2,\n  }\n}\n\nexport function getInternalCoordinatesOptions(coordinatesConfig: CoordinatesConfig = {}): InternalCoordinatesOptions {\n  const { axis, lockDirection, bounds = {}, ...internalOptions } = coordinatesConfig\n\n  const boundsArray = [\n    [def.withDefault(bounds.left, -Infinity), def.withDefault(bounds.right, Infinity)],\n    [def.withDefault(bounds.top, -Infinity), def.withDefault(bounds.bottom, Infinity)],\n  ]\n\n  return {\n    ...getInternalGestureOptions(internalOptions),\n    ...defaultCoordinatesOptions,\n    ...matchKeysFromObject({ axis, lockDirection }, coordinatesConfig),\n    bounds: boundsArray as Tuple<Vector2>,\n  }\n}\n\nexport function getInternalDistanceAngleOptions(\n  distanceAngleConfig: DistanceAngleConfig = {}\n): InternalDistanceAngleOptions {\n  const { distanceBounds = {}, angleBounds = {}, ...internalOptions } = distanceAngleConfig\n\n  const boundsArray = [\n    [def.withDefault(distanceBounds.min, -Infinity), def.withDefault(distanceBounds.max, Infinity)],\n    [def.withDefault(angleBounds.min, -Infinity), def.withDefault(angleBounds.max, Infinity)],\n  ]\n\n  return {\n    ...getInternalGestureOptions(internalOptions),\n    bounds: boundsArray as Tuple<Vector2>,\n  }\n}\n\nexport function getInternalDragOptions(dragConfig: DragConfig = {}): InternalDragOptions {\n  let { enabled, threshold, bounds, rubberband, initial, ...dragOptions } = dragConfig\n  let {\n    swipeVelocity = DEFAULT_SWIPE_VELOCITY,\n    swipeDistance = DEFAULT_SWIPE_DISTANCE,\n    delay = false,\n    filterTaps = false,\n    axis,\n    lockDirection,\n  } = dragOptions\n\n  if (threshold === void 0) {\n    threshold = Math.max(0, filterTaps ? 3 : 0, lockDirection || axis ? 1 : 0)\n  } else {\n    filterTaps = true\n  }\n\n  const internalCoordinatesOptions = getInternalCoordinatesOptions(\n    matchKeysFromObject({ enabled, threshold, bounds, rubberband, axis, lockDirection, initial }, dragConfig)\n  )\n\n  return {\n    ...internalCoordinatesOptions,\n    filterTaps: filterTaps || internalCoordinatesOptions.threshold[0] + internalCoordinatesOptions.threshold[1] > 0,\n    swipeVelocity: def.array(swipeVelocity) as Vector2,\n    swipeDistance: def.array(swipeDistance) as Vector2,\n    delay: typeof delay === 'number' ? delay : delay ? DEFAULT_DRAG_DELAY : 0,\n  }\n}\n","import useRecognizers from './useRecognizers'\nimport DragRecognizer from '../recognizers/DragRecognizer'\nimport { Handler, InternalConfig, HookReturnType, UseDragConfig } from '../types'\nimport { getInternalGenericOptions, getInternalDragOptions } from '../utils/config'\n\n/**\n * @public\n *\n * Drag hook.\n *\n * @param {Handler<'drag'>} handler - the function fired every time the drag gesture updates\n * @param {(Config | {})} [config={}] - the config object including generic options and drag options\n * @returns {(...args: any[]) => HookReturnType<Config>}\n */\nexport function useDrag<Config extends UseDragConfig>(\n  handler: Handler<'drag'>,\n  config: Config | {} = {}\n): (...args: any[]) => HookReturnType<Config> {\n  const { domTarget, eventOptions, window, ...drag } = config as UseDragConfig\n\n  /**\n   * TODO: at the moment we recompute the config object at every render\n   * this could probably be optimized\n   */\n  const mergedConfig: InternalConfig = {\n    ...getInternalGenericOptions({\n      domTarget,\n      eventOptions,\n      window,\n    }),\n    drag: getInternalDragOptions(drag),\n  }\n\n  return useRecognizers<Config>({ drag: handler }, [DragRecognizer], mergedConfig)\n}\n","import Recognizer from './Recognizer'\nimport { calculateAllKinematics } from '../utils/math'\nimport { Vector2, UseGestureEvent, PartialGestureState, DistanceAngleKey, GestureState } from '../types'\n\n/**\n * @private\n * Abstract class for distance/angle-based gesture recongizers\n * @abstract\n * @class DistanceAngleRecognizer\n * @extends {Recognizer<T>}\n * @template T\n */\nexport default abstract class DistanceAngleRecognizer<T extends DistanceAngleKey> extends Recognizer<T> {\n  /**\n   * Returns the real movement (without taking intentionality into acount)\n   */\n  protected getInternalMovement([d, a]: [number, number?], state: GestureState<T>): Vector2 {\n    const { values: da, turns, initial } = state\n\n    // angle might not be defined when ctrl wheel is used for zoom only\n    // in that case we set it to the previous angle value\n    a = a !== void 0 ? a : da[1]\n\n    let delta_a = a - da[1]\n\n    /**\n     * The angle value might jump from 179deg to -179deg when we actually want to\n     * read 181deg to ensure continuity. To make that happen, we detect when the jump\n     * is supsiciously high (ie > 270deg) and increase the `turns` value\n     */\n    const newTurns = Math.abs(delta_a) > 270 ? turns + Math.sign(delta_a) : turns\n\n    // we update the angle difference to its corrected value\n\n    const movement_d = d - initial[0]\n    const movement_a = a - 360 * newTurns - initial[1]\n    return [movement_d, movement_a]\n  }\n\n  getKinematics(values: Vector2, event: UseGestureEvent): PartialGestureState<T> {\n    const { timeStamp, initial } = this.state\n\n    const movementDetection = this.getMovement(values, this.state)\n    const { delta, movement } = movementDetection\n\n    const turns = (values[1] - movement![1] - initial[1]) / 360\n\n    const delta_t = event.timeStamp - timeStamp!\n    const kinematics = calculateAllKinematics(movement!, delta!, delta_t)\n\n    return {\n      values,\n      delta,\n      turns,\n      ...movementDetection,\n      ...kinematics,\n    }\n  }\n\n  protected mapStateValues(state: GestureState<T>): PartialGestureState<T> {\n    return { da: state.values, vdva: state.velocities } as PartialGestureState<T>\n  }\n}\n","import { TouchEvent, WheelEvent } from 'react'\nimport DistanceAngleRecognizer from './DistanceAngleRecognizer'\nimport Controller from '../Controller'\nimport { UseGestureEvent, IngKey, Vector2, WebKitGestureEvent } from '../types'\nimport { noop } from '../utils/utils'\nimport {\n  getGenericEventData,\n  getTwoTouchesEventData,\n  getWheelEventValues,\n  supportsGestureEvents,\n  getWebkitGestureEventValues,\n} from '../utils/event'\n\nexport default class PinchRecognizer extends DistanceAngleRecognizer<'pinch'> {\n  ingKey = 'pinching' as IngKey\n\n  constructor(controller: Controller, args: any[]) {\n    super('pinch', controller, args)\n  }\n\n  private pinchShouldStart = (event: UseGestureEvent) => {\n    const { touches } = getGenericEventData(event)\n    return this.enabled && touches === 2\n  }\n\n  onPinchStart = (event: UseGestureEvent<TouchEvent>) => {\n    if (!this.pinchShouldStart(event)) return\n\n    const { values, origin } = getTwoTouchesEventData(event)\n\n    this.updateSharedState(getGenericEventData(event))\n\n    const startState = {\n      ...this.getStartGestureState(values, event),\n      ...this.getGenericPayload(event, true),\n    }\n\n    this.updateGestureState({\n      ...startState,\n      ...this.getMovement(values, startState),\n      origin,\n      cancel: () => this.onCancel(),\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onPinchChange = (event: UseGestureEvent<TouchEvent>): void => {\n    const { canceled, timeStamp, _active } = this.state\n    if (canceled || !_active) return\n    const genericEventData = getGenericEventData(event)\n    if (genericEventData.touches !== 2 || event.timeStamp === timeStamp) return\n\n    this.updateSharedState(genericEventData)\n\n    const { values, origin } = getTwoTouchesEventData(event)\n    const kinematics = this.getKinematics(values, event)\n\n    this.updateGestureState({\n      ...this.getGenericPayload(event),\n      ...kinematics,\n      origin,\n      cancel: () => this.onCancel(),\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onPinchEnd = (event: UseGestureEvent): void => {\n    if (!this.state.active) return\n    this.state._active = false\n    this.updateSharedState({ down: false, touches: 0 })\n\n    this.updateGestureState({\n      event,\n      ...this.getGenericPayload(event),\n      ...this.getMovement(this.state.values),\n    })\n    this.fireGestureHandler()\n  }\n\n  onCancel = (): void => {\n    this.state._active = false\n    this.updateGestureState({ canceled: true, cancel: noop })\n    this.updateSharedState({ down: false, touches: 0 })\n\n    requestAnimationFrame(() => this.fireGestureHandler())\n  }\n  /**\n   * PINCH WITH WEBKIT GESTURES\n   */\n\n  onGestureStart = (event: WebKitGestureEvent): void => {\n    if (!this.enabled) return\n    event.preventDefault()\n\n    const { values } = getWebkitGestureEventValues(event)\n\n    this.updateSharedState(getGenericEventData(event))\n\n    const startState = {\n      ...this.getStartGestureState(values, event),\n      ...this.getGenericPayload(event, true),\n    }\n\n    this.updateGestureState({\n      ...startState,\n      ...this.getMovement(values, startState),\n      cancel: () => this.onCancel(),\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onGestureChange = (event: WebKitGestureEvent): void => {\n    const { canceled, _active } = this.state\n    if (canceled || !_active) return\n\n    event.preventDefault()\n\n    const genericEventData = getGenericEventData(event)\n\n    this.updateSharedState(genericEventData)\n\n    const { values } = getWebkitGestureEventValues(event)\n    const kinematics = this.getKinematics(values, event)\n\n    this.updateGestureState({\n      ...this.getGenericPayload(event),\n      ...kinematics,\n      cancel: () => this.onCancel(),\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onGestureEnd = (event: WebKitGestureEvent): void => {\n    event.preventDefault()\n    if (!this.state.active) return\n    this.state._active = false\n    this.updateSharedState({ down: false, touches: 0 })\n\n    this.updateGestureState({\n      event,\n      ...this.getGenericPayload(event),\n      ...this.getMovement(this.state.values),\n    })\n    this.fireGestureHandler()\n  }\n\n  updateTouchData = (event: UseGestureEvent<TouchEvent>): void => {\n    if (!this.enabled || event.touches.length !== 2 || !this.state._active) return\n    const { origin } = getTwoTouchesEventData(event)\n    this.state.origin = origin\n  }\n\n  /**\n   * PINCH WITH WHEEL\n   */\n  private wheelShouldRun = (event: UseGestureEvent<WheelEvent>) => {\n    return this.enabled && event.ctrlKey\n  }\n\n  private getWheelValuesFromEvent = (event: UseGestureEvent<WheelEvent>) => {\n    const {\n      values: [, delta_d],\n    } = getWheelEventValues(event)\n    const {\n      values: [prev_d, prev_a],\n    } = this.state\n    const d = prev_d - delta_d\n    const a = prev_a !== void 0 ? prev_a : 0\n\n    return {\n      values: [d, a] as Vector2,\n      origin: [event.clientX, event.clientY] as Vector2,\n      delta: [0, delta_d] as Vector2,\n    }\n  }\n\n  onWheel = (event: UseGestureEvent<WheelEvent>): void => {\n    if (!this.wheelShouldRun(event)) return\n    this.clearTimeout()\n    this.setTimeout(this.onWheelEnd)\n\n    if (!this.state._active) this.onWheelStart(event)\n    else this.onWheelChange(event)\n  }\n\n  onWheelStart = (event: UseGestureEvent<WheelEvent>): void => {\n    const { values, delta, origin } = this.getWheelValuesFromEvent(event)\n\n    if (!this.controller.config.eventOptions.passive) {\n      event.preventDefault()\n    } else if (process.env.NODE_ENV === 'development') {\n      console.warn(\n        'To support zoom on trackpads, try using the `domTarget` option and `config.event.passive` set to `false`. This message will only appear in development mode.'\n      )\n    }\n\n    this.updateSharedState(getGenericEventData(event))\n\n    const startState = {\n      ...this.getStartGestureState(values, event),\n      ...this.getGenericPayload(event, true),\n      initial: this.state.values,\n    }\n\n    this.updateGestureState({\n      ...startState,\n      ...this.getMovement(values, startState),\n      offset: values,\n      delta,\n      origin,\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onWheelChange = (event: UseGestureEvent<WheelEvent>): void => {\n    const genericEventData = getGenericEventData(event)\n\n    this.updateSharedState(genericEventData)\n\n    const { values, origin, delta } = this.getWheelValuesFromEvent(event)\n    const kinematics = this.getKinematics(values, event)\n\n    this.updateGestureState({\n      ...this.getGenericPayload(event),\n      ...kinematics,\n      origin,\n      delta,\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onWheelEnd = (): void => {\n    this.state._active = false\n    this.updateGestureState(this.getMovement(this.state.values))\n    this.fireGestureHandler()\n  }\n\n  addBindings(): void {\n    // Only try to use gesture events when they are supported and domTarget is set\n    // as React doesn't support gesture handlers.\n    if (this.controller.config.domTarget && supportsGestureEvents()) {\n      this.controller.addBindings('onGestureStart', this.onGestureStart)\n      this.controller.addBindings('onGestureChange', this.onGestureChange)\n      this.controller.addBindings(['onGestureEnd', 'onTouchCancel'], this.onGestureEnd)\n      this.controller.addBindings(['onTouchStart', 'onTouchMove'], this.updateTouchData)\n    } else {\n      this.controller.addBindings('onTouchStart', this.onPinchStart)\n      this.controller.addBindings('onTouchMove', this.onPinchChange)\n      this.controller.addBindings(['onTouchEnd', 'onTouchCancel'], this.onPinchEnd)\n\n      this.controller.addBindings('onWheel', this.onWheel)\n    }\n  }\n}\n","import useRecognizers from './useRecognizers'\nimport PinchRecognizer from '../recognizers/PinchRecognizer'\nimport { Handler, InternalConfig, HookReturnType, UsePinchConfig } from '../types'\nimport { getInternalGenericOptions, getInternalDistanceAngleOptions } from '../utils/config'\n\n/**\n * @public\n *\n * Pinch hook.\n *\n * @param {Handler<'pinch'>} handler - the function fired every time the pinch gesture updates\n * @param {(Config | {})} [config={}] - the config object including generic options and pinch options\n * @returns {(...args: any[]) => HookReturnType<Config>}\n */\nexport function usePinch<Config extends UsePinchConfig>(\n  handler: Handler<'pinch'>,\n  config: Config | {} = {}\n): (...args: any[]) => HookReturnType<Config> {\n  const { domTarget, eventOptions, window, ...pinch } = config as UsePinchConfig\n\n  /**\n   * TODO: at the moment we recompute the config object at every render\n   * this could probably be optimized\n   */\n  const mergedConfig: InternalConfig = {\n    ...getInternalGenericOptions({\n      domTarget,\n      eventOptions,\n      window,\n    }),\n    pinch: getInternalDistanceAngleOptions(pinch),\n  }\n\n  return useRecognizers<Config>({ pinch: handler }, [PinchRecognizer], mergedConfig)\n}\n","import { WheelEvent } from 'react'\nimport CoordinatesRecognizer from './CoordinatesRecognizer'\nimport Controller from '../Controller'\nimport { UseGestureEvent, IngKey } from '../types'\nimport { getWheelEventValues, getGenericEventData } from '../utils/event'\nimport { addV, calculateDistance, calculateDirection } from '../utils/math'\n\nexport default class WheelRecognizer extends CoordinatesRecognizer<'wheel'> {\n  ingKey = 'wheeling' as IngKey\n  debounced = true\n\n  constructor(controller: Controller, args: any[]) {\n    super('wheel', controller, args)\n  }\n\n  private wheelShouldRun = (event: UseGestureEvent<WheelEvent>) => {\n    if (event.ctrlKey && 'pinch' in this.controller.handlers) return false\n    return this.enabled\n  }\n\n  private getValuesFromEvent = (event: UseGestureEvent<WheelEvent>) => {\n    const { values: prevValues } = this.state\n    const { values } = getWheelEventValues(event)\n    return { values: addV(values, prevValues) }\n  }\n\n  onWheel = (event: UseGestureEvent<WheelEvent>): void => {\n    if (!this.wheelShouldRun(event)) return\n    this.clearTimeout()\n    this.setTimeout(this.onWheelEnd)\n\n    if (!this.state._active) this.onWheelStart(event)\n    else this.onWheelChange(event)\n  }\n\n  onWheelStart = (event: UseGestureEvent<WheelEvent>): void => {\n    const { values } = this.getValuesFromEvent(event)\n\n    this.updateSharedState(getGenericEventData(event))\n\n    const startState = {\n      ...this.getStartGestureState(values, event),\n      ...this.getGenericPayload(event, true),\n      initial: this.state.values,\n    }\n\n    const movementDetection = this.getMovement(values, startState)\n    const delta = movementDetection.delta!\n\n    this.updateGestureState({\n      ...startState,\n      ...movementDetection,\n      distance: calculateDistance(delta),\n      direction: calculateDirection(delta),\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onWheelChange = (event: UseGestureEvent<WheelEvent>): void => {\n    const genericEventData = getGenericEventData(event)\n\n    this.updateSharedState(genericEventData)\n\n    const { values } = this.getValuesFromEvent(event)\n    const kinematics = this.getKinematics(values, event)\n\n    this.updateGestureState({\n      ...this.getGenericPayload(event),\n      ...kinematics,\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onWheelEnd = (): void => {\n    this.state._active = false\n    this.updateGestureState({ ...this.getMovement(this.state.values), velocities: [0, 0], velocity: 0 })\n    this.fireGestureHandler()\n  }\n\n  addBindings(): void {\n    this.controller.addBindings('onWheel', this.onWheel)\n  }\n}\n","import useRecognizers from './useRecognizers'\nimport WheelRecognizer from '../recognizers/WheelRecognizer'\nimport { Handler, InternalConfig, HookReturnType, UseWheelConfig } from '../types'\nimport { getInternalGenericOptions, getInternalCoordinatesOptions } from '../utils/config'\n\n/**\n * @public\n *\n * Wheel hook.\n *\n * @param {Handler<'wheel'>} handler - the function fired every time the wheel gesture updates\n * @param {(Config | {})} [config={}] - the config object including generic options and wheel options\n * @returns {(...args: any[]) => HookReturnType<Config>}\n */\nexport function useWheel<Config extends UseWheelConfig>(\n  handler: Handler<'wheel'>,\n  config: Config | {} = {}\n): (...args: any[]) => HookReturnType<Config> {\n  const { domTarget, eventOptions, window, ...wheel } = config as UseWheelConfig\n\n  /**\n   * TODO: at the moment we recompute the config object at every render\n   * this could probably be optimized\n   */\n  const mergedConfig: InternalConfig = {\n    ...getInternalGenericOptions({\n      domTarget,\n      eventOptions,\n      window,\n    }),\n    wheel: getInternalCoordinatesOptions(wheel),\n  }\n\n  return useRecognizers<Config>({ wheel: handler }, [WheelRecognizer], mergedConfig)\n}\n","import {} from 'react'\nimport CoordinatesRecognizer from './CoordinatesRecognizer'\nimport Controller from '../Controller'\nimport { UseGestureEvent, IngKey } from '../types'\nimport { getGenericEventData, getPointerEventValues } from '../utils/event'\n\nexport default class MoveRecognizer extends CoordinatesRecognizer<'move'> {\n  ingKey = 'moving' as IngKey\n  debounced = true\n\n  constructor(controller: Controller, args: any[]) {\n    super('move', controller, args)\n  }\n\n  private moveShouldRun = () => {\n    return this.enabled\n  }\n\n  onMove = (event: UseGestureEvent): void => {\n    if (!this.moveShouldRun()) return\n    this.clearTimeout()\n    this.setTimeout(this.onMoveEnd)\n\n    if (!this.state._active) this.onMoveStart(event)\n    else this.onMoveChange(event)\n  }\n\n  onMoveStart = (event: UseGestureEvent): void => {\n    const { values } = getPointerEventValues(event)\n\n    this.updateSharedState(getGenericEventData(event))\n\n    const startState = {\n      ...this.getStartGestureState(values, event),\n      ...this.getGenericPayload(event, true),\n    }\n\n    this.updateGestureState({\n      ...startState,\n      ...this.getMovement(values, startState),\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onMoveChange = (event: UseGestureEvent): void => {\n    const genericEventData = getGenericEventData(event)\n\n    this.updateSharedState(genericEventData)\n\n    const { values } = getPointerEventValues(event)\n    const kinematics = this.getKinematics(values, event)\n\n    this.updateGestureState({\n      ...this.getGenericPayload(event),\n      ...kinematics,\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onMoveEnd = (): void => {\n    this.state._active = false\n\n    this.updateGestureState({ ...this.getMovement(this.state.values), velocities: [0, 0], velocity: 0 })\n    this.fireGestureHandler()\n  }\n\n  onPointerEnter = (event: UseGestureEvent): void => {\n    this.controller.state.shared.hovering = true\n    if (!this.controller.config.enabled) return\n\n    if (this.controller.config.hover!.enabled) {\n      const { values } = getPointerEventValues(event)\n\n      const state = {\n        ...this.controller.state.shared,\n        ...this.state,\n        ...this.getGenericPayload(event, true),\n        values,\n        active: true,\n        hovering: true,\n      }\n\n      this.controller.handlers.hover!({ ...state, ...this.mapStateValues(state) })\n    }\n\n    if ('move' in this.controller.handlers) this.onMoveStart(event)\n  }\n\n  onPointerLeave = (event: UseGestureEvent): void => {\n    this.controller.state.shared.hovering = false\n    if ('move' in this.controller.handlers) this.onMoveEnd()\n\n    if (this.controller.config.hover!.enabled) {\n      const { values } = getPointerEventValues(event)\n\n      const state = {\n        ...this.controller.state.shared,\n        ...this.state,\n        ...this.getGenericPayload(event),\n        values,\n        active: false,\n      }\n\n      this.controller.handlers.hover!({ ...state, ...this.mapStateValues(state) })\n    }\n  }\n\n  addBindings(): void {\n    if (this.controller.config.pointer) {\n      if ('move' in this.controller.handlers) {\n        this.controller.addBindings('onPointerMove', this.onMove)\n      }\n      if ('hover' in this.controller.handlers) {\n        this.controller.addBindings('onPointerEnter', this.onPointerEnter)\n        this.controller.addBindings('onPointerLeave', this.onPointerLeave)\n      }\n    } else {\n      if ('move' in this.controller.handlers) {\n        this.controller.addBindings('onMouseMove', this.onMove)\n      }\n      if ('hover' in this.controller.handlers) {\n        this.controller.addBindings('onMouseEnter', this.onPointerEnter)\n        this.controller.addBindings('onMouseLeave', this.onPointerLeave)\n      }\n    }\n  }\n}\n","import useRecognizers from './useRecognizers'\nimport MoveRecognizer from '../recognizers/MoveRecognizer'\nimport { Handler, InternalConfig, HookReturnType, UseMoveConfig } from '../types'\nimport { getInternalGenericOptions, getInternalCoordinatesOptions } from '../utils/config'\n\n/**\n * @public\n *\n * Move hook.\n *\n * @param {Handler<'move'>} handler - the function fired every time the move gesture updates\n * @param {(Config | {})} [config={}] - the config object including generic options and move options\n * @returns {(...args: any[]) => HookReturnType<Config>}\n */\nexport function useMove<Config extends UseMoveConfig>(\n  handler: Handler<'move'>,\n  config: Config | {} = {}\n): (...args: any[]) => HookReturnType<Config> {\n  const { domTarget, eventOptions, window, ...move } = config as UseMoveConfig\n\n  /**\n   * TODO: at the moment we recompute the config object at every render\n   * this could probably be optimized\n   */\n  const mergedConfig: InternalConfig = {\n    ...getInternalGenericOptions({\n      domTarget,\n      eventOptions,\n      window,\n    }),\n    move: getInternalCoordinatesOptions(move),\n  }\n\n  return useRecognizers<Config>({ move: handler }, [MoveRecognizer], mergedConfig)\n}\n","import useRecognizers from './useRecognizers'\nimport MoveRecognizer from '../recognizers/MoveRecognizer'\nimport { Handler, InternalConfig, HookReturnType, UseHoverConfig } from '../types'\nimport { getInternalGenericOptions } from '../utils/config'\n\n/**\n * @public\n *\n * Hover hook.\n *\n * @param {Handler<'hover'>} handler - the function fired every time the hover gesture updates\n * @param {(Config | {})} [config={}] - the config object including generic options and hover options\n * @returns {(...args: any[]) => HookReturnType<Config>}\n */\nexport function useHover<Config extends UseHoverConfig>(\n  handler: Handler<'hover'>,\n  config: Config | {} = {}\n): (...args: any[]) => HookReturnType<Config> {\n  const { domTarget, eventOptions, window, ...hover } = config as UseHoverConfig\n\n  /**\n   * TODO: at the moment we recompute the config object at every render\n   * this could probably be optimized\n   */\n  const mergedConfig: InternalConfig = {\n    ...getInternalGenericOptions({\n      domTarget,\n      eventOptions,\n      window,\n    }),\n    hover: { enabled: true, ...hover },\n  }\n\n  return useRecognizers<Config>({ hover: handler }, [MoveRecognizer], mergedConfig)\n}\n","import {} from 'react'\nimport CoordinatesRecognizer from './CoordinatesRecognizer'\nimport Controller from '../Controller'\nimport { UseGestureEvent, IngKey } from '../types'\nimport { getGenericEventData, getScrollEventValues } from '../utils/event'\nimport { calculateDistance, calculateDirection } from '../utils/math'\n\nexport default class ScrollRecognizer extends CoordinatesRecognizer<'scroll'> {\n  ingKey = 'scrolling' as IngKey\n  debounced = true\n\n  constructor(controller: Controller, args: any[]) {\n    super('scroll', controller, args)\n  }\n\n  private scrollShouldRun = () => {\n    return this.enabled\n  }\n\n  onScroll = (event: UseGestureEvent): void => {\n    if (!this.scrollShouldRun()) return\n    this.clearTimeout()\n    this.setTimeout(this.onScrollEnd)\n\n    if (!this.state._active) this.onScrollStart(event)\n    else this.onScrollChange(event)\n  }\n\n  onScrollStart = (event: UseGestureEvent): void => {\n    const { values } = getScrollEventValues(event)\n\n    this.updateSharedState(getGenericEventData(event))\n\n    const startState = {\n      ...this.getStartGestureState(values, event),\n      ...this.getGenericPayload(event, true),\n      initial: this.state.values,\n    }\n\n    const movementDetection = this.getMovement(values, startState)\n    const delta = movementDetection.delta!\n\n    this.updateGestureState({\n      ...startState,\n      ...movementDetection,\n      distance: calculateDistance(delta),\n      direction: calculateDirection(delta),\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onScrollChange = (event: UseGestureEvent): void => {\n    const genericEventData = getGenericEventData(event)\n\n    this.updateSharedState(genericEventData)\n\n    const { values } = getScrollEventValues(event)\n    const kinematics = this.getKinematics(values, event)\n\n    this.updateGestureState({\n      ...this.getGenericPayload(event),\n      ...kinematics,\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onScrollEnd = (): void => {\n    this.state._active = false\n    this.updateGestureState({ ...this.getMovement(this.state.values), velocities: [0, 0], velocity: 0 })\n    this.fireGestureHandler()\n  }\n\n  addBindings(): void {\n    this.controller.addBindings('onScroll', this.onScroll)\n  }\n}\n","import useRecognizers from './useRecognizers'\nimport ScrollRecognizer from '../recognizers/ScrollRecognizer'\nimport { Handler, InternalConfig, HookReturnType, UseScrollConfig } from '../types'\nimport { getInternalGenericOptions, getInternalCoordinatesOptions } from '../utils/config'\n\n/**\n * @public\n *\n * Scroll hook.\n *\n * @param {Handler<'scroll'>} handler - the function fired every time the scroll gesture updates\n * @param {(Config | {})} [config={}] - the config object including generic options and scroll options\n * @returns {(...args: any[]) => HookReturnType<Config>}\n */\nexport function useScroll<Config extends UseScrollConfig>(\n  handler: Handler<'scroll'>,\n  config: Config | {} = {}\n): (...args: any[]) => HookReturnType<Config> {\n  const { domTarget, eventOptions, window, ...scroll } = config as UseScrollConfig\n\n  /**\n   * TODO: at the moment we recompute the config object at every render\n   * this could probably be optimized\n   */\n  const mergedConfig: InternalConfig = {\n    ...getInternalGenericOptions({\n      domTarget,\n      eventOptions,\n      window,\n    }),\n    scroll: getInternalCoordinatesOptions(scroll),\n  }\n\n  return useRecognizers<Config>({ scroll: handler }, [ScrollRecognizer], mergedConfig)\n}\n","import React from 'react'\nimport useRecognizers from './useRecognizers'\nimport DragRecognizer from '../recognizers/DragRecognizer'\nimport WheelRecognizer from '../recognizers/WheelRecognizer'\nimport MoveRecognizer from '../recognizers/MoveRecognizer'\nimport PinchRecognizer from '../recognizers/PinchRecognizer'\nimport ScrollRecognizer from '../recognizers/ScrollRecognizer'\nimport {\n  getInternalGenericOptions,\n  getInternalDragOptions,\n  getInternalCoordinatesOptions,\n  getInternalDistanceAngleOptions,\n} from '../utils/config'\nimport {\n  InternalConfig,\n  HandlerKey,\n  UserHandlersPartial,\n  InternalHandlers,\n  UserHandlers,\n  RecognizerClasses,\n  UseGestureConfig,\n  HookReturnType,\n} from '../types'\n\n/**\n * @public\n *\n * The most complete gesture hook, allowing support for multiple gestures.\n *\n * @param {UserHandlersPartial} handlers - an object with on[Gesture] keys containg gesture handlers\n * @param {UseGestureConfig} [config={}] - the full config object\n * @returns {(...args: any[]) => HookReturnType<Config>}\n */\nexport function useGesture<Config extends UseGestureConfig>(\n  handlers: UserHandlersPartial,\n  config: UseGestureConfig = {}\n): (...args: any[]) => HookReturnType<Config> {\n  /**\n   * If handlers contains {onDragStart, onDrag, onDragEnd, onMoveStart, onMove}\n   * actions will include 'onDrag' and 'onMove.\n   */\n  const [actions] = React.useState(() => new Set(Object.keys(handlers).map(k => k.replace(/End|Start/, ''))))\n\n  /**\n   * Here we compute the derived internal config based on the provided config object.\n   * We decompose the config into its generic and gesture options and compute each.\n   * TODO: this is currently done on every render!\n   */\n  const { drag, wheel, move, scroll, pinch, hover, ...restConfig } = config\n\n  const mergedConfig: InternalConfig = getInternalGenericOptions(restConfig)\n\n  const classes: RecognizerClasses = []\n  const internalHandlers: Partial<InternalHandlers> = {}\n\n  // will hold reference to native handlers such as onClick, onMouseDown, etc.\n  const _nativeHandlers = { ...handlers }\n\n  if (actions.has('onDrag')) {\n    classes.push(DragRecognizer)\n    internalHandlers.drag = includeStartEndHandlers(handlers, 'onDrag', _nativeHandlers)\n    mergedConfig.drag = getInternalDragOptions(drag)\n  }\n  if (actions.has('onWheel')) {\n    classes.push(WheelRecognizer)\n    internalHandlers.wheel = includeStartEndHandlers(handlers, 'onWheel', _nativeHandlers)\n    mergedConfig.wheel = getInternalCoordinatesOptions(wheel)\n  }\n  if (actions.has('onScroll')) {\n    classes.push(ScrollRecognizer)\n    internalHandlers.scroll = includeStartEndHandlers(handlers, 'onScroll', _nativeHandlers)\n    mergedConfig.scroll = getInternalCoordinatesOptions(scroll)\n  }\n  if (actions.has('onMove')) {\n    classes.push(MoveRecognizer)\n    internalHandlers.move = includeStartEndHandlers(handlers, 'onMove', _nativeHandlers)\n    mergedConfig.move = getInternalCoordinatesOptions(move)\n  }\n  if (actions.has('onPinch')) {\n    classes.push(PinchRecognizer)\n    internalHandlers.pinch = includeStartEndHandlers(handlers, 'onPinch', _nativeHandlers)\n    mergedConfig.pinch = getInternalDistanceAngleOptions(pinch)\n  }\n  if (actions.has('onHover')) {\n    if (!actions.has('onMove')) classes.push(MoveRecognizer)\n    internalHandlers.hover = handlers.onHover\n    mergedConfig.hover = { enabled: true, ...hover }\n    delete _nativeHandlers.onHover\n  }\n\n  return useRecognizers<Config>(internalHandlers, classes, mergedConfig, _nativeHandlers)\n}\n/**\n * @private\n *\n * This utility function will integrate start and end handlers into the regular\n * handler function by using first and last conditions.\n *\n * @param {UserHandlersPartial} handlers - the handlers function object\n * @param {HandlerKey} handlerKey - the key for which to integrate start and end handlers\n * @returns\n */\nfunction includeStartEndHandlers(\n  handlers: UserHandlersPartial,\n  handlerKey: HandlerKey,\n  _nativeHandlers: UserHandlersPartial\n) {\n  const startKey = (handlerKey + 'Start') as keyof UserHandlers\n  const endKey = (handlerKey + 'End') as keyof UserHandlers\n\n  delete _nativeHandlers[handlerKey]\n  delete _nativeHandlers[startKey]\n  delete _nativeHandlers[endKey]\n\n  const fn = (state: any) => {\n    let memo: any = undefined\n    if (state.first && startKey in handlers) handlers[startKey]!(state)\n    if (handlerKey in handlers) memo = handlers[handlerKey]!(state)\n    if (state.last && endKey in handlers) handlers[endKey]!(state)\n    return memo\n  }\n  return fn\n}\n"],"names":["addV","v1","v2","map","v","i","subV","calculateVelocity","delta","delta_t","len","Math","hypot","calculateVelocities","Array","length","fill","calculateDistance","movement","calculateDirection","calculateAllKinematics","velocities","velocity","distance","direction","getIntentionalDisplacement","threshold","abs","sign","minMax","value","min","max","rubberband2","constant","pow","rubberband","dimension","Infinity","rubberbandIfOutOfBounds","position","noop","chainFns","fns","args","forEach","fn","def","array","isArray","withDefault","defaultIfUndefined","matchKeysFromObject","obj","matchingObject","o","Object","entries","key","valueFn","getInitialState","initialCommon","_active","_blocked","_intentional","_movement","_initial","_lastEventType","undefined","event","values","offset","lastOffset","initial","previous","first","last","active","timeStamp","startTime","elapsedTime","cancel","canceled","memo","initialCoordinates","axis","xy","vxvy","initialDistanceAngle","da","vdva","origin","turns","shared","hovering","scrolling","wheeling","dragging","moving","pinching","touches","buttons","down","shiftKey","altKey","metaKey","ctrlKey","drag","_isTap","_delayedEvent","tap","swipe","pinch","wheel","move","scroll","setListeners","add","el","listeners","options","action","eventName","supportsGestureEvents","GestureEvent","e","addListeners","removeListeners","getModifierKeys","getTouchEvents","changedTouches","getGenericEventData","touchEvents","getScrollEventValues","currentTarget","scrollX","scrollY","scrollLeft","scrollTop","getWheelEventValues","deltaX","deltaY","getPointerEventValues","clientX","clientY","WEBKIT_DISTANCE_SCALE_FACTOR","getWebkitGestureEventValues","scale","rotation","getTwoTouchesEventData","dx","dy","atan2","PI","Controller","resetBindings","timeouts","clearTimeout","keys","windowListeners","stateKey","removeWindowListeners","bindings","domTarget","getDomTarget","domListeners","config","eventOptions","current","window","target","push","substr","toLowerCase","eventNames","eventNamesArray","captureString","fnsArray","addDomTargetListeners","clean","getBindings","useRecognizers","handlers","classes","nativeHandlers","controller","React","useMemo","bind","RecognizerClass","addBindings","nativeRefs","getBind","useEffect","Recognizer","callback","ms","setTimeout","addWindowListeners","state","vector","bounds","forceFlag","debounced","intentionalX","intentionalY","ingKey","mapStateValues","newMemo","handler","updateSharedState","sharedState","assign","updateGestureState","gestureState","getGenericPayload","isStartEvent","type","checkIntentionality","_state","getMovement","t0","t1","intentional","prevMovement","i0","i1","getInternalMovement","_m0","_m1","intentionalityCheck","_i0","_i1","_rubberband","enabled","CoordinatesRecognizer","_ix","_iy","intentionalMovement","absX","absY","configAxis","lockDirection","lockedIndex","getKinematics","movementDetection","kinematics","TAP_DISTANCE_THRESHOLD","SWIPE_MAX_ELAPSED_TIME","FILTER_REPEATED_EVENTS_DELAY","DragRecognizer","indexOf","pointer","isEventTypeTouch","delay","pointerId","setPointerCapture","releasePointerCapture","isTouch","dragListeners","onDragChange","onDragEnd","dragShouldStart","setPointers","persist","startDrag","genericEventData","onCancel","fireGestureHandler","vx","vy","mx","my","ix","iy","endState","swipeVelocity","svx","svy","swipeDistance","sx","sy","filterTaps","removePointers","requestAnimationFrame","startState","getStartGestureState","onDragStart","DEFAULT_DRAG_DELAY","DEFAULT_RUBBERBAND","DEFAULT_SWIPE_VELOCITY","DEFAULT_SWIPE_DISTANCE","defaultWindow","defaultCoordinatesOptions","getInternalGenericOptions","passive","capture","restConfig","getInternalGestureOptions","gestureConfig","getInternalCoordinatesOptions","coordinatesConfig","internalOptions","boundsArray","left","right","top","bottom","getInternalDistanceAngleOptions","distanceAngleConfig","distanceBounds","angleBounds","getInternalDragOptions","dragConfig","dragOptions","internalCoordinatesOptions","useDrag","mergedConfig","DistanceAngleRecognizer","d","a","delta_a","newTurns","movement_d","movement_a","PinchRecognizer","pinchShouldStart","preventDefault","delta_d","prev_d","prev_a","wheelShouldRun","onWheelEnd","onWheelStart","onWheelChange","getWheelValuesFromEvent","process","env","NODE_ENV","console","warn","onGestureStart","onGestureChange","onGestureEnd","updateTouchData","onPinchStart","onPinchChange","onPinchEnd","onWheel","usePinch","WheelRecognizer","prevValues","getValuesFromEvent","useWheel","MoveRecognizer","moveShouldRun","onMoveEnd","onMoveStart","onMoveChange","hover","onMove","onPointerEnter","onPointerLeave","useMove","useHover","ScrollRecognizer","scrollShouldRun","onScrollEnd","onScrollStart","onScrollChange","onScroll","useScroll","useGesture","useState","Set","k","replace","actions","internalHandlers","_nativeHandlers","has","includeStartEndHandlers","onHover","handlerKey","startKey","endKey"],"mappings":"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"}