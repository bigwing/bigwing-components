import { StateKey, State, Fn, ReactEventHandlers, InternalConfig, InternalHandlers } from './types';
declare type GestureTimeouts = Partial<{
    [stateKey in StateKey]: number;
}>;
/**
 * The controller will keep track of the state for all gestures and also keep
 * track of timeouts, and window listeners.
 *
 * @template BinderType the type the bind function should return
 */
export default class Controller {
    config: InternalConfig;
    handlers: Partial<InternalHandlers>;
    state: State;
    timeouts: GestureTimeouts;
    private domListeners;
    private windowListeners;
    private bindings;
    /**
     * Function ran on component unmount: cleans timeouts and removes dom listeners set by the bind function.
     */
    clean: () => void;
    /**
     * Function run every time the bind function is run (ie on every render).
     * Resets the binding object and remove dom listeners attached to config.domTarget
     */
    resetBindings: () => void;
    /**
     * Returns the domTarget element and parses a ref if needed.
     */
    private getDomTarget;
    /**
     * Commodity function to let recognizers simply add listeners to config.window.
     */
    addWindowListeners: (stateKey: "move" | "drag" | "wheel" | "scroll" | "pinch", listeners: [string, Fn][]) => void;
    /**
     * Commodity function to let recognizers simply remove listeners to config.window.
     */
    removeWindowListeners: (stateKey: "move" | "drag" | "wheel" | "scroll" | "pinch") => void;
    /**
     * When config.domTarget is set, this function will add dom listeners to it
     */
    addDomTargetListeners: (target: EventTarget) => void;
    /**
     * this.bindings is an object which keys match ReactEventHandlerKeys.
     * Since a recognizer might want to bind a handler function to an event key already used by a previously
     * added recognizer, we need to make sure that each event key is an array of all the functions mapped for
     * that key.
     */
    addBindings: (eventNames: "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onGestureStart" | "onGestureChange" | "onGestureEnd" | ("onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onGestureStart" | "onGestureChange" | "onGestureEnd")[], fn: Fn) => void;
    /**
     * getBindings will return an object that will be bound by users
     * to the react component they want to interact with.
     */
    getBindings: () => ReactEventHandlers;
    getBind: () => ReactEventHandlers | (() => void);
}
export {};
