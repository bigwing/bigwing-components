{"version":3,"sources":["@wordpress/keycodes/src/index.js"],"names":["get","mapValues","includes","capitalize","xor","__","isAppleOS","BACKSPACE","TAB","ENTER","ESCAPE","SPACE","LEFT","UP","RIGHT","DOWN","DELETE","F10","ALT","CTRL","COMMAND","SHIFT","ZERO","modifiers","primary","_isApple","primaryShift","primaryAlt","secondary","access","ctrl","alt","ctrlShift","shift","shiftAlt","rawShortcut","modifier","character","toLowerCase","join","displayShortcutList","isApple","replacementKeyMap","modifierKeys","reduce","accumulator","key","replacementKey","capitalizedCharacter","displayShortcut","shortcutList","shortcutAriaLabel","map","getEventModifiers","event","filter","isKeyboardEvent","getModifiers","mods","eventMods","length"],"mappings":"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","sourcesContent":["/**\n * Note: The order of the modifier keys in many of the [foo]Shortcut()\n * functions in this file are intentional and should not be changed. They're\n * designed to fit with the standard menu keyboard shortcuts shown in the\n * user's platform.\n *\n * For example, on MacOS menu shortcuts will place Shift before Command, but\n * on Windows Control will usually come first. So don't provide your own\n * shortcut combos directly to keyboardShortcut().\n */\n\n/**\n * External dependencies\n */\nimport { get, mapValues, includes, capitalize, xor } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport { isAppleOS } from './platform';\n\n/**\n * @typedef {'primary'|'primaryShift'|'primaryAlt'|'secondary'|'access'|'ctrl'|'alt'|'ctrlShift'|'shift'|'shiftAlt'} WPKeycodeModifier\n */\n\n/**\n * An object of handler functions for each of the possible modifier\n * combinations. A handler will return a value for a given key.\n *\n * @typedef {Record<WPKeycodeModifier, (key:string)=>any>} WPKeycodeHandlerByModifier\n */\n\n/**\n * Keycode for BACKSPACE key.\n */\nexport const BACKSPACE = 8;\n/**\n * Keycode for TAB key.\n */\nexport const TAB = 9;\n/**\n * Keycode for ENTER key.\n */\nexport const ENTER = 13;\n/**\n * Keycode for ESCAPE key.\n */\nexport const ESCAPE = 27;\n/**\n * Keycode for SPACE key.\n */\nexport const SPACE = 32;\n/**\n * Keycode for LEFT key.\n */\nexport const LEFT = 37;\n/**\n * Keycode for UP key.\n */\nexport const UP = 38;\n/**\n * Keycode for RIGHT key.\n */\nexport const RIGHT = 39;\n/**\n * Keycode for DOWN key.\n */\nexport const DOWN = 40;\n/**\n * Keycode for DELETE key.\n */\nexport const DELETE = 46;\n/**\n * Keycode for F10 key.\n */\nexport const F10 = 121;\n/**\n * Keycode for ALT key.\n */\nexport const ALT = 'alt';\n/**\n * Keycode for CTRL key.\n */\nexport const CTRL = 'ctrl';\n/**\n * Keycode for COMMAND/META key.\n */\nexport const COMMAND = 'meta';\n/**\n * Keycode for SHIFT key.\n */\nexport const SHIFT = 'shift';\n/**\n * Keycode for ZERO key.\n */\nexport const ZERO = 48;\n\n/**\n * Object that contains functions that return the available modifier\n * depending on platform.\n *\n * - `primary`: takes a isApple function as a parameter.\n * - `primaryShift`: takes a isApple function as a parameter.\n * - `primaryAlt`: takes a isApple function as a parameter.\n * - `secondary`: takes a isApple function as a parameter.\n * - `access`: takes a isApple function as a parameter.\n * - `ctrl`\n * - `alt`\n * - `ctrlShift`\n * - `shift`\n * - `shiftAlt`\n */\nexport const modifiers = {\n\tprimary: ( _isApple ) => ( _isApple() ? [ COMMAND ] : [ CTRL ] ),\n\tprimaryShift: ( _isApple ) =>\n\t\t_isApple() ? [ SHIFT, COMMAND ] : [ CTRL, SHIFT ],\n\tprimaryAlt: ( _isApple ) =>\n\t\t_isApple() ? [ ALT, COMMAND ] : [ CTRL, ALT ],\n\tsecondary: ( _isApple ) =>\n\t\t_isApple() ? [ SHIFT, ALT, COMMAND ] : [ CTRL, SHIFT, ALT ],\n\taccess: ( _isApple ) => ( _isApple() ? [ CTRL, ALT ] : [ SHIFT, ALT ] ),\n\tctrl: () => [ CTRL ],\n\talt: () => [ ALT ],\n\tctrlShift: () => [ CTRL, SHIFT ],\n\tshift: () => [ SHIFT ],\n\tshiftAlt: () => [ SHIFT, ALT ],\n};\n\n/**\n * An object that contains functions to get raw shortcuts.\n * E.g. rawShortcut.primary( 'm' ) will return 'meta+m' on Mac.\n * These are intended for user with the KeyboardShortcuts component or TinyMCE.\n *\n * @type {WPKeycodeHandlerByModifier} Keyed map of functions to raw shortcuts.\n */\nexport const rawShortcut = mapValues( modifiers, ( modifier ) => {\n\treturn ( character, _isApple = isAppleOS ) => {\n\t\treturn [ ...modifier( _isApple ), character.toLowerCase() ].join( '+' );\n\t};\n} );\n\n/**\n * Return an array of the parts of a keyboard shortcut chord for display\n * E.g displayShortcutList.primary( 'm' ) will return [ '⌘', 'M' ] on Mac.\n *\n * @type {WPKeycodeHandlerByModifier} Keyed map of functions to shortcut\n *                                    sequences.\n */\nexport const displayShortcutList = mapValues( modifiers, ( modifier ) => {\n\treturn ( character, _isApple = isAppleOS ) => {\n\t\tconst isApple = _isApple();\n\t\tconst replacementKeyMap = {\n\t\t\t[ ALT ]: isApple ? '⌥' : 'Alt',\n\t\t\t[ CTRL ]: isApple ? '^' : 'Ctrl',\n\t\t\t[ COMMAND ]: '⌘',\n\t\t\t[ SHIFT ]: isApple ? '⇧' : 'Shift',\n\t\t};\n\n\t\tconst modifierKeys = modifier( _isApple ).reduce(\n\t\t\t( accumulator, key ) => {\n\t\t\t\tconst replacementKey = get( replacementKeyMap, key, key );\n\t\t\t\t// If on the Mac, adhere to platform convention and don't show plus between keys.\n\t\t\t\tif ( isApple ) {\n\t\t\t\t\treturn [ ...accumulator, replacementKey ];\n\t\t\t\t}\n\n\t\t\t\treturn [ ...accumulator, replacementKey, '+' ];\n\t\t\t},\n\t\t\t[]\n\t\t);\n\n\t\tconst capitalizedCharacter = capitalize( character );\n\t\treturn [ ...modifierKeys, capitalizedCharacter ];\n\t};\n} );\n\n/**\n * An object that contains functions to display shortcuts.\n * E.g. displayShortcut.primary( 'm' ) will return '⌘M' on Mac.\n *\n * @type {WPKeycodeHandlerByModifier} Keyed map of functions to display\n *                                    shortcuts.\n */\nexport const displayShortcut = mapValues(\n\tdisplayShortcutList,\n\t( shortcutList ) => {\n\t\treturn ( character, _isApple = isAppleOS ) =>\n\t\t\tshortcutList( character, _isApple ).join( '' );\n\t}\n);\n\n/**\n * An object that contains functions to return an aria label for a keyboard shortcut.\n * E.g. shortcutAriaLabel.primary( '.' ) will return 'Command + Period' on Mac.\n *\n * @type {WPKeycodeHandlerByModifier} Keyed map of functions to shortcut ARIA\n *                                    labels.\n */\nexport const shortcutAriaLabel = mapValues( modifiers, ( modifier ) => {\n\treturn ( character, _isApple = isAppleOS ) => {\n\t\tconst isApple = _isApple();\n\t\tconst replacementKeyMap = {\n\t\t\t[ SHIFT ]: 'Shift',\n\t\t\t[ COMMAND ]: isApple ? 'Command' : 'Control',\n\t\t\t[ CTRL ]: 'Control',\n\t\t\t[ ALT ]: isApple ? 'Option' : 'Alt',\n\t\t\t/* translators: comma as in the character ',' */\n\t\t\t',': __( 'Comma' ),\n\t\t\t/* translators: period as in the character '.' */\n\t\t\t'.': __( 'Period' ),\n\t\t\t/* translators: backtick as in the character '`' */\n\t\t\t'`': __( 'Backtick' ),\n\t\t};\n\n\t\treturn [ ...modifier( _isApple ), character ]\n\t\t\t.map( ( key ) => capitalize( get( replacementKeyMap, key, key ) ) )\n\t\t\t.join( isApple ? ' ' : ' + ' );\n\t};\n} );\n\n/**\n * From a given KeyboardEvent, returns an array of active modifier constants for\n * the event.\n *\n * @param {KeyboardEvent} event Keyboard event.\n *\n * @return {Array<ALT|CTRL|COMMAND|SHIFT>} Active modifier constants.\n */\nfunction getEventModifiers( event ) {\n\treturn [ ALT, CTRL, COMMAND, SHIFT ].filter(\n\t\t( key ) => event[ `${ key }Key` ]\n\t);\n}\n\n/**\n * An object that contains functions to check if a keyboard event matches a\n * predefined shortcut combination.\n * E.g. isKeyboardEvent.primary( event, 'm' ) will return true if the event\n * signals pressing ⌘M.\n *\n * @type {WPKeycodeHandlerByModifier} Keyed map of functions to match events.\n */\nexport const isKeyboardEvent = mapValues( modifiers, ( getModifiers ) => {\n\treturn ( event, character, _isApple = isAppleOS ) => {\n\t\tconst mods = getModifiers( _isApple );\n\t\tconst eventMods = getEventModifiers( event );\n\n\t\tif ( xor( mods, eventMods ).length ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( ! character ) {\n\t\t\treturn includes( mods, event.key.toLowerCase() );\n\t\t}\n\n\t\treturn event.key === character;\n\t};\n} );\n"]}