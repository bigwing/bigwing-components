{"version":3,"sources":["@wordpress/rich-text/src/register-format-type.js"],"names":["select","dispatch","registerFormatType","name","settings","window","console","error","test","getFormatType","tagName","className","formatTypeForBareElement","getFormatTypeForBareElement","formatTypeForClassName","getFormatTypeForClassName","title","keywords","length","addFormatTypes"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { select, dispatch } from '@wordpress/data';\n\n/**\n * @typedef {Object} WPFormat\n *\n * @property {string}   name        A string identifying the format. Must be\n *                                  unique across all registered formats.\n * @property {string}   tagName     The HTML tag this format will wrap the\n *                                  selection with.\n * @property {string}   [className] A class to match the format.\n * @property {string}   title       Name of the format.\n * @property {Function} edit        Should return a component for the user to\n *                                  interact with the new registered format.\n */\n\n/**\n * Registers a new format provided a unique name and an object defining its\n * behavior.\n *\n * @param {string}   name                 Format name.\n * @param {WPFormat} settings             Format settings.\n *\n * @return {WPFormat|undefined} The format, if it has been successfully registered;\n *                              otherwise `undefined`.\n */\nexport function registerFormatType( name, settings ) {\n\tsettings = {\n\t\tname,\n\t\t...settings,\n\t};\n\n\tif ( typeof settings.name !== 'string' ) {\n\t\twindow.console.error( 'Format names must be strings.' );\n\t\treturn;\n\t}\n\n\tif ( ! /^[a-z][a-z0-9-]*\\/[a-z][a-z0-9-]*$/.test( settings.name ) ) {\n\t\twindow.console.error(\n\t\t\t'Format names must contain a namespace prefix, include only lowercase alphanumeric characters or dashes, and start with a letter. Example: my-plugin/my-custom-format'\n\t\t);\n\t\treturn;\n\t}\n\n\tif ( select( 'core/rich-text' ).getFormatType( settings.name ) ) {\n\t\twindow.console.error(\n\t\t\t'Format \"' + settings.name + '\" is already registered.'\n\t\t);\n\t\treturn;\n\t}\n\n\tif ( typeof settings.tagName !== 'string' || settings.tagName === '' ) {\n\t\twindow.console.error( 'Format tag names must be a string.' );\n\t\treturn;\n\t}\n\n\tif (\n\t\t( typeof settings.className !== 'string' ||\n\t\t\tsettings.className === '' ) &&\n\t\tsettings.className !== null\n\t) {\n\t\twindow.console.error(\n\t\t\t'Format class names must be a string, or null to handle bare elements.'\n\t\t);\n\t\treturn;\n\t}\n\n\tif ( ! /^[_a-zA-Z]+[a-zA-Z0-9-]*$/.test( settings.className ) ) {\n\t\twindow.console.error(\n\t\t\t'A class name must begin with a letter, followed by any number of hyphens, letters, or numbers.'\n\t\t);\n\t\treturn;\n\t}\n\n\tif ( settings.className === null ) {\n\t\tconst formatTypeForBareElement = select(\n\t\t\t'core/rich-text'\n\t\t).getFormatTypeForBareElement( settings.tagName );\n\n\t\tif ( formatTypeForBareElement ) {\n\t\t\twindow.console.error(\n\t\t\t\t`Format \"${ formatTypeForBareElement.name }\" is already registered to handle bare tag name \"${ settings.tagName }\".`\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t} else {\n\t\tconst formatTypeForClassName = select(\n\t\t\t'core/rich-text'\n\t\t).getFormatTypeForClassName( settings.className );\n\n\t\tif ( formatTypeForClassName ) {\n\t\t\twindow.console.error(\n\t\t\t\t`Format \"${ formatTypeForClassName.name }\" is already registered to handle class name \"${ settings.className }\".`\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif ( ! ( 'title' in settings ) || settings.title === '' ) {\n\t\twindow.console.error(\n\t\t\t'The format \"' + settings.name + '\" must have a title.'\n\t\t);\n\t\treturn;\n\t}\n\n\tif ( 'keywords' in settings && settings.keywords.length > 3 ) {\n\t\twindow.console.error(\n\t\t\t'The format \"' +\n\t\t\t\tsettings.name +\n\t\t\t\t'\" can have a maximum of 3 keywords.'\n\t\t);\n\t\treturn;\n\t}\n\n\tif ( typeof settings.title !== 'string' ) {\n\t\twindow.console.error( 'Format titles must be strings.' );\n\t\treturn;\n\t}\n\n\tdispatch( 'core/rich-text' ).addFormatTypes( settings );\n\n\treturn settings;\n}\n"]}