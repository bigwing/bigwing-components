{"version":3,"sources":["@wordpress/rich-text/src/create.js"],"names":["select","isFormatEqual","createElement","mergePair","LINE_SEPARATOR","OBJECT_REPLACEMENT_CHARACTER","ZWNBSP","createEmptyValue","formats","replacements","text","simpleFindKey","object","value","key","toFormat","type","attributes","formatType","class","getFormatTypeForClassName","replace","className","trim","getFormatTypeForBareElement","__experimentalCreatePrepareEditableTree","__experimentalCreateOnChangeEditableValue","name","registeredAttributes","unregisteredAttributes","create","element","html","range","multilineTag","multilineWrapperTags","isEditableTree","__unstableIsEditableTree","preserveWhiteSpace","length","Array","document","createFromElement","createFromMultilineElement","accumulateSelection","accumulator","node","parentNode","startContainer","startOffset","endContainer","endOffset","currentLength","start","undefined","nodeType","TEXT_NODE","childNodes","end","filterRange","filter","nodeValue","slice","collapseWhiteSpace","string","ZWNBSPRegExp","RegExp","removePadding","currentWrapperTags","hasChildNodes","index","nodeName","toLowerCase","ELEMENT_NODE","getAttribute","lastFormats","lastFormat","newFormat","getAttributes","format","indexOf","mergeFormats","newFormats","from","children","hasAttributes","i"],"mappings":";;;;;;;;AAAA;;;AAGA,SAASA,MAAT,QAAuB,iBAAvB;AAEA;;;;AAIA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,SAAT,QAA0B,UAA1B;AACA,SACCC,cADD,EAECC,4BAFD,EAGCC,MAHD,QAIO,sBAJP;;AAMA,SAASC,gBAAT,GAA4B;AAC3B,SAAO;AACNC,IAAAA,OAAO,EAAE,EADH;AAENC,IAAAA,YAAY,EAAE,EAFR;AAGNC,IAAAA,IAAI,EAAE;AAHA,GAAP;AAKA;;AAED,SAASC,aAAT,CAAwBC,MAAxB,EAAgCC,KAAhC,EAAwC;AACvC,OAAM,IAAMC,GAAZ,IAAmBF,MAAnB,EAA4B;AAC3B,QAAKA,MAAM,CAAEE,GAAF,CAAN,KAAkBD,KAAvB,EAA+B;AAC9B,aAAOC,GAAP;AACA;AACD;AACD;;AAED,SAASC,QAAT,OAA0C;AAAA,MAArBC,IAAqB,QAArBA,IAAqB;AAAA,MAAfC,UAAe,QAAfA,UAAe;AACzC,MAAIC,UAAJ;;AAEA,MAAKD,UAAU,IAAIA,UAAU,CAACE,KAA9B,EAAsC;AACrCD,IAAAA,UAAU,GAAGlB,MAAM,CAAE,gBAAF,CAAN,CAA2BoB,yBAA3B,CACZH,UAAU,CAACE,KADC,CAAb;;AAIA,QAAKD,UAAL,EAAkB;AACjB;AACAD,MAAAA,UAAU,CAACE,KAAX,GAAmB,WAAKF,UAAU,CAACE,KAAhB,OACjBE,OADiB,YACHH,UAAU,CAACI,SADR,QACuB,GADvB,EAEjBC,IAFiB,EAAnB;;AAIA,UAAK,CAAEN,UAAU,CAACE,KAAlB,EAA0B;AACzB,eAAOF,UAAU,CAACE,KAAlB;AACA;AACD;AACD;;AAED,MAAK,CAAED,UAAP,EAAoB;AACnBA,IAAAA,UAAU,GAAGlB,MAAM,CAAE,gBAAF,CAAN,CAA2BwB,2BAA3B,CACZR,IADY,CAAb;AAGA;;AAED,MAAK,CAAEE,UAAP,EAAoB;AACnB,WAAOD,UAAU,GAAG;AAAED,MAAAA,IAAI,EAAJA,IAAF;AAAQC,MAAAA,UAAU,EAAVA;AAAR,KAAH,GAA0B;AAAED,MAAAA,IAAI,EAAJA;AAAF,KAA3C;AACA;;AAED,MACCE,UAAU,CAACO,uCAAX,IACA,CAAEP,UAAU,CAACQ,yCAFd,EAGE;AACD,WAAO,IAAP;AACA;;AAED,MAAK,CAAET,UAAP,EAAoB;AACnB,WAAO;AAAED,MAAAA,IAAI,EAAEE,UAAU,CAACS;AAAnB,KAAP;AACA;;AAED,MAAMC,oBAAoB,GAAG,EAA7B;AACA,MAAMC,sBAAsB,GAAG,EAA/B;;AAEA,OAAM,IAAMF,IAAZ,IAAoBV,UAApB,EAAiC;AAChC,QAAMH,GAAG,GAAGH,aAAa,CAAEO,UAAU,CAACD,UAAb,EAAyBU,IAAzB,CAAzB;;AAEA,QAAKb,GAAL,EAAW;AACVc,MAAAA,oBAAoB,CAAEd,GAAF,CAApB,GAA8BG,UAAU,CAAEU,IAAF,CAAxC;AACA,KAFD,MAEO;AACNE,MAAAA,sBAAsB,CAAEF,IAAF,CAAtB,GAAiCV,UAAU,CAAEU,IAAF,CAA3C;AACA;AACD;;AAED,SAAO;AACNX,IAAAA,IAAI,EAAEE,UAAU,CAACS,IADX;AAENV,IAAAA,UAAU,EAAEW,oBAFN;AAGNC,IAAAA,sBAAsB,EAAtBA;AAHM,GAAP;AAKA;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA,OAAO,SAASC,MAAT,GASE;AAAA,kFAAL,EAAK;AAAA,MARRC,OAQQ,SARRA,OAQQ;AAAA,MAPRrB,IAOQ,SAPRA,IAOQ;AAAA,MANRsB,IAMQ,SANRA,IAMQ;AAAA,MALRC,KAKQ,SALRA,KAKQ;AAAA,MAJRC,YAIQ,SAJRA,YAIQ;AAAA,MAHRC,oBAGQ,SAHRA,oBAGQ;AAAA,MAFkBC,cAElB,SAFRC,wBAEQ;AAAA,MADRC,kBACQ,SADRA,kBACQ;;AACR,MAAK,OAAO5B,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,CAAC6B,MAAL,GAAc,CAA/C,EAAmD;AAClD,WAAO;AACN/B,MAAAA,OAAO,EAAEgC,KAAK,CAAE9B,IAAI,CAAC6B,MAAP,CADR;AAEN9B,MAAAA,YAAY,EAAE+B,KAAK,CAAE9B,IAAI,CAAC6B,MAAP,CAFb;AAGN7B,MAAAA,IAAI,EAAJA;AAHM,KAAP;AAKA;;AAED,MAAK,OAAOsB,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,CAACO,MAAL,GAAc,CAA/C,EAAmD;AAClD;AACA;AACAR,IAAAA,OAAO,GAAG7B,aAAa,CAAEuC,QAAF,EAAYT,IAAZ,CAAvB;AACA;;AAED,MAAK,QAAOD,OAAP,MAAmB,QAAxB,EAAmC;AAClC,WAAOxB,gBAAgB,EAAvB;AACA;;AAED,MAAK,CAAE2B,YAAP,EAAsB;AACrB,WAAOQ,iBAAiB,CAAE;AACzBX,MAAAA,OAAO,EAAPA,OADyB;AAEzBE,MAAAA,KAAK,EAALA,KAFyB;AAGzBG,MAAAA,cAAc,EAAdA,cAHyB;AAIzBE,MAAAA,kBAAkB,EAAlBA;AAJyB,KAAF,CAAxB;AAMA;;AAED,SAAOK,0BAA0B,CAAE;AAClCZ,IAAAA,OAAO,EAAPA,OADkC;AAElCE,IAAAA,KAAK,EAALA,KAFkC;AAGlCC,IAAAA,YAAY,EAAZA,YAHkC;AAIlCC,IAAAA,oBAAoB,EAApBA,oBAJkC;AAKlCC,IAAAA,cAAc,EAAdA,cALkC;AAMlCE,IAAAA,kBAAkB,EAAlBA;AANkC,GAAF,CAAjC;AAQA;AAED;;;;;;;;;;AASA,SAASM,mBAAT,CAA8BC,WAA9B,EAA2CC,IAA3C,EAAiDb,KAAjD,EAAwDpB,KAAxD,EAAgE;AAC/D,MAAK,CAAEoB,KAAP,EAAe;AACd;AACA;;AAH8D,MAKvDc,UALuD,GAKxCD,IALwC,CAKvDC,UALuD;AAAA,MAMvDC,cANuD,GAMEf,KANF,CAMvDe,cANuD;AAAA,MAMvCC,WANuC,GAMEhB,KANF,CAMvCgB,WANuC;AAAA,MAM1BC,YAN0B,GAMEjB,KANF,CAM1BiB,YAN0B;AAAA,MAMZC,SANY,GAMElB,KANF,CAMZkB,SANY;AAO/D,MAAMC,aAAa,GAAGP,WAAW,CAACnC,IAAZ,CAAiB6B,MAAvC,CAP+D,CAS/D;;AACA,MAAK1B,KAAK,CAACwC,KAAN,KAAgBC,SAArB,EAAiC;AAChCT,IAAAA,WAAW,CAACQ,KAAZ,GAAoBD,aAAa,GAAGvC,KAAK,CAACwC,KAA1C,CADgC,CAEhC;AACA,GAHD,MAGO,IAAKP,IAAI,KAAKE,cAAT,IAA2BF,IAAI,CAACS,QAAL,KAAkBT,IAAI,CAACU,SAAvD,EAAmE;AACzEX,IAAAA,WAAW,CAACQ,KAAZ,GAAoBD,aAAa,GAAGH,WAApC,CADyE,CAEzE;AACA,GAHM,MAGA,IACNF,UAAU,KAAKC,cAAf,IACAF,IAAI,KAAKE,cAAc,CAACS,UAAf,CAA2BR,WAA3B,CAFH,EAGL;AACDJ,IAAAA,WAAW,CAACQ,KAAZ,GAAoBD,aAApB,CADC,CAED;AACA,GANM,MAMA,IACNL,UAAU,KAAKC,cAAf,IACAF,IAAI,KAAKE,cAAc,CAACS,UAAf,CAA2BR,WAAW,GAAG,CAAzC,CAFH,EAGL;AACDJ,IAAAA,WAAW,CAACQ,KAAZ,GAAoBD,aAAa,GAAGvC,KAAK,CAACH,IAAN,CAAW6B,MAA/C,CADC,CAED;AACA,GANM,MAMA,IAAKO,IAAI,KAAKE,cAAd,EAA+B;AACrCH,IAAAA,WAAW,CAACQ,KAAZ,GAAoBD,aAApB;AACA,GA9B8D,CAgC/D;;;AACA,MAAKvC,KAAK,CAAC6C,GAAN,KAAcJ,SAAnB,EAA+B;AAC9BT,IAAAA,WAAW,CAACa,GAAZ,GAAkBN,aAAa,GAAGvC,KAAK,CAAC6C,GAAxC,CAD8B,CAE9B;AACA,GAHD,MAGO,IAAKZ,IAAI,KAAKI,YAAT,IAAyBJ,IAAI,CAACS,QAAL,KAAkBT,IAAI,CAACU,SAArD,EAAiE;AACvEX,IAAAA,WAAW,CAACa,GAAZ,GAAkBN,aAAa,GAAGD,SAAlC,CADuE,CAEvE;AACA,GAHM,MAGA,IACNJ,UAAU,KAAKG,YAAf,IACAJ,IAAI,KAAKI,YAAY,CAACO,UAAb,CAAyBN,SAAS,GAAG,CAArC,CAFH,EAGL;AACDN,IAAAA,WAAW,CAACa,GAAZ,GAAkBN,aAAa,GAAGvC,KAAK,CAACH,IAAN,CAAW6B,MAA7C,CADC,CAED;AACA,GANM,MAMA,IACNQ,UAAU,KAAKG,YAAf,IACAJ,IAAI,KAAKI,YAAY,CAACO,UAAb,CAAyBN,SAAzB,CAFH,EAGL;AACDN,IAAAA,WAAW,CAACa,GAAZ,GAAkBN,aAAlB,CADC,CAED;AACA,GANM,MAMA,IAAKN,IAAI,KAAKI,YAAd,EAA6B;AACnCL,IAAAA,WAAW,CAACa,GAAZ,GAAkBN,aAAa,GAAGD,SAAlC;AACA;AACD;AAED;;;;;;;;;;;AASA,SAASQ,WAAT,CAAsBb,IAAtB,EAA4Bb,KAA5B,EAAmC2B,MAAnC,EAA4C;AAC3C,MAAK,CAAE3B,KAAP,EAAe;AACd;AACA;;AAH0C,MAKnCe,cALmC,GAKFf,KALE,CAKnCe,cALmC;AAAA,MAKnBE,YALmB,GAKFjB,KALE,CAKnBiB,YALmB;AAAA,MAMrCD,WANqC,GAMVhB,KANU,CAMrCgB,WANqC;AAAA,MAMxBE,SANwB,GAMVlB,KANU,CAMxBkB,SANwB;;AAQ3C,MAAKL,IAAI,KAAKE,cAAd,EAA+B;AAC9BC,IAAAA,WAAW,GAAGW,MAAM,CAAEd,IAAI,CAACe,SAAL,CAAeC,KAAf,CAAsB,CAAtB,EAAyBb,WAAzB,CAAF,CAAN,CAAiDV,MAA/D;AACA;;AAED,MAAKO,IAAI,KAAKI,YAAd,EAA6B;AAC5BC,IAAAA,SAAS,GAAGS,MAAM,CAAEd,IAAI,CAACe,SAAL,CAAeC,KAAf,CAAsB,CAAtB,EAAyBX,SAAzB,CAAF,CAAN,CAA+CZ,MAA3D;AACA;;AAED,SAAO;AAAES,IAAAA,cAAc,EAAdA,cAAF;AAAkBC,IAAAA,WAAW,EAAXA,WAAlB;AAA+BC,IAAAA,YAAY,EAAZA,YAA/B;AAA6CC,IAAAA,SAAS,EAATA;AAA7C,GAAP;AACA;AAED;;;;;;;;AAMA,SAASY,kBAAT,CAA6BC,MAA7B,EAAsC;AACrC,SAAOA,MAAM,CAAC3C,OAAP,CAAgB,YAAhB,EAA8B,GAA9B,CAAP;AACA;;AAED,IAAM4C,YAAY,GAAG,IAAIC,MAAJ,CAAY5D,MAAZ,EAAoB,GAApB,CAArB;AAEA;;;;;;AAKA,SAAS6D,aAAT,CAAwBH,MAAxB,EAAiC;AAChC,SAAOA,MAAM,CAAC3C,OAAP,CAAgB4C,YAAhB,EAA8B,EAA9B,CAAP;AACA;AAED;;;;;;;;;;;;;;;;;AAeA,SAASvB,iBAAT,QAQI;AAAA,MAPHX,OAOG,SAPHA,OAOG;AAAA,MANHE,KAMG,SANHA,KAMG;AAAA,MALHC,YAKG,SALHA,YAKG;AAAA,MAJHC,oBAIG,SAJHA,oBAIG;AAAA,oCAHHiC,kBAGG;AAAA,MAHHA,kBAGG,sCAHkB,EAGlB;AAAA,MAFHhC,cAEG,SAFHA,cAEG;AAAA,MADHE,kBACG,SADHA,kBACG;AACH,MAAMO,WAAW,GAAGtC,gBAAgB,EAApC;;AAEA,MAAK,CAAEwB,OAAP,EAAiB;AAChB,WAAOc,WAAP;AACA;;AAED,MAAK,CAAEd,OAAO,CAACsC,aAAR,EAAP,EAAiC;AAChCzB,IAAAA,mBAAmB,CAAEC,WAAF,EAAed,OAAf,EAAwBE,KAAxB,EAA+B1B,gBAAgB,EAA/C,CAAnB;AACA,WAAOsC,WAAP;AACA;;AAED,MAAMN,MAAM,GAAGR,OAAO,CAAC0B,UAAR,CAAmBlB,MAAlC,CAZG,CAcH;;AAdG,6BAeO+B,KAfP;AAgBF,QAAMxB,IAAI,GAAGf,OAAO,CAAC0B,UAAR,CAAoBa,KAApB,CAAb;AACA,QAAMtD,IAAI,GAAG8B,IAAI,CAACyB,QAAL,CAAcC,WAAd,EAAb;;AAEA,QAAK1B,IAAI,CAACS,QAAL,KAAkBT,IAAI,CAACU,SAA5B,EAAwC;AACvC,UAAII,MAAM,GAAGO,aAAb;;AAEA,UAAK,CAAE7B,kBAAP,EAA4B;AAC3BsB,QAAAA,MAAM,GAAG,gBAAEI,MAAF;AAAA,iBACRG,aAAa,CAAEJ,kBAAkB,CAAEC,MAAF,CAApB,CADL;AAAA,SAAT;AAEA;;AAED,UAAMtD,IAAI,GAAGkD,MAAM,CAAEd,IAAI,CAACe,SAAP,CAAnB;AACA5B,MAAAA,KAAK,GAAG0B,WAAW,CAAEb,IAAF,EAAQb,KAAR,EAAe2B,MAAf,CAAnB;AACAhB,MAAAA,mBAAmB,CAAEC,WAAF,EAAeC,IAAf,EAAqBb,KAArB,EAA4B;AAAEvB,QAAAA,IAAI,EAAJA;AAAF,OAA5B,CAAnB,CAVuC,CAWvC;AACA;;AACAmC,MAAAA,WAAW,CAACrC,OAAZ,CAAoB+B,MAApB,IAA8B7B,IAAI,CAAC6B,MAAnC;AACAM,MAAAA,WAAW,CAACpC,YAAZ,CAAyB8B,MAAzB,IAAmC7B,IAAI,CAAC6B,MAAxC;AACAM,MAAAA,WAAW,CAACnC,IAAZ,IAAoBA,IAApB;AACA;AACA;;AAED,QAAKoC,IAAI,CAACS,QAAL,KAAkBT,IAAI,CAAC2B,YAA5B,EAA2C;AAC1C;AACA;;AAED,QACCrC,cAAc,MACd;AACEU,IAAAA,IAAI,CAAC4B,YAAL,CAAmB,4BAAnB,KACD;AACE1D,IAAAA,IAAI,KAAK,IAAT,IACD,CAAE8B,IAAI,CAAC4B,YAAL,CAAmB,2BAAnB,CALU,CADf,EAOE;AACD9B,MAAAA,mBAAmB,CAAEC,WAAF,EAAeC,IAAf,EAAqBb,KAArB,EAA4B1B,gBAAgB,EAA5C,CAAnB;AACA;AACA;;AAED,QAAKS,IAAI,KAAK,IAAd,EAAqB;AACpB4B,MAAAA,mBAAmB,CAAEC,WAAF,EAAeC,IAAf,EAAqBb,KAArB,EAA4B1B,gBAAgB,EAA5C,CAAnB;AACAJ,MAAAA,SAAS,CAAE0C,WAAF,EAAef,MAAM,CAAE;AAAEpB,QAAAA,IAAI,EAAE;AAAR,OAAF,CAArB,CAAT;AACA;AACA;;AAED,QAAMiE,WAAW,GAChB9B,WAAW,CAACrC,OAAZ,CAAqBqC,WAAW,CAACrC,OAAZ,CAAoB+B,MAApB,GAA6B,CAAlD,CADD;AAEA,QAAMqC,UAAU,GAAGD,WAAW,IAAIA,WAAW,CAAEA,WAAW,CAACpC,MAAZ,GAAqB,CAAvB,CAA7C;AACA,QAAMsC,SAAS,GAAG9D,QAAQ,CAAE;AAC3BC,MAAAA,IAAI,EAAJA,IAD2B;AAE3BC,MAAAA,UAAU,EAAE6D,aAAa,CAAE;AAAE/C,QAAAA,OAAO,EAAEe;AAAX,OAAF;AAFE,KAAF,CAA1B;AAIA,QAAMiC,MAAM,GAAG9E,aAAa,CAAE4E,SAAF,EAAaD,UAAb,CAAb,GACZA,UADY,GAEZC,SAFH;;AAIA,QACC1C,oBAAoB,IACpBA,oBAAoB,CAAC6C,OAArB,CAA8BhE,IAA9B,MAAyC,CAAC,CAF3C,EAGE;AACD,UAAMH,MAAK,GAAG8B,0BAA0B,CAAE;AACzCZ,QAAAA,OAAO,EAAEe,IADgC;AAEzCb,QAAAA,KAAK,EAALA,KAFyC;AAGzCC,QAAAA,YAAY,EAAZA,YAHyC;AAIzCC,QAAAA,oBAAoB,EAApBA,oBAJyC;AAKzCiC,QAAAA,kBAAkB,+BAAOA,kBAAP,IAA2BW,MAA3B,EALuB;AAMzC3C,QAAAA,cAAc,EAAdA,cANyC;AAOzCE,QAAAA,kBAAkB,EAAlBA;AAPyC,OAAF,CAAxC;;AAUAM,MAAAA,mBAAmB,CAAEC,WAAF,EAAeC,IAAf,EAAqBb,KAArB,EAA4BpB,MAA5B,CAAnB;AACAV,MAAAA,SAAS,CAAE0C,WAAF,EAAehC,MAAf,CAAT;AACA;AACA;;AAED,QAAMA,KAAK,GAAG6B,iBAAiB,CAAE;AAChCX,MAAAA,OAAO,EAAEe,IADuB;AAEhCb,MAAAA,KAAK,EAALA,KAFgC;AAGhCC,MAAAA,YAAY,EAAZA,YAHgC;AAIhCC,MAAAA,oBAAoB,EAApBA,oBAJgC;AAKhCC,MAAAA,cAAc,EAAdA,cALgC;AAMhCE,MAAAA,kBAAkB,EAAlBA;AANgC,KAAF,CAA/B;AASAM,IAAAA,mBAAmB,CAAEC,WAAF,EAAeC,IAAf,EAAqBb,KAArB,EAA4BpB,KAA5B,CAAnB;;AAEA,QAAK,CAAEkE,MAAP,EAAgB;AACf5E,MAAAA,SAAS,CAAE0C,WAAF,EAAehC,KAAf,CAAT;AACA,KAFD,MAEO,IAAKA,KAAK,CAACH,IAAN,CAAW6B,MAAX,KAAsB,CAA3B,EAA+B;AACrC,UAAKwC,MAAM,CAAC9D,UAAZ,EAAyB;AACxBd,QAAAA,SAAS,CAAE0C,WAAF,EAAe;AACvBrC,UAAAA,OAAO,EAAE,GADc;AAEvBC,UAAAA,YAAY,EAAE,CAAEsE,MAAF,CAFS;AAGvBrE,UAAAA,IAAI,EAAEL;AAHiB,SAAf,CAAT;AAKA;AACD,KARM,MAQA;AACN;AACA;AACA,eAAS4E,YAAT,CAAuBzE,OAAvB,EAAiC;AAChC,YAAKyE,YAAY,CAACzE,OAAb,KAAyBA,OAA9B,EAAwC;AACvC,iBAAOyE,YAAY,CAACC,UAApB;AACA;;AAED,YAAMA,UAAU,GAAG1E,OAAO,IACrBuE,MADqB,4BACVvE,OADU,KAEvB,CAAEuE,MAAF,CAFH;AAIAE,QAAAA,YAAY,CAACzE,OAAb,GAAuBA,OAAvB;AACAyE,QAAAA,YAAY,CAACC,UAAb,GAA0BA,UAA1B;AAEA,eAAOA,UAAP;AACA,OAhBK,CAkBN;AACA;;;AACAD,MAAAA,YAAY,CAACC,UAAb,GAA0B,CAAEH,MAAF,CAA1B;AAEA5E,MAAAA,SAAS,CAAE0C,WAAF,oBACLhC,KADK;AAERL,QAAAA,OAAO,EAAEgC,KAAK,CAAC2C,IAAN,CAAYtE,KAAK,CAACL,OAAlB,EAA2ByE,YAA3B;AAFD,SAAT;AAIA;AAzIC;;AAeH,OAAM,IAAIX,KAAK,GAAG,CAAlB,EAAqBA,KAAK,GAAG/B,MAA7B,EAAqC+B,KAAK,EAA1C,EAA+C;AAAA,qBAArCA,KAAqC;;AAAA,6BAwE7C;AAmDD;;AAED,SAAOzB,WAAP;AACA;AAED;;;;;;;;;;;;;;;;;;;;AAkBA,SAASF,0BAAT,QAQI;AAAA,MAPHZ,OAOG,SAPHA,OAOG;AAAA,MANHE,KAMG,SANHA,KAMG;AAAA,MALHC,YAKG,SALHA,YAKG;AAAA,MAJHC,oBAIG,SAJHA,oBAIG;AAAA,oCAHHiC,kBAGG;AAAA,MAHHA,kBAGG,sCAHkB,EAGlB;AAAA,MAFHhC,cAEG,SAFHA,cAEG;AAAA,MADHE,kBACG,SADHA,kBACG;AACH,MAAMO,WAAW,GAAGtC,gBAAgB,EAApC;;AAEA,MAAK,CAAEwB,OAAF,IAAa,CAAEA,OAAO,CAACsC,aAAR,EAApB,EAA8C;AAC7C,WAAOxB,WAAP;AACA;;AAED,MAAMN,MAAM,GAAGR,OAAO,CAACqD,QAAR,CAAiB7C,MAAhC,CAPG,CASH;;AACA,OAAM,IAAI+B,KAAK,GAAG,CAAlB,EAAqBA,KAAK,GAAG/B,MAA7B,EAAqC+B,KAAK,EAA1C,EAA+C;AAC9C,QAAMxB,IAAI,GAAGf,OAAO,CAACqD,QAAR,CAAkBd,KAAlB,CAAb;;AAEA,QAAKxB,IAAI,CAACyB,QAAL,CAAcC,WAAd,OAAgCtC,YAArC,EAAoD;AACnD;AACA;;AAED,QAAMrB,KAAK,GAAG6B,iBAAiB,CAAE;AAChCX,MAAAA,OAAO,EAAEe,IADuB;AAEhCb,MAAAA,KAAK,EAALA,KAFgC;AAGhCC,MAAAA,YAAY,EAAZA,YAHgC;AAIhCC,MAAAA,oBAAoB,EAApBA,oBAJgC;AAKhCiC,MAAAA,kBAAkB,EAAlBA,kBALgC;AAMhChC,MAAAA,cAAc,EAAdA,cANgC;AAOhCE,MAAAA,kBAAkB,EAAlBA;AAPgC,KAAF,CAA/B,CAP8C,CAiB9C;;AACA,QAAKgC,KAAK,KAAK,CAAV,IAAeF,kBAAkB,CAAC7B,MAAnB,GAA4B,CAAhD,EAAoD;AACnDpC,MAAAA,SAAS,CAAE0C,WAAF,EAAe;AACvBrC,QAAAA,OAAO,EAAE,GADc;AAEvBC,QAAAA,YAAY,EACX2D,kBAAkB,CAAC7B,MAAnB,GAA4B,CAA5B,GACG,CAAE6B,kBAAF,CADH,GAEG,GALmB;AAMvB1D,QAAAA,IAAI,EAAEN;AANiB,OAAf,CAAT;AAQA;;AAEDwC,IAAAA,mBAAmB,CAAEC,WAAF,EAAeC,IAAf,EAAqBb,KAArB,EAA4BpB,KAA5B,CAAnB;AACAV,IAAAA,SAAS,CAAE0C,WAAF,EAAehC,KAAf,CAAT;AACA;;AAED,SAAOgC,WAAP;AACA;AAED;;;;;;;;;;;AASA,SAASiC,aAAT,QAAsC;AAAA,MAAZ/C,OAAY,SAAZA,OAAY;;AACrC,MAAK,CAAEA,OAAO,CAACsD,aAAR,EAAP,EAAiC;AAChC;AACA;;AAED,MAAM9C,MAAM,GAAGR,OAAO,CAACd,UAAR,CAAmBsB,MAAlC;AACA,MAAIM,WAAJ,CANqC,CAQrC;;AACA,OAAM,IAAIyC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAG/C,MAArB,EAA6B+C,CAAC,EAA9B,EAAmC;AAAA,gCACVvD,OAAO,CAACd,UAAR,CAAoBqE,CAApB,CADU;AAAA,QAC1B3D,IAD0B,yBAC1BA,IAD0B;AAAA,QACpBd,KADoB,yBACpBA,KADoB;;AAGlC,QAAKc,IAAI,CAACqD,OAAL,CAAc,iBAAd,MAAsC,CAA3C,EAA+C;AAC9C;AACA;;AAEDnC,IAAAA,WAAW,GAAGA,WAAW,IAAI,EAA7B;AACAA,IAAAA,WAAW,CAAElB,IAAF,CAAX,GAAsBd,KAAtB;AACA;;AAED,SAAOgC,WAAP;AACA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { select } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\n\nimport { isFormatEqual } from './is-format-equal';\nimport { createElement } from './create-element';\nimport { mergePair } from './concat';\nimport {\n\tLINE_SEPARATOR,\n\tOBJECT_REPLACEMENT_CHARACTER,\n\tZWNBSP,\n} from './special-characters';\n\nfunction createEmptyValue() {\n\treturn {\n\t\tformats: [],\n\t\treplacements: [],\n\t\ttext: '',\n\t};\n}\n\nfunction simpleFindKey( object, value ) {\n\tfor ( const key in object ) {\n\t\tif ( object[ key ] === value ) {\n\t\t\treturn key;\n\t\t}\n\t}\n}\n\nfunction toFormat( { type, attributes } ) {\n\tlet formatType;\n\n\tif ( attributes && attributes.class ) {\n\t\tformatType = select( 'core/rich-text' ).getFormatTypeForClassName(\n\t\t\tattributes.class\n\t\t);\n\n\t\tif ( formatType ) {\n\t\t\t// Preserve any additional classes.\n\t\t\tattributes.class = ` ${ attributes.class } `\n\t\t\t\t.replace( ` ${ formatType.className } `, ' ' )\n\t\t\t\t.trim();\n\n\t\t\tif ( ! attributes.class ) {\n\t\t\t\tdelete attributes.class;\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( ! formatType ) {\n\t\tformatType = select( 'core/rich-text' ).getFormatTypeForBareElement(\n\t\t\ttype\n\t\t);\n\t}\n\n\tif ( ! formatType ) {\n\t\treturn attributes ? { type, attributes } : { type };\n\t}\n\n\tif (\n\t\tformatType.__experimentalCreatePrepareEditableTree &&\n\t\t! formatType.__experimentalCreateOnChangeEditableValue\n\t) {\n\t\treturn null;\n\t}\n\n\tif ( ! attributes ) {\n\t\treturn { type: formatType.name };\n\t}\n\n\tconst registeredAttributes = {};\n\tconst unregisteredAttributes = {};\n\n\tfor ( const name in attributes ) {\n\t\tconst key = simpleFindKey( formatType.attributes, name );\n\n\t\tif ( key ) {\n\t\t\tregisteredAttributes[ key ] = attributes[ name ];\n\t\t} else {\n\t\t\tunregisteredAttributes[ name ] = attributes[ name ];\n\t\t}\n\t}\n\n\treturn {\n\t\ttype: formatType.name,\n\t\tattributes: registeredAttributes,\n\t\tunregisteredAttributes,\n\t};\n}\n\n/**\n * Create a RichText value from an `Element` tree (DOM), an HTML string or a\n * plain text string, with optionally a `Range` object to set the selection. If\n * called without any input, an empty value will be created. If\n * `multilineTag` is provided, any content of direct children whose type matches\n * `multilineTag` will be separated by two newlines. The optional functions can\n * be used to filter out content.\n *\n * A value will have the following shape, which you are strongly encouraged not\n * to modify without the use of helper functions:\n *\n * ```js\n * {\n *   text: string,\n *   formats: Array,\n *   replacements: Array,\n *   ?start: number,\n *   ?end: number,\n * }\n * ```\n *\n * As you can see, text and formatting are separated. `text` holds the text,\n * including any replacement characters for objects and lines. `formats`,\n * `objects` and `lines` are all sparse arrays of the same length as `text`. It\n * holds information about the formatting at the relevant text indices. Finally\n * `start` and `end` state which text indices are selected. They are only\n * provided if a `Range` was given.\n *\n * @param {Object}  [$1]                      Optional named arguments.\n * @param {Element} [$1.element]              Element to create value from.\n * @param {string}  [$1.text]                 Text to create value from.\n * @param {string}  [$1.html]                 HTML to create value from.\n * @param {Range}   [$1.range]                Range to create value from.\n * @param {string}  [$1.multilineTag]         Multiline tag if the structure is\n *                                            multiline.\n * @param {Array}   [$1.multilineWrapperTags] Tags where lines can be found if\n *                                            nesting is possible.\n * @param {?boolean} [$1.preserveWhiteSpace]  Whether or not to collapse white\n *                                            space characters.\n *\n * @return {Object} A rich text value.\n */\nexport function create( {\n\telement,\n\ttext,\n\thtml,\n\trange,\n\tmultilineTag,\n\tmultilineWrapperTags,\n\t__unstableIsEditableTree: isEditableTree,\n\tpreserveWhiteSpace,\n} = {} ) {\n\tif ( typeof text === 'string' && text.length > 0 ) {\n\t\treturn {\n\t\t\tformats: Array( text.length ),\n\t\t\treplacements: Array( text.length ),\n\t\t\ttext,\n\t\t};\n\t}\n\n\tif ( typeof html === 'string' && html.length > 0 ) {\n\t\t// It does not matter which document this is, we're just using it to\n\t\t// parse.\n\t\telement = createElement( document, html );\n\t}\n\n\tif ( typeof element !== 'object' ) {\n\t\treturn createEmptyValue();\n\t}\n\n\tif ( ! multilineTag ) {\n\t\treturn createFromElement( {\n\t\t\telement,\n\t\t\trange,\n\t\t\tisEditableTree,\n\t\t\tpreserveWhiteSpace,\n\t\t} );\n\t}\n\n\treturn createFromMultilineElement( {\n\t\telement,\n\t\trange,\n\t\tmultilineTag,\n\t\tmultilineWrapperTags,\n\t\tisEditableTree,\n\t\tpreserveWhiteSpace,\n\t} );\n}\n\n/**\n * Helper to accumulate the value's selection start and end from the current\n * node and range.\n *\n * @param {Object} accumulator Object to accumulate into.\n * @param {Node}   node        Node to create value with.\n * @param {Range}  range       Range to create value with.\n * @param {Object} value       Value that is being accumulated.\n */\nfunction accumulateSelection( accumulator, node, range, value ) {\n\tif ( ! range ) {\n\t\treturn;\n\t}\n\n\tconst { parentNode } = node;\n\tconst { startContainer, startOffset, endContainer, endOffset } = range;\n\tconst currentLength = accumulator.text.length;\n\n\t// Selection can be extracted from value.\n\tif ( value.start !== undefined ) {\n\t\taccumulator.start = currentLength + value.start;\n\t\t// Range indicates that the current node has selection.\n\t} else if ( node === startContainer && node.nodeType === node.TEXT_NODE ) {\n\t\taccumulator.start = currentLength + startOffset;\n\t\t// Range indicates that the current node is selected.\n\t} else if (\n\t\tparentNode === startContainer &&\n\t\tnode === startContainer.childNodes[ startOffset ]\n\t) {\n\t\taccumulator.start = currentLength;\n\t\t// Range indicates that the selection is after the current node.\n\t} else if (\n\t\tparentNode === startContainer &&\n\t\tnode === startContainer.childNodes[ startOffset - 1 ]\n\t) {\n\t\taccumulator.start = currentLength + value.text.length;\n\t\t// Fallback if no child inside handled the selection.\n\t} else if ( node === startContainer ) {\n\t\taccumulator.start = currentLength;\n\t}\n\n\t// Selection can be extracted from value.\n\tif ( value.end !== undefined ) {\n\t\taccumulator.end = currentLength + value.end;\n\t\t// Range indicates that the current node has selection.\n\t} else if ( node === endContainer && node.nodeType === node.TEXT_NODE ) {\n\t\taccumulator.end = currentLength + endOffset;\n\t\t// Range indicates that the current node is selected.\n\t} else if (\n\t\tparentNode === endContainer &&\n\t\tnode === endContainer.childNodes[ endOffset - 1 ]\n\t) {\n\t\taccumulator.end = currentLength + value.text.length;\n\t\t// Range indicates that the selection is before the current node.\n\t} else if (\n\t\tparentNode === endContainer &&\n\t\tnode === endContainer.childNodes[ endOffset ]\n\t) {\n\t\taccumulator.end = currentLength;\n\t\t// Fallback if no child inside handled the selection.\n\t} else if ( node === endContainer ) {\n\t\taccumulator.end = currentLength + endOffset;\n\t}\n}\n\n/**\n * Adjusts the start and end offsets from a range based on a text filter.\n *\n * @param {Node}     node   Node of which the text should be filtered.\n * @param {Range}    range  The range to filter.\n * @param {Function} filter Function to use to filter the text.\n *\n * @return {?Object} Object containing range properties.\n */\nfunction filterRange( node, range, filter ) {\n\tif ( ! range ) {\n\t\treturn;\n\t}\n\n\tconst { startContainer, endContainer } = range;\n\tlet { startOffset, endOffset } = range;\n\n\tif ( node === startContainer ) {\n\t\tstartOffset = filter( node.nodeValue.slice( 0, startOffset ) ).length;\n\t}\n\n\tif ( node === endContainer ) {\n\t\tendOffset = filter( node.nodeValue.slice( 0, endOffset ) ).length;\n\t}\n\n\treturn { startContainer, startOffset, endContainer, endOffset };\n}\n\n/**\n * Collapse any whitespace used for HTML formatting to one space character,\n * because it will also be displayed as such by the browser.\n *\n * @param {string} string\n */\nfunction collapseWhiteSpace( string ) {\n\treturn string.replace( /[\\n\\r\\t]+/g, ' ' );\n}\n\nconst ZWNBSPRegExp = new RegExp( ZWNBSP, 'g' );\n\n/**\n * Removes padding (zero width non breaking spaces) added by `toTree`.\n *\n * @param {string} string\n */\nfunction removePadding( string ) {\n\treturn string.replace( ZWNBSPRegExp, '' );\n}\n\n/**\n * Creates a Rich Text value from a DOM element and range.\n *\n * @param {Object}    $1                      Named argements.\n * @param {?Element}  $1.element              Element to create value from.\n * @param {?Range}    $1.range                Range to create value from.\n * @param {?string}   $1.multilineTag         Multiline tag if the structure is\n *                                            multiline.\n * @param {?Array}    $1.multilineWrapperTags Tags where lines can be found if\n *                                            nesting is possible.\n * @param {?boolean} $1.preserveWhiteSpace    Whether or not to collapse white\n *                                            space characters.\n *\n * @return {Object} A rich text value.\n */\nfunction createFromElement( {\n\telement,\n\trange,\n\tmultilineTag,\n\tmultilineWrapperTags,\n\tcurrentWrapperTags = [],\n\tisEditableTree,\n\tpreserveWhiteSpace,\n} ) {\n\tconst accumulator = createEmptyValue();\n\n\tif ( ! element ) {\n\t\treturn accumulator;\n\t}\n\n\tif ( ! element.hasChildNodes() ) {\n\t\taccumulateSelection( accumulator, element, range, createEmptyValue() );\n\t\treturn accumulator;\n\t}\n\n\tconst length = element.childNodes.length;\n\n\t// Optimise for speed.\n\tfor ( let index = 0; index < length; index++ ) {\n\t\tconst node = element.childNodes[ index ];\n\t\tconst type = node.nodeName.toLowerCase();\n\n\t\tif ( node.nodeType === node.TEXT_NODE ) {\n\t\t\tlet filter = removePadding;\n\n\t\t\tif ( ! preserveWhiteSpace ) {\n\t\t\t\tfilter = ( string ) =>\n\t\t\t\t\tremovePadding( collapseWhiteSpace( string ) );\n\t\t\t}\n\n\t\t\tconst text = filter( node.nodeValue );\n\t\t\trange = filterRange( node, range, filter );\n\t\t\taccumulateSelection( accumulator, node, range, { text } );\n\t\t\t// Create a sparse array of the same length as `text`, in which\n\t\t\t// formats can be added.\n\t\t\taccumulator.formats.length += text.length;\n\t\t\taccumulator.replacements.length += text.length;\n\t\t\taccumulator.text += text;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ( node.nodeType !== node.ELEMENT_NODE ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (\n\t\t\tisEditableTree &&\n\t\t\t// Ignore any placeholders.\n\t\t\t( node.getAttribute( 'data-rich-text-placeholder' ) ||\n\t\t\t\t// Ignore any line breaks that are not inserted by us.\n\t\t\t\t( type === 'br' &&\n\t\t\t\t\t! node.getAttribute( 'data-rich-text-line-break' ) ) )\n\t\t) {\n\t\t\taccumulateSelection( accumulator, node, range, createEmptyValue() );\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ( type === 'br' ) {\n\t\t\taccumulateSelection( accumulator, node, range, createEmptyValue() );\n\t\t\tmergePair( accumulator, create( { text: '\\n' } ) );\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst lastFormats =\n\t\t\taccumulator.formats[ accumulator.formats.length - 1 ];\n\t\tconst lastFormat = lastFormats && lastFormats[ lastFormats.length - 1 ];\n\t\tconst newFormat = toFormat( {\n\t\t\ttype,\n\t\t\tattributes: getAttributes( { element: node } ),\n\t\t} );\n\t\tconst format = isFormatEqual( newFormat, lastFormat )\n\t\t\t? lastFormat\n\t\t\t: newFormat;\n\n\t\tif (\n\t\t\tmultilineWrapperTags &&\n\t\t\tmultilineWrapperTags.indexOf( type ) !== -1\n\t\t) {\n\t\t\tconst value = createFromMultilineElement( {\n\t\t\t\telement: node,\n\t\t\t\trange,\n\t\t\t\tmultilineTag,\n\t\t\t\tmultilineWrapperTags,\n\t\t\t\tcurrentWrapperTags: [ ...currentWrapperTags, format ],\n\t\t\t\tisEditableTree,\n\t\t\t\tpreserveWhiteSpace,\n\t\t\t} );\n\n\t\t\taccumulateSelection( accumulator, node, range, value );\n\t\t\tmergePair( accumulator, value );\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst value = createFromElement( {\n\t\t\telement: node,\n\t\t\trange,\n\t\t\tmultilineTag,\n\t\t\tmultilineWrapperTags,\n\t\t\tisEditableTree,\n\t\t\tpreserveWhiteSpace,\n\t\t} );\n\n\t\taccumulateSelection( accumulator, node, range, value );\n\n\t\tif ( ! format ) {\n\t\t\tmergePair( accumulator, value );\n\t\t} else if ( value.text.length === 0 ) {\n\t\t\tif ( format.attributes ) {\n\t\t\t\tmergePair( accumulator, {\n\t\t\t\t\tformats: [ , ],\n\t\t\t\t\treplacements: [ format ],\n\t\t\t\t\ttext: OBJECT_REPLACEMENT_CHARACTER,\n\t\t\t\t} );\n\t\t\t}\n\t\t} else {\n\t\t\t// Indices should share a reference to the same formats array.\n\t\t\t// Only create a new reference if `formats` changes.\n\t\t\tfunction mergeFormats( formats ) {\n\t\t\t\tif ( mergeFormats.formats === formats ) {\n\t\t\t\t\treturn mergeFormats.newFormats;\n\t\t\t\t}\n\n\t\t\t\tconst newFormats = formats\n\t\t\t\t\t? [ format, ...formats ]\n\t\t\t\t\t: [ format ];\n\n\t\t\t\tmergeFormats.formats = formats;\n\t\t\t\tmergeFormats.newFormats = newFormats;\n\n\t\t\t\treturn newFormats;\n\t\t\t}\n\n\t\t\t// Since the formats parameter can be `undefined`, preset\n\t\t\t// `mergeFormats` with a new reference.\n\t\t\tmergeFormats.newFormats = [ format ];\n\n\t\t\tmergePair( accumulator, {\n\t\t\t\t...value,\n\t\t\t\tformats: Array.from( value.formats, mergeFormats ),\n\t\t\t} );\n\t\t}\n\t}\n\n\treturn accumulator;\n}\n\n/**\n * Creates a rich text value from a DOM element and range that should be\n * multiline.\n *\n * @param {Object}   $1                      Named argements.\n * @param {?Element} $1.element              Element to create value from.\n * @param {?Range}   $1.range                Range to create value from.\n * @param {?string}  $1.multilineTag         Multiline tag if the structure is\n *                                           multiline.\n * @param {?Array}   $1.multilineWrapperTags Tags where lines can be found if\n *                                           nesting is possible.\n * @param {boolean}  $1.currentWrapperTags   Whether to prepend a line\n *                                           separator.\n * @param {?boolean} $1.preserveWhiteSpace   Whether or not to collapse white\n *                                           space characters.\n *\n * @return {Object} A rich text value.\n */\nfunction createFromMultilineElement( {\n\telement,\n\trange,\n\tmultilineTag,\n\tmultilineWrapperTags,\n\tcurrentWrapperTags = [],\n\tisEditableTree,\n\tpreserveWhiteSpace,\n} ) {\n\tconst accumulator = createEmptyValue();\n\n\tif ( ! element || ! element.hasChildNodes() ) {\n\t\treturn accumulator;\n\t}\n\n\tconst length = element.children.length;\n\n\t// Optimise for speed.\n\tfor ( let index = 0; index < length; index++ ) {\n\t\tconst node = element.children[ index ];\n\n\t\tif ( node.nodeName.toLowerCase() !== multilineTag ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst value = createFromElement( {\n\t\t\telement: node,\n\t\t\trange,\n\t\t\tmultilineTag,\n\t\t\tmultilineWrapperTags,\n\t\t\tcurrentWrapperTags,\n\t\t\tisEditableTree,\n\t\t\tpreserveWhiteSpace,\n\t\t} );\n\n\t\t// Multiline value text should be separated by a line separator.\n\t\tif ( index !== 0 || currentWrapperTags.length > 0 ) {\n\t\t\tmergePair( accumulator, {\n\t\t\t\tformats: [ , ],\n\t\t\t\treplacements:\n\t\t\t\t\tcurrentWrapperTags.length > 0\n\t\t\t\t\t\t? [ currentWrapperTags ]\n\t\t\t\t\t\t: [ , ],\n\t\t\t\ttext: LINE_SEPARATOR,\n\t\t\t} );\n\t\t}\n\n\t\taccumulateSelection( accumulator, node, range, value );\n\t\tmergePair( accumulator, value );\n\t}\n\n\treturn accumulator;\n}\n\n/**\n * Gets the attributes of an element in object shape.\n *\n * @param {Object}    $1                 Named argements.\n * @param {Element}   $1.element         Element to get attributes from.\n *\n * @return {?Object} Attribute object or `undefined` if the element has no\n *                   attributes.\n */\nfunction getAttributes( { element } ) {\n\tif ( ! element.hasAttributes() ) {\n\t\treturn;\n\t}\n\n\tconst length = element.attributes.length;\n\tlet accumulator;\n\n\t// Optimise for speed.\n\tfor ( let i = 0; i < length; i++ ) {\n\t\tconst { name, value } = element.attributes[ i ];\n\n\t\tif ( name.indexOf( 'data-rich-text-' ) === 0 ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\taccumulator = accumulator || {};\n\t\taccumulator[ name ] = value;\n\t}\n\n\treturn accumulator;\n}\n"]}