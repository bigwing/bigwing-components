{"version":3,"sources":["@wordpress/rich-text/src/component/use-boundary-style.js"],"names":["useEffect","useBoundaryStyle","activeFormats","ref","length","boundarySelector","element","current","querySelector","ownerDocument","defaultView","computedStyle","getComputedStyle","newColor","color","replace","selector","rule","style","globalStyleId","globalStyle","getElementById","createElement","id","head","appendChild","innerHTML"],"mappings":"AAAA;;;AAGA,SAASA,SAAT,QAA0B,oBAA1B;AAEA;;;;;AAIA,OAAO,SAASC,gBAAT,OAAoD;AAAA,MAAvBC,aAAuB,QAAvBA,aAAuB;AAAA,MAARC,GAAQ,QAARA,GAAQ;AAC1DH,EAAAA,SAAS,CAAE,YAAM;AAChB;AACA;AACA,QAAK,CAAEE,aAAF,IAAmB,CAAEA,aAAa,CAACE,MAAxC,EAAiD;AAChD;AACA;;AAED,QAAMC,gBAAgB,GAAG,mCAAzB;AACA,QAAMC,OAAO,GAAGH,GAAG,CAACI,OAAJ,CAAYC,aAAZ,CAA2BH,gBAA3B,CAAhB;;AAEA,QAAK,CAAEC,OAAP,EAAiB;AAChB;AACA;;AAZe,QAcRG,aAdQ,GAcUH,OAdV,CAcRG,aAdQ;AAAA,QAeRC,WAfQ,GAeQD,aAfR,CAeRC,WAfQ;AAgBhB,QAAMC,aAAa,GAAGD,WAAW,CAACE,gBAAZ,CAA8BN,OAA9B,CAAtB;AACA,QAAMO,QAAQ,GAAGF,aAAa,CAACG,KAAd,CACfC,OADe,CACN,GADM,EACD,QADC,EAEfA,OAFe,CAEN,KAFM,EAEC,MAFD,CAAjB;AAGA,QAAMC,QAAQ,8BAAwBX,gBAAxB,CAAd;AACA,QAAMY,IAAI,+BAAyBJ,QAAzB,CAAV;AACA,QAAMK,KAAK,aAAOF,QAAP,eAAsBC,IAAtB,MAAX;AACA,QAAME,aAAa,GAAG,0BAAtB;AAEA,QAAIC,WAAW,GAAGX,aAAa,CAACY,cAAd,CAA8BF,aAA9B,CAAlB;;AAEA,QAAK,CAAEC,WAAP,EAAqB;AACpBA,MAAAA,WAAW,GAAGX,aAAa,CAACa,aAAd,CAA6B,OAA7B,CAAd;AACAF,MAAAA,WAAW,CAACG,EAAZ,GAAiBJ,aAAjB;AACAV,MAAAA,aAAa,CAACe,IAAd,CAAmBC,WAAnB,CAAgCL,WAAhC;AACA;;AAED,QAAKA,WAAW,CAACM,SAAZ,KAA0BR,KAA/B,EAAuC;AACtCE,MAAAA,WAAW,CAACM,SAAZ,GAAwBR,KAAxB;AACA;AACD,GApCQ,EAoCN,CAAEhB,aAAF,CApCM,CAAT;AAqCA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useEffect } from '@wordpress/element';\n\n/**\n * Calculates and renders the format boundary style when the active formats\n * change.\n */\nexport function useBoundaryStyle( { activeFormats, ref } ) {\n\tuseEffect( () => {\n\t\t// There's no need to recalculate the boundary styles if no formats are\n\t\t// active, because no boundary styles will be visible.\n\t\tif ( ! activeFormats || ! activeFormats.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst boundarySelector = '*[data-rich-text-format-boundary]';\n\t\tconst element = ref.current.querySelector( boundarySelector );\n\n\t\tif ( ! element ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { ownerDocument } = element;\n\t\tconst { defaultView } = ownerDocument;\n\t\tconst computedStyle = defaultView.getComputedStyle( element );\n\t\tconst newColor = computedStyle.color\n\t\t\t.replace( ')', ', 0.2)' )\n\t\t\t.replace( 'rgb', 'rgba' );\n\t\tconst selector = `.rich-text:focus ${ boundarySelector }`;\n\t\tconst rule = `background-color: ${ newColor }`;\n\t\tconst style = `${ selector } {${ rule }}`;\n\t\tconst globalStyleId = 'rich-text-boundary-style';\n\n\t\tlet globalStyle = ownerDocument.getElementById( globalStyleId );\n\n\t\tif ( ! globalStyle ) {\n\t\t\tglobalStyle = ownerDocument.createElement( 'style' );\n\t\t\tglobalStyle.id = globalStyleId;\n\t\t\townerDocument.head.appendChild( globalStyle );\n\t\t}\n\n\t\tif ( globalStyle.innerHTML !== style ) {\n\t\t\tglobalStyle.innerHTML = style;\n\t\t}\n\t}, [ activeFormats ] );\n}\n"]}