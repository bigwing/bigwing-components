{"version":3,"sources":["@wordpress/rich-text/src/normalise-formats.js"],"names":["isFormatEqual","normaliseFormats","value","newFormats","formats","slice","forEach","formatsAtIndex","index","formatsAtPreviousIndex","newFormatsAtIndex","format","formatIndex","previousFormat"],"mappings":";;;;;;AAAA;;;AAIA,SAASA,aAAT,QAA8B,mBAA9B;AAEA;;;;;;;;;AAQA,OAAO,SAASC,gBAAT,CAA2BC,KAA3B,EAAmC;AACzC,MAAMC,UAAU,GAAGD,KAAK,CAACE,OAAN,CAAcC,KAAd,EAAnB;AAEAF,EAAAA,UAAU,CAACG,OAAX,CAAoB,UAAEC,cAAF,EAAkBC,KAAlB,EAA6B;AAChD,QAAMC,sBAAsB,GAAGN,UAAU,CAAEK,KAAK,GAAG,CAAV,CAAzC;;AAEA,QAAKC,sBAAL,EAA8B;AAC7B,UAAMC,iBAAiB,GAAGH,cAAc,CAACF,KAAf,EAA1B;AAEAK,MAAAA,iBAAiB,CAACJ,OAAlB,CAA2B,UAAEK,MAAF,EAAUC,WAAV,EAA2B;AACrD,YAAMC,cAAc,GAAGJ,sBAAsB,CAAEG,WAAF,CAA7C;;AAEA,YAAKZ,aAAa,CAAEW,MAAF,EAAUE,cAAV,CAAlB,EAA+C;AAC9CH,UAAAA,iBAAiB,CAAEE,WAAF,CAAjB,GAAmCC,cAAnC;AACA;AACD,OAND;AAQAV,MAAAA,UAAU,CAAEK,KAAF,CAAV,GAAsBE,iBAAtB;AACA;AACD,GAhBD;AAkBA,2BACIR,KADJ;AAECE,IAAAA,OAAO,EAAED;AAFV;AAIA","sourcesContent":["/**\n * Internal dependencies\n */\n\nimport { isFormatEqual } from './is-format-equal';\n\n/**\n * Normalises formats: ensures subsequent adjacent equal formats have the same\n * reference.\n *\n * @param {Object} value Value to normalise formats of.\n *\n * @return {Object} New value with normalised formats.\n */\nexport function normaliseFormats( value ) {\n\tconst newFormats = value.formats.slice();\n\n\tnewFormats.forEach( ( formatsAtIndex, index ) => {\n\t\tconst formatsAtPreviousIndex = newFormats[ index - 1 ];\n\n\t\tif ( formatsAtPreviousIndex ) {\n\t\t\tconst newFormatsAtIndex = formatsAtIndex.slice();\n\n\t\t\tnewFormatsAtIndex.forEach( ( format, formatIndex ) => {\n\t\t\t\tconst previousFormat = formatsAtPreviousIndex[ formatIndex ];\n\n\t\t\t\tif ( isFormatEqual( format, previousFormat ) ) {\n\t\t\t\t\tnewFormatsAtIndex[ formatIndex ] = previousFormat;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tnewFormats[ index ] = newFormatsAtIndex;\n\t\t}\n\t} );\n\n\treturn {\n\t\t...value,\n\t\tformats: newFormats,\n\t};\n}\n"]}