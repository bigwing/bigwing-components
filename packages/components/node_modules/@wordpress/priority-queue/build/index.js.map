{"version":3,"sources":["@wordpress/priority-queue/src/index.js"],"names":["createQueue","waitingList","elementsMap","WeakMap","isRunning","runWaitingList","deadline","hasTimeRemaining","timeRemaining","length","nextElement","shift","callback","get","delete","add","element","item","has","push","set","flush","index","indexOf","splice","reset"],"mappings":";;;;;;;;;AAGA;;AAHA;;;;AAKA;;;;;;AAMA;;;;;;AAMA;;;;;;AAMA;;;;;;AAMA;;;;;;AAMA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;AAsBO,IAAMA,WAAW,GAAG,SAAdA,WAAc,GAAM;AAChC;AACA,MAAIC,WAAW,GAAG,EAAlB;AAEA;;AACA,MAAIC,WAAW,GAAG,IAAIC,OAAJ,EAAlB;AAEA,MAAIC,SAAS,GAAG,KAAhB;AAEA;;AACA;;;;;;;AAMA;;AACA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAEC,QAAF,EAAgB;AACtC,QAAMC,gBAAgB,GACrB,OAAOD,QAAP,KAAoB,QAApB,GACG;AAAA,aAAM,KAAN;AAAA,KADH,GAEG;AAAA,aAAMA,QAAQ,CAACE,aAAT,KAA2B,CAAjC;AAAA,KAHJ;;AAKA,OAAG;AACF,UAAKP,WAAW,CAACQ,MAAZ,KAAuB,CAA5B,EAAgC;AAC/BL,QAAAA,SAAS,GAAG,KAAZ;AACA;AACA;;AAED,UAAMM,WAAW;AAAG;AAAwCT,MAAAA,WAAW,CAACU,KAAZ,EAA5D;AACA,UAAMC,QAAQ;AAAG;AAAyCV,MAAAA,WAAW,CAACW,GAAZ,CACzDH,WADyD,CAA1D;AAGAE,MAAAA,QAAQ;AACRV,MAAAA,WAAW,CAACY,MAAZ,CAAoBJ,WAApB;AACA,KAZD,QAYUH,gBAAgB,EAZ1B;;AAcA,sCAAqBF,cAArB;AACA,GArBD;AAuBA;;;;;;;;;;AAQA,MAAMU,GAAG,GAAG,SAANA,GAAM,CAAEC,OAAF,EAAWC,IAAX,EAAqB;AAChC,QAAK,CAAEf,WAAW,CAACgB,GAAZ,CAAiBF,OAAjB,CAAP,EAAoC;AACnCf,MAAAA,WAAW,CAACkB,IAAZ,CAAkBH,OAAlB;AACA;;AACDd,IAAAA,WAAW,CAACkB,GAAZ,CAAiBJ,OAAjB,EAA0BC,IAA1B;;AACA,QAAK,CAAEb,SAAP,EAAmB;AAClBA,MAAAA,SAAS,GAAG,IAAZ;AACA,wCAAqBC,cAArB;AACA;AACD,GATD;AAWA;;;;;;;;;;;;AAUA,MAAMgB,KAAK,GAAG,SAARA,KAAQ,CAAEL,OAAF,EAAe;AAC5B,QAAK,CAAEd,WAAW,CAACgB,GAAZ,CAAiBF,OAAjB,CAAP,EAAoC;AACnC,aAAO,KAAP;AACA;;AAED,QAAMM,KAAK,GAAGrB,WAAW,CAACsB,OAAZ,CAAqBP,OAArB,CAAd;AACAf,IAAAA,WAAW,CAACuB,MAAZ,CAAoBF,KAApB,EAA2B,CAA3B;AACA,QAAMV,QAAQ;AAAG;AAAyCV,IAAAA,WAAW,CAACW,GAAZ,CACzDG,OADyD,CAA1D;AAGAd,IAAAA,WAAW,CAACY,MAAZ,CAAoBE,OAApB;AACAJ,IAAAA,QAAQ;AAER,WAAO,IAAP;AACA,GAdD;AAgBA;;;;;;;AAKA,MAAMa,KAAK,GAAG,SAARA,KAAQ,GAAM;AACnBxB,IAAAA,WAAW,GAAG,EAAd;AACAC,IAAAA,WAAW,GAAG,IAAIC,OAAJ,EAAd;AACAC,IAAAA,SAAS,GAAG,KAAZ;AACA,GAJD;;AAMA,SAAO;AACNW,IAAAA,GAAG,EAAHA,GADM;AAENM,IAAAA,KAAK,EAALA,KAFM;AAGNI,IAAAA,KAAK,EAALA;AAHM,GAAP;AAKA,CArGM","sourcesContent":["/**\n * Internal dependencies\n */\nimport requestIdleCallback from './request-idle-callback';\n\n/**\n * Enqueued callback to invoke once idle time permits.\n *\n * @typedef {()=>void} WPPriorityQueueCallback\n */\n\n/**\n * An object used to associate callbacks in a particular context grouping.\n *\n * @typedef {{}} WPPriorityQueueContext\n */\n\n/**\n * Function to add callback to priority queue.\n *\n * @typedef {(element:WPPriorityQueueContext,item:WPPriorityQueueCallback)=>void} WPPriorityQueueAdd\n */\n\n/**\n * Function to flush callbacks from priority queue.\n *\n * @typedef {(element:WPPriorityQueueContext)=>boolean} WPPriorityQueueFlush\n */\n\n/**\n * Reset the queue.\n *\n * @typedef {()=>void} WPPriorityQueueReset\n */\n\n/**\n * Priority queue instance.\n *\n * @typedef {Object} WPPriorityQueue\n *\n * @property {WPPriorityQueueAdd}   add   Add callback to queue for context.\n * @property {WPPriorityQueueFlush} flush Flush queue for context.\n * @property {WPPriorityQueueReset} reset Reset queue.\n */\n\n/**\n * Creates a context-aware queue that only executes\n * the last task of a given context.\n *\n * @example\n *```js\n * import { createQueue } from '@wordpress/priority-queue';\n *\n * const queue = createQueue();\n *\n * // Context objects.\n * const ctx1 = {};\n * const ctx2 = {};\n *\n * // For a given context in the queue, only the last callback is executed.\n * queue.add( ctx1, () => console.log( 'This will be printed first' ) );\n * queue.add( ctx2, () => console.log( 'This won\\'t be printed' ) );\n * queue.add( ctx2, () => console.log( 'This will be printed second' ) );\n *```\n *\n * @return {WPPriorityQueue} Queue object with `add`, `flush` and `reset` methods.\n */\nexport const createQueue = () => {\n\t/** @type {WPPriorityQueueContext[]} */\n\tlet waitingList = [];\n\n\t/** @type {WeakMap<WPPriorityQueueContext,WPPriorityQueueCallback>} */\n\tlet elementsMap = new WeakMap();\n\n\tlet isRunning = false;\n\n\t/* eslint-disable jsdoc/valid-types */\n\t/**\n\t * Callback to process as much queue as time permits.\n\t *\n\t * @param {IdleDeadline|number} deadline Idle callback deadline object, or\n\t *                                       animation frame timestamp.\n\t */\n\t/* eslint-enable */\n\tconst runWaitingList = ( deadline ) => {\n\t\tconst hasTimeRemaining =\n\t\t\ttypeof deadline === 'number'\n\t\t\t\t? () => false\n\t\t\t\t: () => deadline.timeRemaining() > 0;\n\n\t\tdo {\n\t\t\tif ( waitingList.length === 0 ) {\n\t\t\t\tisRunning = false;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nextElement = /** @type {WPPriorityQueueContext} */ ( waitingList.shift() );\n\t\t\tconst callback = /** @type {WPPriorityQueueCallback} */ ( elementsMap.get(\n\t\t\t\tnextElement\n\t\t\t) );\n\t\t\tcallback();\n\t\t\telementsMap.delete( nextElement );\n\t\t} while ( hasTimeRemaining() );\n\n\t\trequestIdleCallback( runWaitingList );\n\t};\n\n\t/**\n\t * Add a callback to the queue for a given context.\n\t *\n\t * @type {WPPriorityQueueAdd}\n\t *\n\t * @param {WPPriorityQueueContext}  element Context object.\n\t * @param {WPPriorityQueueCallback} item    Callback function.\n\t */\n\tconst add = ( element, item ) => {\n\t\tif ( ! elementsMap.has( element ) ) {\n\t\t\twaitingList.push( element );\n\t\t}\n\t\telementsMap.set( element, item );\n\t\tif ( ! isRunning ) {\n\t\t\tisRunning = true;\n\t\t\trequestIdleCallback( runWaitingList );\n\t\t}\n\t};\n\n\t/**\n\t * Flushes queue for a given context, returning true if the flush was\n\t * performed, or false if there is no queue for the given context.\n\t *\n\t * @type {WPPriorityQueueFlush}\n\t *\n\t * @param {WPPriorityQueueContext} element Context object.\n\t *\n\t * @return {boolean} Whether flush was performed.\n\t */\n\tconst flush = ( element ) => {\n\t\tif ( ! elementsMap.has( element ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst index = waitingList.indexOf( element );\n\t\twaitingList.splice( index, 1 );\n\t\tconst callback = /** @type {WPPriorityQueueCallback} */ ( elementsMap.get(\n\t\t\telement\n\t\t) );\n\t\telementsMap.delete( element );\n\t\tcallback();\n\n\t\treturn true;\n\t};\n\n\t/**\n\t * Reset the queue without running the pending callbacks.\n\t *\n\t * @type {WPPriorityQueueReset}\n\t */\n\tconst reset = () => {\n\t\twaitingList = [];\n\t\telementsMap = new WeakMap();\n\t\tisRunning = false;\n\t};\n\n\treturn {\n\t\tadd,\n\t\tflush,\n\t\treset,\n\t};\n};\n"]}