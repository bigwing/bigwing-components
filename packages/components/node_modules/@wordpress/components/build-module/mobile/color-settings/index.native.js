import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import { View, Text } from 'react-native';
/**
 * WordPress dependencies
 */

import { __ } from '@wordpress/i18n';
import { useState, useEffect } from '@wordpress/element';
import { usePreferredColorSchemeStyle } from '@wordpress/compose';
import { ColorControl, PanelBody } from '@wordpress/components';
/**
 * Internal dependencies
 */

import ColorPicker from '../../color-picker';
import ColorPalette from '../../color-palette';
import ColorIndicator from '../../color-indicator';
import CustomGradientPicker from '../../custom-gradient-picker';
import NavigationHeader from '../bottom-sheet/navigation-header';
import SegmentedControls from '../segmented-control';
import { colorsUtils } from './utils';
import { performLayoutAnimation } from '../layout-animation';
import styles from './style.scss';

function ColorSettings(_ref) {
  var label = _ref.label,
      onColorChange = _ref.onColorChange,
      onGradientChange = _ref.onGradientChange,
      colorValue = _ref.colorValue,
      onReplaceSubsheet = _ref.onReplaceSubsheet,
      shouldEnableBottomSheetScroll = _ref.shouldEnableBottomSheetScroll,
      shouldDisableBottomSheetMaxHeight = _ref.shouldDisableBottomSheetMaxHeight,
      isBottomSheetContentScrolling = _ref.isBottomSheetContentScrolling,
      onCloseBottomSheet = _ref.onCloseBottomSheet,
      onHardwareButtonPress = _ref.onHardwareButtonPress,
      defaultSettings = _ref.defaultSettings;

  var _useState = useState(colorValue),
      _useState2 = _slicedToArray(_useState, 2),
      currentValue = _useState2[0],
      setCurrentValue = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isCustomScreen = _useState4[0],
      setIsCustomScreen = _useState4[1];

  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      isCustomGradientScreen = _useState6[0],
      setIsCustomGradientScreen = _useState6[1];

  var segments = colorsUtils.segments,
      subsheets = colorsUtils.subsheets,
      isGradient = colorsUtils.isGradient;
  var isGradientColor = isGradient(currentValue);
  var selectedSegmentIndex = isGradientColor ? 1 : 0;

  var _useState7 = useState(segments[selectedSegmentIndex]),
      _useState8 = _slicedToArray(_useState7, 2),
      currentSegment = _useState8[0],
      setCurrentSegment = _useState8[1];

  var isSolidSegment = currentSegment === segments[0];
  var isCustomGadientShown = !isSolidSegment && isGradientColor;
  var horizontalSeparatorStyle = usePreferredColorSchemeStyle(styles.horizontalSeparator, styles.horizontalSeparatorDark);
  useEffect(function () {
    onHardwareButtonPress(function () {
      if (isCustomScreen) {
        onCustomScreenToggle(false);
      } else if (isCustomGradientScreen) {
        onCustomGradientScreenToggle(false);
      } else {
        onReplaceSubsheet(subsheets[0], {}, afterHardwareButtonPress());
      }
    });
  }, [isCustomScreen, isCustomGradientScreen]);
  useEffect(function () {
    performLayoutAnimation();
  }, [isCustomGadientShown]);
  useEffect(function () {
    setCurrentSegment(segments[selectedSegmentIndex]);
    shouldDisableBottomSheetMaxHeight(true);
    onCloseBottomSheet(null);
  }, []);

  function afterHardwareButtonPress() {
    onHardwareButtonPress(null);
    shouldDisableBottomSheetMaxHeight(true);
  }

  function onCustomScreenToggle(shouldShow) {
    performLayoutAnimation();
    setIsCustomScreen(shouldShow);
  }

  function onCustomGradientScreenToggle(shouldShow) {
    performLayoutAnimation();
    setIsCustomGradientScreen(shouldShow);
  }

  function onCustomPress() {
    if (isSolidSegment) {
      onCustomScreenToggle(true);
    } else {
      onCustomGradientScreenToggle(true);
    }
  }

  function setColor(color) {
    setCurrentValue(color);

    if (isSolidSegment && onColorChange && onGradientChange) {
      onColorChange(color);
      onGradientChange('');
    } else if (isSolidSegment && onColorChange) {
      onColorChange(color);
    } else if (!isSolidSegment && onGradientChange) {
      onGradientChange(color);
      onColorChange('');
    }
  }

  function getFooter() {
    if (onGradientChange) {
      return createElement(SegmentedControls, {
        segments: segments,
        segmentHandler: setCurrentSegment,
        selectedIndex: segments.indexOf(currentSegment),
        addonLeft: currentValue && createElement(ColorIndicator, {
          color: currentValue,
          style: styles.colorIndicator
        })
      });
    }

    return createElement(View, {
      style: styles.footer
    }, createElement(View, {
      style: styles.flex
    }, currentValue && createElement(ColorIndicator, {
      color: currentValue,
      style: styles.colorIndicator
    })), createElement(Text, {
      style: styles.selectColorText,
      maxFontSizeMultiplier: 2
    }, __('Select a color')), createElement(View, {
      style: styles.flex
    }));
  }

  return createElement(View, {
    renderToHardwareTextureAndroid: true
  }, isCustomScreen && createElement(View, null, createElement(ColorPicker, {
    shouldEnableBottomSheetScroll: shouldEnableBottomSheetScroll,
    shouldDisableBottomSheetMaxHeight: shouldDisableBottomSheetMaxHeight,
    setColor: setColor,
    activeColor: currentValue,
    isGradientColor: isGradientColor,
    onNavigationBack: function onNavigationBack() {
      return onCustomScreenToggle(false);
    },
    onCloseBottomSheet: onCloseBottomSheet,
    isBottomSheetContentScrolling: isBottomSheetContentScrolling
  })), !isCustomScreen && !isCustomGradientScreen && createElement(View, null, createElement(NavigationHeader, {
    screen: label,
    leftButtonOnPress: function leftButtonOnPress() {
      return onReplaceSubsheet(subsheets[0]);
    }
  }), createElement(ColorPalette, {
    setColor: setColor,
    activeColor: currentValue,
    isGradientColor: isGradientColor,
    currentSegment: currentSegment,
    isCustomScreen: isCustomScreen,
    onCustomPress: onCustomPress,
    shouldEnableBottomSheetScroll: shouldEnableBottomSheetScroll,
    defaultSettings: defaultSettings
  }), isCustomGadientShown && createElement(Fragment, null, createElement(View, {
    style: horizontalSeparatorStyle
  }), createElement(PanelBody, null, createElement(ColorControl, {
    label: __('Customize Gradient'),
    onPress: function onPress() {
      return onCustomGradientScreenToggle(true);
    },
    withColorIndicator: false
  }))), createElement(View, {
    style: horizontalSeparatorStyle
  }), getFooter()), isCustomGradientScreen && createElement(View, null, createElement(NavigationHeader, {
    screen: __('Customize Gradient'),
    leftButtonOnPress: function leftButtonOnPress() {
      return onCustomGradientScreenToggle(false);
    }
  }), createElement(CustomGradientPicker, {
    setColor: setColor,
    currentValue: currentValue,
    isGradientColor: isGradientColor
  })));
}

export default ColorSettings;
//# sourceMappingURL=index.native.js.map