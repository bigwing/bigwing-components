import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import { Platform, Clipboard } from 'react-native';
/**
 * WordPress dependencies
 */

import { compose } from '@wordpress/compose';
import { withSelect } from '@wordpress/data';
import { isURL, prependHTTP } from '@wordpress/url';
import { useEffect, useState, useRef } from '@wordpress/element';
import { link, external } from '@wordpress/icons';
/**
 * Internal dependencies
 */

/**
 * Internal dependencies
 */

import BottomSheet from '../bottom-sheet';
import PanelBody from '../../panel/body';
import TextControl from '../../text-control';
import ToggleControl from '../../toggle-control';
import UnsupportedFooterControl from '../../unsupported-footer-control';
import PanelActions from '../../panel/actions';
import LinkRelIcon from './link-rel';
import styles from './style.scss';
var NEW_TAB_REL = 'noreferrer noopener';

function LinkSettings(_ref) {
  var isVisible = _ref.isVisible,
      onClose = _ref.onClose,
      attributes = _ref.attributes,
      setAttributes = _ref.setAttributes,
      onEmptyURL = _ref.onEmptyURL,
      options = _ref.options,
      withBottomSheet = _ref.withBottomSheet,
      actions = _ref.actions,
      editorSidebarOpened = _ref.editorSidebarOpened,
      showIcon = _ref.showIcon;
  var url = attributes.url,
      label = attributes.label,
      linkTarget = attributes.linkTarget,
      rel = attributes.rel;

  var _useState = useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      urlInputValue = _useState2[0],
      setUrlInputValue = _useState2[1];

  var _useState3 = useState(''),
      _useState4 = _slicedToArray(_useState3, 2),
      labelInputValue = _useState4[0],
      setLabelInputValue = _useState4[1];

  var _useState5 = useState(''),
      _useState6 = _slicedToArray(_useState5, 2),
      linkRelInputValue = _useState6[0],
      setLinkRelInputValue = _useState6[1];

  var prevEditorSidebarOpenedRef = useRef();
  useEffect(function () {
    prevEditorSidebarOpenedRef.current = editorSidebarOpened;
  });
  var prevEditorSidebarOpened = prevEditorSidebarOpenedRef.current;
  useEffect(function () {
    setUrlInputValue(url || '');
  }, [url]);
  useEffect(function () {
    setLabelInputValue(label || '');
  }, [label]);
  useEffect(function () {
    setLinkRelInputValue(rel || '');
  }, [rel]);
  useEffect(function () {
    var isSettingSheetOpen = isVisible || editorSidebarOpened;

    if (options.url.autoFill && isSettingSheetOpen && !url) {
      getURLFromClipboard();
    }

    if (prevEditorSidebarOpened && !editorSidebarOpened) {
      onSetAttributes();
    }
  }, [editorSidebarOpened, isVisible]);

  function onChangeURL(value) {
    if (!value && onEmptyURL) {
      onEmptyURL();
    }

    setUrlInputValue(value);
  }

  function onChangeLabel(value) {
    setLabelInputValue(value);
  }

  function onSetAttributes() {
    setAttributes({
      url: prependHTTP(urlInputValue),
      label: labelInputValue,
      rel: linkRelInputValue
    });
  }

  function onCloseSettingsSheet() {
    onSetAttributes();
    onClose();
  }

  function onChangeOpenInNewTab(value) {
    var newLinkTarget = value ? '_blank' : undefined;
    var updatedRel = rel;

    if (newLinkTarget && !rel) {
      updatedRel = NEW_TAB_REL;
    } else if (!newLinkTarget && rel === NEW_TAB_REL) {
      updatedRel = undefined;
    }

    setAttributes({
      linkTarget: newLinkTarget,
      rel: updatedRel
    });
  }

  function onChangeLinkRel(value) {
    setLinkRelInputValue(value);
  }

  function getURLFromClipboard() {
    return _getURLFromClipboard.apply(this, arguments);
  }

  function _getURLFromClipboard() {
    _getURLFromClipboard = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var clipboardText;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return Clipboard.getString();

            case 2:
              clipboardText = _context.sent;

              if (clipboardText) {
                _context.next = 5;
                break;
              }

              return _context.abrupt("return");

            case 5:
              if (isURL(clipboardText)) {
                _context.next = 7;
                break;
              }

              return _context.abrupt("return");

            case 7:
              setAttributes({
                url: clipboardText
              });

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _getURLFromClipboard.apply(this, arguments);
  }

  function getSettings() {
    return createElement(Fragment, null, options.url && createElement(TextControl, {
      icon: showIcon && link,
      label: options.url.label,
      value: urlInputValue,
      valuePlaceholder: options.url.placeholder,
      onChange: onChangeURL,
      onSubmit: onCloseSettingsSheet,
      autoCapitalize: "none",
      autoCorrect: false // eslint-disable-next-line jsx-a11y/no-autofocus
      ,
      autoFocus: Platform.OS === 'ios' && options.url.autoFocus,
      keyboardType: "url"
    }), options.linkLabel && createElement(TextControl, {
      label: options.linkLabel.label,
      value: labelInputValue,
      valuePlaceholder: options.linkLabel.placeholder,
      onChange: onChangeLabel
    }), options.openInNewTab && createElement(ToggleControl, {
      icon: showIcon && external,
      label: options.openInNewTab.label,
      checked: linkTarget === '_blank',
      onChange: onChangeOpenInNewTab
    }), options.linkRel && createElement(TextControl, {
      icon: showIcon && LinkRelIcon,
      label: options.linkRel.label,
      value: linkRelInputValue,
      valuePlaceholder: options.linkRel.placeholder,
      onChange: onChangeLinkRel,
      onSubmit: onCloseSettingsSheet,
      autoCapitalize: "none",
      autoCorrect: false,
      keyboardType: "url"
    }));
  }

  if (!withBottomSheet) {
    return getSettings();
  }

  return createElement(BottomSheet, {
    isVisible: isVisible,
    onClose: onCloseSettingsSheet,
    hideHeader: true
  }, createElement(PanelBody, {
    style: styles.linkSettingsPanel
  }, getSettings()), options.footer && createElement(PanelBody, {
    style: styles.linkSettingsPanel
  }, createElement(UnsupportedFooterControl, {
    label: options.footer.label
  })), actions && createElement(PanelActions, {
    actions: actions
  }));
}

export default compose([withSelect(function (select) {
  var _select = select('core/edit-post'),
      isEditorSidebarOpened = _select.isEditorSidebarOpened;

  return {
    editorSidebarOpened: isEditorSidebarOpened()
  };
})])(LinkSettings);
//# sourceMappingURL=index.native.js.map