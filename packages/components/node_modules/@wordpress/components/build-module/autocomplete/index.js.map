{"version":3,"sources":["@wordpress/components/src/autocomplete/index.js"],"names":["classnames","escapeRegExp","find","map","debounce","deburr","Component","renderToString","useLayoutEffect","useState","ENTER","ESCAPE","UP","DOWN","LEFT","RIGHT","__","_n","sprintf","withInstanceId","compose","create","slice","insert","isCollapsed","getTextContent","Button","Popover","withSpokenMessages","filterOptions","search","options","maxResults","filtered","i","length","option","keywords","label","isMatch","some","keyword","test","push","getRange","selection","window","getSelection","rangeCount","getRangeAt","getAutoCompleterUI","autocompleter","useItems","filterValue","items","setItems","isDebounced","loadOptions","promise","Promise","resolve","then","optionsData","canceled","keyedOptions","optionData","optionIndex","key","name","value","getOptionLabel","getOptionKeywords","isDisabled","isOptionDisabled","RegExp","cancel","AutocompleterUI","instanceId","listBoxId","className","selectedIndex","onChangeOptions","onSelect","onReset","index","Autocomplete","filteredOptions","arguments","select","bind","reset","handleKeyDown","state","constructor","getInitialState","replacement","props","record","onChange","end","start","triggerPrefix","toInsert","html","onReplace","getOptionCompletion","completion","undefined","action","insertCompletion","setState","debouncedSpeak","announce","event","nextSelectedIndex","keyCode","preventDefault","stopPropagation","prevProps","completers","prevRecord","text","prevText","textAfterSelection","allowContext","lastIndexOf","safeTrigger","match","query","children","isSelected","selectedKey","isExpanded","activeId","onKeyDown"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\nimport { escapeRegExp, find, map, debounce, deburr } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tComponent,\n\trenderToString,\n\tuseLayoutEffect,\n\tuseState,\n} from '@wordpress/element';\nimport { ENTER, ESCAPE, UP, DOWN, LEFT, RIGHT } from '@wordpress/keycodes';\nimport { __, _n, sprintf } from '@wordpress/i18n';\nimport { withInstanceId, compose } from '@wordpress/compose';\nimport {\n\tcreate,\n\tslice,\n\tinsert,\n\tisCollapsed,\n\tgetTextContent,\n} from '@wordpress/rich-text';\n\n/**\n * Internal dependencies\n */\nimport Button from '../button';\nimport Popover from '../popover';\nimport withSpokenMessages from '../higher-order/with-spoken-messages';\n\n/**\n * A raw completer option.\n *\n * @typedef {*} CompleterOption\n */\n\n/**\n * @callback FnGetOptions\n *\n * @return {(CompleterOption[]|Promise.<CompleterOption[]>)} The completer options or a promise for them.\n */\n\n/**\n * @callback FnGetOptionKeywords\n * @param {CompleterOption} option a completer option.\n *\n * @return {string[]} list of key words to search.\n */\n\n/**\n * @callback FnIsOptionDisabled\n * @param {CompleterOption} option a completer option.\n *\n * @return {string[]} whether or not the given option is disabled.\n */\n\n/**\n * @callback FnGetOptionLabel\n * @param {CompleterOption} option a completer option.\n *\n * @return {(string|Array.<(string|Component)>)} list of react components to render.\n */\n\n/**\n * @callback FnAllowContext\n * @param {string} before the string before the auto complete trigger and query.\n * @param {string} after  the string after the autocomplete trigger and query.\n *\n * @return {boolean} true if the completer can handle.\n */\n\n/**\n * @typedef {Object} OptionCompletion\n * @property {'insert-at-caret'|'replace'} action the intended placement of the completion.\n * @property {OptionCompletionValue} value the completion value.\n */\n\n/**\n * A completion value.\n *\n * @typedef {(string|WPElement|Object)} OptionCompletionValue\n */\n\n/**\n * @callback FnGetOptionCompletion\n * @param {CompleterOption} value the value of the completer option.\n * @param {string} query the text value of the autocomplete query.\n *\n * @return {(OptionCompletion|OptionCompletionValue)} the completion for the given option. If an\n * \t\t\t\t\t\t\t\t\t\t\t\t\t   OptionCompletionValue is returned, the\n * \t\t\t\t\t\t\t\t\t\t\t\t\t   completion action defaults to `insert-at-caret`.\n */\n\n/**\n * @typedef {Object} WPCompleter\n * @property {string} name a way to identify a completer, useful for selective overriding.\n * @property {?string} className A class to apply to the popup menu.\n * @property {string} triggerPrefix the prefix that will display the menu.\n * @property {(CompleterOption[]|FnGetOptions)} options the completer options or a function to get them.\n * @property {?FnGetOptionKeywords} getOptionKeywords get the keywords for a given option.\n * @property {?FnIsOptionDisabled} isOptionDisabled get whether or not the given option is disabled.\n * @property {FnGetOptionLabel} getOptionLabel get the label for a given option.\n * @property {?FnAllowContext} allowContext filter the context under which the autocomplete activates.\n * @property {FnGetOptionCompletion} getOptionCompletion get the completion associated with a given option.\n */\n\nfunction filterOptions( search, options = [], maxResults = 10 ) {\n\tconst filtered = [];\n\tfor ( let i = 0; i < options.length; i++ ) {\n\t\tconst option = options[ i ];\n\n\t\t// Merge label into keywords\n\t\tlet { keywords = [] } = option;\n\t\tif ( 'string' === typeof option.label ) {\n\t\t\tkeywords = [ ...keywords, option.label ];\n\t\t}\n\n\t\tconst isMatch = keywords.some( ( keyword ) =>\n\t\t\tsearch.test( deburr( keyword ) )\n\t\t);\n\t\tif ( ! isMatch ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tfiltered.push( option );\n\n\t\t// Abort early if max reached\n\t\tif ( filtered.length === maxResults ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn filtered;\n}\n\nfunction getRange() {\n\tconst selection = window.getSelection();\n\treturn selection.rangeCount ? selection.getRangeAt( 0 ) : null;\n}\n\nconst getAutoCompleterUI = ( autocompleter ) => {\n\tconst useItems = autocompleter.useItems\n\t\t? autocompleter.useItems\n\t\t: ( filterValue ) => {\n\t\t\t\tconst [ items, setItems ] = useState( [] );\n\t\t\t\t/*\n\t\t\t\t * We support both synchronous and asynchronous retrieval of completer options\n\t\t\t\t * but internally treat all as async so we maintain a single, consistent code path.\n\t\t\t\t *\n\t\t\t\t * Because networks can be slow, and the internet is wonderfully unpredictable,\n\t\t\t\t * we don't want two promises updating the state at once. This ensures that only\n\t\t\t\t * the most recent promise will act on `optionsData`. This doesn't use the state\n\t\t\t\t * because `setState` is batched, and so there's no guarantee that setting\n\t\t\t\t * `activePromise` in the state would result in it actually being in `this.state`\n\t\t\t\t * before the promise resolves and we check to see if this is the active promise or not.\n\t\t\t\t */\n\t\t\t\tuseLayoutEffect( () => {\n\t\t\t\t\tconst { options, isDebounced } = autocompleter;\n\t\t\t\t\tconst loadOptions = debounce(\n\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\tconst promise = Promise.resolve(\n\t\t\t\t\t\t\t\ttypeof options === 'function'\n\t\t\t\t\t\t\t\t\t? options( filterValue )\n\t\t\t\t\t\t\t\t\t: options\n\t\t\t\t\t\t\t).then( ( optionsData ) => {\n\t\t\t\t\t\t\t\tif ( promise.canceled ) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconst keyedOptions = optionsData.map(\n\t\t\t\t\t\t\t\t\t( optionData, optionIndex ) => ( {\n\t\t\t\t\t\t\t\t\t\tkey: `${ autocompleter.name }-${ optionIndex }`,\n\t\t\t\t\t\t\t\t\t\tvalue: optionData,\n\t\t\t\t\t\t\t\t\t\tlabel: autocompleter.getOptionLabel(\n\t\t\t\t\t\t\t\t\t\t\toptionData\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\tkeywords: autocompleter.getOptionKeywords\n\t\t\t\t\t\t\t\t\t\t\t? autocompleter.getOptionKeywords(\n\t\t\t\t\t\t\t\t\t\t\t\t\toptionData\n\t\t\t\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t\t\t\t: [],\n\t\t\t\t\t\t\t\t\t\tisDisabled: autocompleter.isOptionDisabled\n\t\t\t\t\t\t\t\t\t\t\t? autocompleter.isOptionDisabled(\n\t\t\t\t\t\t\t\t\t\t\t\t\toptionData\n\t\t\t\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t\t\t\t: false,\n\t\t\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t// create a regular expression to filter the options\n\t\t\t\t\t\t\t\tconst search = new RegExp(\n\t\t\t\t\t\t\t\t\t'(?:\\\\b|\\\\s|^)' +\n\t\t\t\t\t\t\t\t\t\tescapeRegExp( filterValue ),\n\t\t\t\t\t\t\t\t\t'i'\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tsetItems(\n\t\t\t\t\t\t\t\t\tfilterOptions( search, keyedOptions )\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\treturn promise;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tisDebounced ? 250 : 0\n\t\t\t\t\t);\n\n\t\t\t\t\tconst promise = loadOptions();\n\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tloadOptions.cancel();\n\t\t\t\t\t\tif ( promise ) {\n\t\t\t\t\t\t\tpromise.canceled = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}, [ filterValue ] );\n\n\t\t\t\treturn [ items ];\n\t\t  };\n\n\tfunction AutocompleterUI( {\n\t\tfilterValue,\n\t\tinstanceId,\n\t\tlistBoxId,\n\t\tclassName,\n\t\tselectedIndex,\n\t\tonChangeOptions,\n\t\tonSelect,\n\t\tonReset,\n\t} ) {\n\t\tconst [ items ] = useItems( filterValue );\n\t\tuseLayoutEffect( () => {\n\t\t\tonChangeOptions( items );\n\t\t}, [ items ] );\n\n\t\tif ( ! items.length > 0 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn (\n\t\t\t<Popover\n\t\t\t\tfocusOnMount={ false }\n\t\t\t\tonClose={ onReset }\n\t\t\t\tposition=\"top right\"\n\t\t\t\tclassName=\"components-autocomplete__popover\"\n\t\t\t\tanchorRef={ getRange() }\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\tid={ listBoxId }\n\t\t\t\t\trole=\"listbox\"\n\t\t\t\t\tclassName=\"components-autocomplete__results\"\n\t\t\t\t>\n\t\t\t\t\t{ map( items, ( option, index ) => (\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tkey={ option.key }\n\t\t\t\t\t\t\tid={ `components-autocomplete-item-${ instanceId }-${ option.key }` }\n\t\t\t\t\t\t\trole=\"option\"\n\t\t\t\t\t\t\taria-selected={ index === selectedIndex }\n\t\t\t\t\t\t\tdisabled={ option.isDisabled }\n\t\t\t\t\t\t\tclassName={ classnames(\n\t\t\t\t\t\t\t\t'components-autocomplete__result',\n\t\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t'is-selected': index === selectedIndex,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\tonClick={ () => onSelect( option ) }\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{ option.label }\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t) ) }\n\t\t\t\t</div>\n\t\t\t</Popover>\n\t\t);\n\t}\n\n\treturn AutocompleterUI;\n};\n\nexport class Autocomplete extends Component {\n\tstatic getInitialState() {\n\t\treturn {\n\t\t\tselectedIndex: 0,\n\t\t\tfilteredOptions: [],\n\t\t\tfilterValue: '',\n\t\t\tautocompleter: null,\n\t\t\tAutocompleterUI: null,\n\t\t};\n\t}\n\n\tconstructor() {\n\t\tsuper( ...arguments );\n\n\t\tthis.select = this.select.bind( this );\n\t\tthis.reset = this.reset.bind( this );\n\t\tthis.onChangeOptions = this.onChangeOptions.bind( this );\n\t\tthis.handleKeyDown = this.handleKeyDown.bind( this );\n\n\t\tthis.state = this.constructor.getInitialState();\n\t}\n\n\tinsertCompletion( replacement ) {\n\t\tconst { autocompleter, filterValue } = this.state;\n\t\tconst { record, onChange } = this.props;\n\t\tconst end = record.start;\n\t\tconst start =\n\t\t\tend - autocompleter.triggerPrefix.length - filterValue.length;\n\t\tconst toInsert = create( { html: renderToString( replacement ) } );\n\n\t\tonChange( insert( record, toInsert, start, end ) );\n\t}\n\n\tselect( option ) {\n\t\tconst { onReplace } = this.props;\n\t\tconst { autocompleter, filterValue } = this.state;\n\t\tconst { getOptionCompletion } = autocompleter || {};\n\n\t\tif ( option.isDisabled ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( getOptionCompletion ) {\n\t\t\tconst completion = getOptionCompletion( option.value, filterValue );\n\n\t\t\tconst { action, value } =\n\t\t\t\tundefined === completion.action ||\n\t\t\t\tundefined === completion.value\n\t\t\t\t\t? { action: 'insert-at-caret', value: completion }\n\t\t\t\t\t: completion;\n\n\t\t\tif ( 'replace' === action ) {\n\t\t\t\tonReplace( [ value ] );\n\t\t\t} else if ( 'insert-at-caret' === action ) {\n\t\t\t\tthis.insertCompletion( value );\n\t\t\t}\n\t\t}\n\n\t\t// Reset autocomplete state after insertion rather than before\n\t\t// so insertion events don't cause the completion menu to redisplay.\n\t\tthis.reset();\n\t}\n\n\treset() {\n\t\tthis.setState( this.constructor.getInitialState() );\n\t}\n\n\tannounce( filteredOptions ) {\n\t\tconst { debouncedSpeak } = this.props;\n\t\tif ( ! debouncedSpeak ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( !! filteredOptions.length ) {\n\t\t\tdebouncedSpeak(\n\t\t\t\tsprintf(\n\t\t\t\t\t/* translators: %d: number of results. */\n\t\t\t\t\t_n(\n\t\t\t\t\t\t'%d result found, use up and down arrow keys to navigate.',\n\t\t\t\t\t\t'%d results found, use up and down arrow keys to navigate.',\n\t\t\t\t\t\tfilteredOptions.length\n\t\t\t\t\t),\n\t\t\t\t\tfilteredOptions.length\n\t\t\t\t),\n\t\t\t\t'assertive'\n\t\t\t);\n\t\t} else {\n\t\t\tdebouncedSpeak( __( 'No results.' ), 'assertive' );\n\t\t}\n\t}\n\n\t/**\n\t * Load options for an autocompleter.\n\t *\n\t * @param {Array} filteredOptions\n\t */\n\tonChangeOptions( filteredOptions ) {\n\t\tconst selectedIndex =\n\t\t\tfilteredOptions.length === this.state.filteredOptions.length\n\t\t\t\t? this.state.selectedIndex\n\t\t\t\t: 0;\n\t\tthis.setState( {\n\t\t\tfilteredOptions,\n\t\t\tselectedIndex,\n\t\t} );\n\t\tthis.announce( filteredOptions );\n\t}\n\n\thandleKeyDown( event ) {\n\t\tconst { autocompleter, selectedIndex, filteredOptions } = this.state;\n\t\tif ( ! autocompleter ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( filteredOptions.length === 0 ) {\n\t\t\treturn;\n\t\t}\n\t\tlet nextSelectedIndex;\n\t\tswitch ( event.keyCode ) {\n\t\t\tcase UP:\n\t\t\t\tnextSelectedIndex =\n\t\t\t\t\t( selectedIndex === 0\n\t\t\t\t\t\t? filteredOptions.length\n\t\t\t\t\t\t: selectedIndex ) - 1;\n\t\t\t\tthis.setState( { selectedIndex: nextSelectedIndex } );\n\t\t\t\tbreak;\n\n\t\t\tcase DOWN:\n\t\t\t\tnextSelectedIndex =\n\t\t\t\t\t( selectedIndex + 1 ) % filteredOptions.length;\n\t\t\t\tthis.setState( { selectedIndex: nextSelectedIndex } );\n\t\t\t\tbreak;\n\n\t\t\tcase ESCAPE:\n\t\t\t\tthis.setState( { autocompleter: null, AutocompleterUI: null } );\n\t\t\t\tbreak;\n\n\t\t\tcase ENTER:\n\t\t\t\tthis.select( filteredOptions[ selectedIndex ] );\n\t\t\t\tbreak;\n\n\t\t\tcase LEFT:\n\t\t\tcase RIGHT:\n\t\t\t\tthis.reset();\n\t\t\t\treturn;\n\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\n\t\t// Any handled keycode should prevent original behavior. This relies on\n\t\t// the early return in the default case.\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\t}\n\n\tcomponentDidUpdate( prevProps ) {\n\t\tconst { record, completers } = this.props;\n\t\tconst { record: prevRecord } = prevProps;\n\n\t\tif ( isCollapsed( record ) ) {\n\t\t\tconst text = deburr( getTextContent( slice( record, 0 ) ) );\n\t\t\tconst prevText = deburr( getTextContent( slice( prevRecord, 0 ) ) );\n\n\t\t\tif ( text !== prevText ) {\n\t\t\t\tconst textAfterSelection = getTextContent(\n\t\t\t\t\tslice( record, undefined, getTextContent( record ).length )\n\t\t\t\t);\n\t\t\t\tconst autocompleter = find(\n\t\t\t\t\tcompleters,\n\t\t\t\t\t( { triggerPrefix, allowContext } ) => {\n\t\t\t\t\t\tconst index = text.lastIndexOf( triggerPrefix );\n\n\t\t\t\t\t\tif ( index === -1 ) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tallowContext &&\n\t\t\t\t\t\t\t! allowContext(\n\t\t\t\t\t\t\t\ttext.slice( 0, index ),\n\t\t\t\t\t\t\t\ttextAfterSelection\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn /^\\S*$/.test(\n\t\t\t\t\t\t\ttext.slice( index + triggerPrefix.length )\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tif ( ! autocompleter ) {\n\t\t\t\t\tthis.reset();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst safeTrigger = escapeRegExp( autocompleter.triggerPrefix );\n\t\t\t\tconst match = text.match(\n\t\t\t\t\tnew RegExp( `${ safeTrigger }(\\\\S*)$` )\n\t\t\t\t);\n\t\t\t\tconst query = match && match[ 1 ];\n\t\t\t\tthis.setState( {\n\t\t\t\t\tautocompleter,\n\t\t\t\t\tAutocompleterUI:\n\t\t\t\t\t\tautocompleter !== this.state.autocompleter\n\t\t\t\t\t\t\t? getAutoCompleterUI( autocompleter )\n\t\t\t\t\t\t\t: this.state.AutocompleterUI,\n\t\t\t\t\tfilterValue: query,\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { children, instanceId, isSelected } = this.props;\n\t\tconst {\n\t\t\tautocompleter,\n\t\t\tselectedIndex,\n\t\t\tfilteredOptions,\n\t\t\tAutocompleterUI,\n\t\t\tfilterValue,\n\t\t} = this.state;\n\t\tconst { key: selectedKey = '' } =\n\t\t\tfilteredOptions[ selectedIndex ] || {};\n\t\tconst { className } = autocompleter || {};\n\t\tconst isExpanded = !! autocompleter && filteredOptions.length > 0;\n\t\tconst listBoxId = isExpanded\n\t\t\t? `components-autocomplete-listbox-${ instanceId }`\n\t\t\t: null;\n\t\tconst activeId = isExpanded\n\t\t\t? `components-autocomplete-item-${ instanceId }-${ selectedKey }`\n\t\t\t: null;\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{ children( {\n\t\t\t\t\tisExpanded,\n\t\t\t\t\tlistBoxId,\n\t\t\t\t\tactiveId,\n\t\t\t\t\tonKeyDown: this.handleKeyDown,\n\t\t\t\t} ) }\n\t\t\t\t{ isSelected && AutocompleterUI && (\n\t\t\t\t\t<AutocompleterUI\n\t\t\t\t\t\tclassName={ className }\n\t\t\t\t\t\tfilterValue={ filterValue }\n\t\t\t\t\t\tinstanceId={ instanceId }\n\t\t\t\t\t\tlistBoxId={ listBoxId }\n\t\t\t\t\t\tselectedIndex={ selectedIndex }\n\t\t\t\t\t\tonChangeOptions={ this.onChangeOptions }\n\t\t\t\t\t\tonSelect={ this.select }\n\t\t\t\t\t\tonReset={ this.onReset }\n\t\t\t\t\t/>\n\t\t\t\t) }\n\t\t\t</>\n\t\t);\n\t}\n}\n\nexport default compose( [ withSpokenMessages, withInstanceId ] )(\n\tAutocomplete\n);\n"]}