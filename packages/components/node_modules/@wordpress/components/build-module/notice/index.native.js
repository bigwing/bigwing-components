import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import { Animated, Easing, Text, TouchableWithoutFeedback, View, Dimensions, Platform } from 'react-native';
import { BlurView } from '@react-native-community/blur';
/**
 * WordPress dependencies
 */

import { useEffect, useRef, useState } from '@wordpress/element';
import { usePreferredColorSchemeStyle } from '@wordpress/compose';
/**
 * Internal dependencies
 */

import styles from './style.scss';

var Notice = function Notice(_ref) {
  var onNoticeHidden = _ref.onNoticeHidden,
      content = _ref.content,
      id = _ref.id;

  var _useState = useState(Dimensions.get('window').width),
      _useState2 = _slicedToArray(_useState, 2),
      width = _useState2[0],
      setWidth = _useState2[1];

  var _useState3 = useState(true),
      _useState4 = _slicedToArray(_useState3, 2),
      visible = _useState4[0],
      setVisible = _useState4[1];

  var animationValue = useRef(new Animated.Value(0)).current;
  var timer = useRef(null);
  var isIOS = Platform.OS === 'ios';

  var onDimensionsChange = function onDimensionsChange() {
    setWidth(Dimensions.get('window').width);
  };

  useEffect(function () {
    Dimensions.addEventListener('change', onDimensionsChange);
    return function () {
      Dimensions.removeEventListener('change', onDimensionsChange);
    };
  }, []);
  useEffect(function () {
    startAnimation();
    return function () {
      clearTimeout(timer === null || timer === void 0 ? void 0 : timer.current);
    };
  }, [visible, id]);

  var onHide = function onHide() {
    setVisible(false);
  };

  var startAnimation = function startAnimation() {
    Animated.timing(animationValue, {
      toValue: visible ? 1 : 0,
      duration: visible ? 300 : 150,
      useNativeDriver: true,
      easing: Easing.out(Easing.quad)
    }).start(function () {
      if (visible && onNoticeHidden) {
        timer.current = setTimeout(function () {
          onHide();
        }, 3000);
      }

      if (!visible && onNoticeHidden) {
        onNoticeHidden(id);
      }
    });
  };

  var noticeSolidStyles = usePreferredColorSchemeStyle(styles.noticeSolid, styles.noticeSolidDark);
  var textStyles = usePreferredColorSchemeStyle(styles.text, styles.textDark);
  return createElement(Fragment, null, createElement(Animated.View, {
    style: [styles.notice, !isIOS && noticeSolidStyles, {
      width: width,
      transform: [{
        translateY: animationValue.interpolate({
          inputRange: [0, 1],
          outputRange: [-24, 0]
        })
      }]
    }]
  }, createElement(TouchableWithoutFeedback, {
    onPress: onHide
  }, createElement(View, {
    style: styles.noticeContent
  }, createElement(Text, {
    style: textStyles
  }, content))), isIOS && createElement(BlurView, {
    style: styles.blurBackground,
    blurType: "prominent",
    blurAmount: 10
  })));
};

export default Notice;
//# sourceMappingURL=index.native.js.map