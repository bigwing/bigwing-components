import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import { createElement } from "@wordpress/element";

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/**
 * External dependencies
 */
import { View } from 'react-native';
/**
 * WordPress dependencies
 */

import { Component } from '@wordpress/element';
import { withDispatch, withSelect } from '@wordpress/data';
import { compose } from '@wordpress/compose';
/**
 * Internal dependencies
 */

import Notice from './';
import styles from './style.scss';

var NoticeList = /*#__PURE__*/function (_Component) {
  _inherits(NoticeList, _Component);

  var _super = _createSuper(NoticeList);

  function NoticeList() {
    var _this;

    _classCallCheck(this, NoticeList);

    _this = _super.apply(this, arguments);
    _this.removeNotice = _this.removeNotice.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(NoticeList, [{
    key: "removeNotice",
    value: function removeNotice(id) {
      var removeNotice = this.props.removeNotice;
      removeNotice(id);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          notices = _this$props.notices,
          shouldStack = _this$props.shouldStack;

      if (!notices.length) {
        return null;
      }

      return createElement(View, {
        style: styles.list,
        key: notices.lenght
      }, shouldStack ? notices.reverse().map(function (notice) {
        return createElement(Notice, _extends({}, notice, {
          key: notice.id,
          onNoticeHidden: _this2.removeNotice
        }));
      }) : createElement(Notice, _extends({}, notices[notices.length - 1], {
        onNoticeHidden: this.removeNotice
      })));
    }
  }]);

  return NoticeList;
}(Component);

export default compose([withSelect(function (select) {
  var _select = select('core/editor'),
      getNotices = _select.getNotices;

  return {
    notices: getNotices()
  };
}), withDispatch(function (dispatch) {
  var _dispatch = dispatch('core/editor'),
      removeNotice = _dispatch.removeNotice,
      removeAllNotices = _dispatch.removeAllNotices;

  return {
    removeNotice: removeNotice,
    removeAllNotices: removeAllNotices
  };
})])(NoticeList);
//# sourceMappingURL=list.native.js.map