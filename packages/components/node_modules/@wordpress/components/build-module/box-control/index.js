import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * External dependencies
 */
import { noop } from 'lodash';
/**
 * WordPress dependencies
 */

import { useInstanceId } from '@wordpress/compose';
import { useState } from '@wordpress/element';
import { __ } from '@wordpress/i18n';
/**
 * Internal dependencies
 */

import Button from '../button';
import { FlexItem, FlexBlock } from '../flex';
import AllInputControl from './all-input-control';
import InputControls from './input-controls';
import BoxControlIcon from './icon';
import Text from '../text';
import LinkedButton from './linked-button';
import Visualizer from './visualizer';
import { Root, Header, HeaderControlWrapper } from './styles/box-control-styles';
import { DEFAULT_VALUES, DEFAULT_VISUALIZER_VALUES, isValuesMixed, isValuesDefined } from './utils';
import { useControlledState } from '../utils/hooks';
var defaultInputProps = {
  min: 0
};

function useUniqueId(idProp) {
  var instanceId = useInstanceId(BoxControl, 'inspector-box-control');
  return idProp || instanceId;
}

export default function BoxControl(_ref) {
  var idProp = _ref.id,
      _ref$inputProps = _ref.inputProps,
      inputProps = _ref$inputProps === void 0 ? defaultInputProps : _ref$inputProps,
      _ref$onChange = _ref.onChange,
      onChange = _ref$onChange === void 0 ? noop : _ref$onChange,
      _ref$onChangeShowVisu = _ref.onChangeShowVisualizer,
      onChangeShowVisualizer = _ref$onChangeShowVisu === void 0 ? noop : _ref$onChangeShowVisu,
      _ref$label = _ref.label,
      label = _ref$label === void 0 ? __('Box Control') : _ref$label,
      valuesProp = _ref.values,
      units = _ref.units;

  var _useControlledState = useControlledState(valuesProp),
      _useControlledState2 = _slicedToArray(_useControlledState, 2),
      values = _useControlledState2[0],
      setValues = _useControlledState2[1];

  var inputValues = values || DEFAULT_VALUES;
  var hasInitialValue = isValuesDefined(valuesProp);

  var _useState = useState(hasInitialValue),
      _useState2 = _slicedToArray(_useState, 2),
      isDirty = _useState2[0],
      setIsDirty = _useState2[1];

  var _useState3 = useState(!hasInitialValue || !isValuesMixed(inputValues)),
      _useState4 = _slicedToArray(_useState3, 2),
      isLinked = _useState4[0],
      setIsLinked = _useState4[1];

  var _useState5 = useState(isLinked ? 'all' : 'top'),
      _useState6 = _slicedToArray(_useState5, 2),
      side = _useState6[0],
      setSide = _useState6[1];

  var id = useUniqueId(idProp);
  var headingId = "".concat(id, "-heading");

  var toggleLinked = function toggleLinked() {
    setIsLinked(!isLinked);
    setSide(!isLinked ? 'all' : 'top');
  };

  var handleOnFocus = function handleOnFocus(event, _ref2) {
    var nextSide = _ref2.side;
    setSide(nextSide);
  };

  var handleOnChange = function handleOnChange(nextValues) {
    onChange(nextValues);
    setValues(nextValues);
    setIsDirty(true);
  };

  var handleOnHoverOn = function handleOnHoverOn() {
    var next = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    onChangeShowVisualizer(_objectSpread({}, DEFAULT_VISUALIZER_VALUES, {}, next));
  };

  var handleOnHoverOff = function handleOnHoverOff() {
    var next = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    onChangeShowVisualizer(_objectSpread({}, DEFAULT_VISUALIZER_VALUES, {}, next));
  };

  var handleOnReset = function handleOnReset() {
    var initialValues = DEFAULT_VALUES;
    onChange(initialValues);
    setValues(initialValues);
    setIsDirty(false);
  };

  var inputControlProps = _objectSpread({}, inputProps, {
    onChange: handleOnChange,
    onFocus: handleOnFocus,
    onHoverOn: handleOnHoverOn,
    onHoverOff: handleOnHoverOff,
    isLinked: isLinked,
    units: units,
    values: inputValues
  });

  return createElement(Root, {
    id: id,
    role: "region",
    "aria-labelledby": headingId
  }, createElement(Header, {
    className: "component-box-control__header"
  }, createElement(FlexItem, null, createElement(Text, {
    id: headingId,
    className: "component-box-control__label"
  }, label)), createElement(FlexItem, null, createElement(Button, {
    className: "component-box-control__reset-button",
    isSecondary: true,
    isSmall: true,
    onClick: handleOnReset,
    disabled: !isDirty
  }, __('Reset')))), createElement(HeaderControlWrapper, {
    className: "component-box-control__header-control-wrapper"
  }, createElement(FlexItem, null, createElement(BoxControlIcon, {
    side: side
  })), isLinked && createElement(FlexBlock, null, createElement(AllInputControl, inputControlProps)), createElement(FlexItem, null, createElement(LinkedButton, {
    onClick: toggleLinked,
    isLinked: isLinked
  }))), !isLinked && createElement(InputControls, inputControlProps));
}
BoxControl.__Visualizer = Visualizer;
//# sourceMappingURL=index.js.map