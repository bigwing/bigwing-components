/**
 * External dependencies
 */
import { isEmpty, isNumber } from 'lodash';
/**
 * WordPress dependencies
 */

import { __ } from '@wordpress/i18n';
/**
 * Internal dependencies
 */

import { parseUnit } from '../unit-control/utils';
export var LABELS = {
  all: __('All'),
  top: __('Top'),
  bottom: __('Bottom'),
  left: __('Left'),
  right: __('Right'),
  mixed: __('Mixed')
};
export var DEFAULT_VALUES = {
  top: null,
  right: null,
  bottom: null,
  left: null
};
export var DEFAULT_VISUALIZER_VALUES = {
  top: false,
  right: false,
  bottom: false,
  left: false
};
/**
 * Gets an items with the most occurance within an array
 * https://stackoverflow.com/a/20762713
 *
 * @param {Array<any>} arr Array of items to check.
 * @return {any} The item with the most occurances.
 */

function mode(arr) {
  return arr.sort(function (a, b) {
    return arr.filter(function (v) {
      return v === a;
    }).length - arr.filter(function (v) {
      return v === b;
    }).length;
  }).pop();
}
/**
 * Gets the 'all' input value and unit from values data.
 *
 * @param {Object} values Box values.
 * @return {string} A value + unit for the 'all' input.
 */


export function getAllValue() {
  var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var parsedValues = Object.values(values).map(parseUnit);
  var allValues = parsedValues.map(function (value) {
    return value[0];
  });
  var allUnits = parsedValues.map(function (value) {
    return value[1];
  });
  var value = allValues.every(function (v) {
    return v === allValues[0];
  }) ? allValues[0] : '';
  var unit = mode(allUnits);
  /**
   * The isNumber check is important. On reset actions, the incoming value
   * may be null or an empty string.
   *
   * Also, the value may also be zero (0), which is considered a valid unit value.
   *
   * isNumber() is more specific for these cases, rather than relying on a
   * simple truthy check.
   */

  var allValue = isNumber(value) ? "".concat(value).concat(unit) : null;
  return allValue;
}
/**
 * Checks to determine if values are mixed.
 *
 * @param {Object} values Box values.
 * @return {boolean} Whether values are mixed.
 */

export function isValuesMixed() {
  var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var allValue = getAllValue(values);
  var isMixed = isNaN(parseFloat(allValue));
  return isMixed;
}
/**
 * Checks to determine if values are defined.
 *
 * @param {Object} values Box values.
 *
 * @return {boolean} Whether values are mixed.
 */

export function isValuesDefined(values) {
  return values !== undefined && !isEmpty(Object.values(values).filter(Boolean));
}
//# sourceMappingURL=utils.js.map