import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { noop } from 'lodash';
import { useHover } from 'react-use-gesture';
/**
 * Internal dependencies
 */

import BaseTooltip from '../tooltip';
import { UnitControlWrapper, UnitControl } from './styles/box-control-styles';
export default function BoxUnitControl(_ref) {
  var isFirst = _ref.isFirst,
      isLast = _ref.isLast,
      isOnly = _ref.isOnly,
      _ref$onHoverOn = _ref.onHoverOn,
      onHoverOn = _ref$onHoverOn === void 0 ? noop : _ref$onHoverOn,
      _ref$onHoverOff = _ref.onHoverOff,
      onHoverOff = _ref$onHoverOff === void 0 ? noop : _ref$onHoverOff,
      label = _ref.label,
      value = _ref.value,
      props = _objectWithoutProperties(_ref, ["isFirst", "isLast", "isOnly", "onHoverOn", "onHoverOff", "label", "value"]);

  var bindHoverGesture = useHover(function (_ref2) {
    var event = _ref2.event,
        state = _objectWithoutProperties(_ref2, ["event"]);

    if (state.hovering) {
      onHoverOn(event, state);
    } else {
      onHoverOff(event, state);
    }
  });
  return createElement(UnitControlWrapper, _extends({
    "aria-label": label
  }, bindHoverGesture()), createElement(Tooltip, {
    text: label
  }, createElement(UnitControl, _extends({
    className: "component-box-control__unit-control",
    hideHTMLArrows: true,
    isFirst: isFirst,
    isLast: isLast,
    isOnly: isOnly,
    isPressEnterToChange: true,
    isFloatingLabel: true,
    isResetValueOnUnitChange: false,
    value: value
  }, props))));
}

function Tooltip(_ref3) {
  var children = _ref3.children,
      text = _ref3.text;
  if (!text) return children;
  return createElement(BaseTooltip, {
    text: text,
    position: "top"
  }, children);
}
//# sourceMappingURL=unit-control.js.map