{"version":3,"sources":["@wordpress/components/src/input-control/state.js"],"names":["isEmpty","useReducer","initialStateReducer","state","initialInputControlState","_event","error","initialValue","isDirty","isDragEnabled","isDragging","isPressEnterToChange","value","actionTypes","CHANGE","COMMIT","DRAG_END","DRAG_START","DRAG","INVALIDATE","PRESS_DOWN","PRESS_ENTER","PRESS_UP","RESET","UPDATE","inputControlActionTypes","mergeInitialState","initialState","composeStateReducers","fns","args","reduceRight","fn","fnState","inputControlStateReducer","composedStateReducers","action","nextState","type","payload","event","useInputControlStateReducer","stateReducer","dispatch","createChangeEvent","nextValue","persist","createKeyEvent","createDragEvent","dragProps","change","inValidate","reset","commit","update","dragStart","drag","dragEnd","pressUp","pressDown","pressEnter"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { isEmpty } from 'lodash';\n/**\n * WordPress dependencies\n */\nimport { useReducer } from '@wordpress/element';\n\nconst initialStateReducer = ( state ) => state;\n\nconst initialInputControlState = {\n\t_event: {},\n\terror: null,\n\tinitialValue: '',\n\tisDirty: false,\n\tisDragEnabled: false,\n\tisDragging: false,\n\tisPressEnterToChange: false,\n\tvalue: '',\n};\n\nconst actionTypes = {\n\tCHANGE: 'CHANGE',\n\tCOMMIT: 'COMMIT',\n\tDRAG_END: 'DRAG_END',\n\tDRAG_START: 'DRAG_START',\n\tDRAG: 'DRAG',\n\tINVALIDATE: 'INVALIDATE',\n\tPRESS_DOWN: 'PRESS_DOWN',\n\tPRESS_ENTER: 'PRESS_ENTER',\n\tPRESS_UP: 'PRESS_UP',\n\tRESET: 'RESET',\n\tUPDATE: 'UPDATE',\n};\n\nexport const inputControlActionTypes = actionTypes;\n\n/**\n * Prepares initialState for the reducer.\n *\n * @param {Object} initialState The initial state.\n * @return {Object} Prepared initialState for the reducer\n */\nfunction mergeInitialState( initialState = initialInputControlState ) {\n\tconst { value } = initialState;\n\n\treturn {\n\t\t...initialInputControlState,\n\t\t...initialState,\n\t\tinitialValue: value,\n\t};\n}\n\n/**\n * Composes multiple stateReducers into a single stateReducer, building\n * the pipeline to control the flow for state and actions.\n *\n * @param  {...Function} fns State reducers.\n * @return {Function} The single composed stateReducer.\n */\nexport const composeStateReducers = ( ...fns ) => {\n\treturn ( ...args ) => {\n\t\treturn fns.reduceRight( ( state, fn ) => {\n\t\t\tconst fnState = fn( ...args );\n\t\t\treturn isEmpty( fnState ) ? state : { ...state, ...fnState };\n\t\t}, {} );\n\t};\n};\n\n/**\n * Creates a reducer that opens the channel for external state subscription\n * and modification.\n *\n * This technique uses the \"stateReducer\" design pattern:\n * https://kentcdodds.com/blog/the-state-reducer-pattern/\n *\n * @param {Function} composedStateReducers A custom reducer that can subscribe and modify state.\n * @return {Function} The reducer.\n */\nfunction inputControlStateReducer( composedStateReducers ) {\n\treturn ( state, action ) => {\n\t\tconst nextState = { ...state };\n\t\tconst { type, payload } = action;\n\n\t\tswitch ( type ) {\n\t\t\t/**\n\t\t\t * Keyboard events\n\t\t\t */\n\t\t\tcase actionTypes.PRESS_UP:\n\t\t\t\tnextState.isDirty = false;\n\t\t\t\tbreak;\n\n\t\t\tcase actionTypes.PRESS_DOWN:\n\t\t\t\tnextState.isDirty = false;\n\t\t\t\tbreak;\n\n\t\t\t/**\n\t\t\t * Drag events\n\t\t\t */\n\t\t\tcase actionTypes.DRAG_START:\n\t\t\t\tnextState.isDragging = true;\n\t\t\t\tbreak;\n\n\t\t\tcase actionTypes.DRAG_END:\n\t\t\t\tnextState.isDragging = false;\n\t\t\t\tbreak;\n\n\t\t\t/**\n\t\t\t * Input events\n\t\t\t */\n\t\t\tcase actionTypes.CHANGE:\n\t\t\t\tnextState.error = null;\n\t\t\t\tnextState.value = payload.value;\n\n\t\t\t\tif ( state.isPressEnterToChange ) {\n\t\t\t\t\tnextState.isDirty = true;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase actionTypes.COMMIT:\n\t\t\t\tnextState.value = payload.value;\n\t\t\t\tnextState.isDirty = false;\n\t\t\t\tbreak;\n\n\t\t\tcase actionTypes.RESET:\n\t\t\t\tnextState.error = null;\n\t\t\t\tnextState.isDirty = false;\n\t\t\t\tnextState.value = payload.value || state.initialValue;\n\t\t\t\tbreak;\n\n\t\t\tcase actionTypes.UPDATE:\n\t\t\t\tif ( payload.value !== state.value ) {\n\t\t\t\t\tnextState.value = payload.value;\n\t\t\t\t\tnextState.isDirty = false;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t/**\n\t\t\t * Validation\n\t\t\t */\n\t\t\tcase actionTypes.INVALIDATE:\n\t\t\t\tnextState.error = payload.error;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif ( payload.event ) {\n\t\t\tnextState._event = payload.event;\n\t\t}\n\n\t\t/**\n\t\t * Send the nextState + action to the composedReducers via\n\t\t * this \"bridge\" mechanism. This allows external stateReducers\n\t\t * to hook into actions, and modify state if needed.\n\t\t */\n\t\treturn composedStateReducers( nextState, action );\n\t};\n}\n\n/**\n * A custom hook that connects and external stateReducer with an internal\n * reducer. This hook manages the internal state of InputControl.\n * However, by connecting an external stateReducer function, other\n * components can react to actions as well as modify state before it is\n * applied.\n *\n * This technique uses the \"stateReducer\" design pattern:\n * https://kentcdodds.com/blog/the-state-reducer-pattern/\n *\n * @param {Function} stateReducer An external state reducer.\n * @param {Object} initialState The initial state for the reducer.\n * @return {Object} State, dispatch, and a collection of actions.\n */\nexport function useInputControlStateReducer(\n\tstateReducer = initialStateReducer,\n\tinitialState = initialInputControlState\n) {\n\tconst [ state, dispatch ] = useReducer(\n\t\tinputControlStateReducer( stateReducer ),\n\t\tmergeInitialState( initialState )\n\t);\n\n\tconst createChangeEvent = ( type ) => ( nextValue, event ) => {\n\t\t/**\n\t\t * Persist allows for the (Synthetic) event to be used outside of\n\t\t * this function call.\n\t\t * https://reactjs.org/docs/events.html#event-pooling\n\t\t */\n\t\tif ( event && event.persist ) {\n\t\t\tevent.persist();\n\t\t}\n\n\t\tdispatch( {\n\t\t\ttype,\n\t\t\tpayload: { value: nextValue, event },\n\t\t} );\n\t};\n\n\tconst createKeyEvent = ( type ) => ( event ) => {\n\t\t/**\n\t\t * Persist allows for the (Synthetic) event to be used outside of\n\t\t * this function call.\n\t\t * https://reactjs.org/docs/events.html#event-pooling\n\t\t */\n\t\tif ( event && event.persist ) {\n\t\t\tevent.persist();\n\t\t}\n\n\t\tdispatch( { type, payload: { event } } );\n\t};\n\n\tconst createDragEvent = ( type ) => ( dragProps ) => {\n\t\tdispatch( { type, payload: dragProps } );\n\t};\n\n\t/**\n\t * Actions for the reducer\n\t */\n\tconst change = createChangeEvent( actionTypes.CHANGE );\n\tconst inValidate = createChangeEvent( actionTypes.INVALIDATE );\n\tconst reset = createChangeEvent( actionTypes.RESET );\n\tconst commit = createChangeEvent( actionTypes.COMMIT );\n\tconst update = createChangeEvent( actionTypes.UPDATE );\n\n\tconst dragStart = createDragEvent( actionTypes.DRAG_START );\n\tconst drag = createDragEvent( actionTypes.DRAG );\n\tconst dragEnd = createDragEvent( actionTypes.DRAG_END );\n\n\tconst pressUp = createKeyEvent( actionTypes.PRESS_UP );\n\tconst pressDown = createKeyEvent( actionTypes.PRESS_DOWN );\n\tconst pressEnter = createKeyEvent( actionTypes.PRESS_ENTER );\n\n\treturn {\n\t\tchange,\n\t\tcommit,\n\t\tdispatch,\n\t\tdrag,\n\t\tdragEnd,\n\t\tdragStart,\n\t\tinValidate,\n\t\tpressDown,\n\t\tpressEnter,\n\t\tpressUp,\n\t\treset,\n\t\tstate,\n\t\tupdate,\n\t};\n}\n"]}