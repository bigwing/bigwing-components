{"version":3,"sources":["@wordpress/components/src/tree-grid/index.js"],"names":["includes","focus","useCallback","UP","DOWN","LEFT","RIGHT","RovingTabIndexContainer","getRowFocusables","rowElement","focusablesInRow","focusable","find","length","filter","closest","TreeGrid","children","props","onKeyDown","event","keyCode","metaKey","ctrlKey","altKey","shiftKey","hasModifierKeyPressed","stopPropagation","document","activeElement","treeGridElement","currentTarget","contains","activeRow","currentColumnIndex","indexOf","nextIndex","Math","max","min","preventDefault","rows","Array","from","querySelectorAll","currentRowIndex","nextRowIndex","focusablesInNextRow","default","TreeGridRow","TreeGridCell","TreeGridItem"],"mappings":";;;;AAAA;;;AAGA,SAASA,QAAT,QAAyB,QAAzB;AAEA;;;;AAGA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,EAAT,EAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,KAAzB,QAAsC,qBAAtC;AAEA;;;;AAGA,OAAOC,uBAAP,MAAoC,oBAApC;AAEA;;;;;;;;;AAQA,SAASC,gBAAT,CAA2BC,UAA3B,EAAwC;AACvC,MAAMC,eAAe,GAAGT,KAAK,CAACU,SAAN,CAAgBC,IAAhB,CAAsBH,UAAtB,CAAxB;;AAEA,MAAK,CAAEC,eAAF,IAAqB,CAAEA,eAAe,CAACG,MAA5C,EAAqD;AACpD;AACA;;AAED,SAAOH,eAAe,CAACI,MAAhB,CAAwB,UAAEH,SAAF,EAAiB;AAC/C,WAAOA,SAAS,CAACI,OAAV,CAAmB,cAAnB,MAAwCN,UAA/C;AACA,GAFM,CAAP;AAGA;AAED;;;;;;;;;;AAQA,eAAe,SAASO,QAAT,OAA4C;AAAA,MAAvBC,QAAuB,QAAvBA,QAAuB;AAAA,MAAVC,KAAU;;AAC1D,MAAMC,SAAS,GAAGjB,WAAW,CAAE,UAAEkB,KAAF,EAAa;AAAA,QACnCC,OADmC,GACaD,KADb,CACnCC,OADmC;AAAA,QAC1BC,OAD0B,GACaF,KADb,CAC1BE,OAD0B;AAAA,QACjBC,OADiB,GACaH,KADb,CACjBG,OADiB;AAAA,QACRC,MADQ,GACaJ,KADb,CACRI,MADQ;AAAA,QACAC,QADA,GACaL,KADb,CACAK,QADA;AAG3C,QAAMC,qBAAqB,GAAGJ,OAAO,IAAIC,OAAX,IAAsBC,MAAtB,IAAgCC,QAA9D;;AAEA,QACCC,qBAAqB,IACrB,CAAE1B,QAAQ,CAAE,CAAEG,EAAF,EAAMC,IAAN,EAAYC,IAAZ,EAAkBC,KAAlB,CAAF,EAA6Be,OAA7B,CAFX,EAGE;AACD;AACA,KAV0C,CAY3C;;;AACAD,IAAAA,KAAK,CAACO,eAAN;AAb2C,oBAejBC,QAfiB;AAAA,QAenCC,aAfmC,aAenCA,aAfmC;AAAA,QAgBpBC,eAhBoB,GAgBAV,KAhBA,CAgBnCW,aAhBmC;;AAiB3C,QAAK,CAAED,eAAe,CAACE,QAAhB,CAA0BH,aAA1B,CAAP,EAAmD;AAClD;AACA,KAnB0C,CAqB3C;;;AACA,QAAMI,SAAS,GAAGJ,aAAa,CAACd,OAAd,CAAuB,cAAvB,CAAlB;AACA,QAAML,eAAe,GAAGF,gBAAgB,CAAEyB,SAAF,CAAxC;AACA,QAAMC,kBAAkB,GAAGxB,eAAe,CAACyB,OAAhB,CAAyBN,aAAzB,CAA3B;;AAEA,QAAK7B,QAAQ,CAAE,CAAEK,IAAF,EAAQC,KAAR,CAAF,EAAmBe,OAAnB,CAAb,EAA4C;AAC3C;AACA,UAAIe,SAAJ;;AACA,UAAKf,OAAO,KAAKhB,IAAjB,EAAwB;AACvB+B,QAAAA,SAAS,GAAGC,IAAI,CAACC,GAAL,CAAU,CAAV,EAAaJ,kBAAkB,GAAG,CAAlC,CAAZ;AACA,OAFD,MAEO;AACNE,QAAAA,SAAS,GAAGC,IAAI,CAACE,GAAL,CACXL,kBAAkB,GAAG,CADV,EAEXxB,eAAe,CAACG,MAAhB,GAAyB,CAFd,CAAZ;AAIA,OAV0C,CAY3C;;;AACA,UAAKuB,SAAS,KAAKF,kBAAnB,EAAwC;AACvC;AACA;AACA;AACAd,QAAAA,KAAK,CAACoB,cAAN;AACA;AACA,OAnB0C,CAqB3C;;;AACA9B,MAAAA,eAAe,CAAE0B,SAAF,CAAf,CAA6BnC,KAA7B,GAtB2C,CAwB3C;AACA;;AACAmB,MAAAA,KAAK,CAACoB,cAAN;AACA,KA3BD,MA2BO,IAAKxC,QAAQ,CAAE,CAAEG,EAAF,EAAMC,IAAN,CAAF,EAAgBiB,OAAhB,CAAb,EAAyC;AAC/C;AACA,UAAMoB,IAAI,GAAGC,KAAK,CAACC,IAAN,CACZb,eAAe,CAACc,gBAAhB,CAAkC,cAAlC,CADY,CAAb;AAGA,UAAMC,eAAe,GAAGJ,IAAI,CAACN,OAAL,CAAcF,SAAd,CAAxB;AACA,UAAIa,YAAJ;;AAEA,UAAKzB,OAAO,KAAKlB,EAAjB,EAAsB;AACrB2C,QAAAA,YAAY,GAAGT,IAAI,CAACC,GAAL,CAAU,CAAV,EAAaO,eAAe,GAAG,CAA/B,CAAf;AACA,OAFD,MAEO;AACNC,QAAAA,YAAY,GAAGT,IAAI,CAACE,GAAL,CAAUM,eAAe,GAAG,CAA5B,EAA+BJ,IAAI,CAAC5B,MAAL,GAAc,CAA7C,CAAf;AACA,OAZ8C,CAc/C;;;AACA,UAAKiC,YAAY,KAAKD,eAAtB,EAAwC;AACvC;AACA;AACA;AACAzB,QAAAA,KAAK,CAACoB,cAAN;AACA;AACA,OArB8C,CAuB/C;;;AACA,UAAMO,mBAAmB,GAAGvC,gBAAgB,CAC3CiC,IAAI,CAAEK,YAAF,CADuC,CAA5C,CAxB+C,CA4B/C;;AACA,UAAK,CAAEC,mBAAF,IAAyB,CAAEA,mBAAmB,CAAClC,MAApD,EAA6D;AAC5D;AACA;AACA;AACAO,QAAAA,KAAK,CAACoB,cAAN;AACA;AACA,OAnC8C,CAqC/C;;;AACA,UAAMJ,UAAS,GAAGC,IAAI,CAACE,GAAL,CACjBL,kBADiB,EAEjBa,mBAAmB,CAAClC,MAApB,GAA6B,CAFZ,CAAlB;;AAIAkC,MAAAA,mBAAmB,CAAEX,UAAF,CAAnB,CAAiCnC,KAAjC,GA1C+C,CA4C/C;AACA;;;AACAmB,MAAAA,KAAK,CAACoB,cAAN;AACA;AACD,GArG4B,EAqG1B,EArG0B,CAA7B;AAuGA,SACC,cAAC,uBAAD,QAGC,oCAAYtB,KAAZ;AAAoB,IAAA,IAAI,EAAC,UAAzB;AAAoC,IAAA,SAAS,EAAGC;AAAhD,MACC,6BAASF,QAAT,CADD,CAHD,CADD;AASA;AAED,SAAS+B,OAAO,IAAIC,WAApB,QAAuC,OAAvC;AACA,SAASD,OAAO,IAAIE,YAApB,QAAwC,QAAxC;AACA,SAASF,OAAO,IAAIG,YAApB,QAAwC,QAAxC","sourcesContent":["/**\n * External dependencies\n */\nimport { includes } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { focus } from '@wordpress/dom';\nimport { useCallback } from '@wordpress/element';\nimport { UP, DOWN, LEFT, RIGHT } from '@wordpress/keycodes';\n\n/**\n * Internal dependencies\n */\nimport RovingTabIndexContainer from './roving-tab-index';\n\n/**\n * Return focusables in a row element, excluding those from other branches\n * nested within the row.\n *\n * @param {Element} rowElement The DOM element representing the row.\n *\n * @return {?Array} The array of focusables in the row.\n */\nfunction getRowFocusables( rowElement ) {\n\tconst focusablesInRow = focus.focusable.find( rowElement );\n\n\tif ( ! focusablesInRow || ! focusablesInRow.length ) {\n\t\treturn;\n\t}\n\n\treturn focusablesInRow.filter( ( focusable ) => {\n\t\treturn focusable.closest( '[role=\"row\"]' ) === rowElement;\n\t} );\n}\n\n/**\n * Renders both a table and tbody element, used to create a tree hierarchy.\n *\n * @see https://github.com/WordPress/gutenberg/blob/master/packages/components/src/tree-grid/README.md\n *\n * @param {Object}    props          Component props.\n * @param {WPElement} props.children Children to be rendered\n */\nexport default function TreeGrid( { children, ...props } ) {\n\tconst onKeyDown = useCallback( ( event ) => {\n\t\tconst { keyCode, metaKey, ctrlKey, altKey, shiftKey } = event;\n\n\t\tconst hasModifierKeyPressed = metaKey || ctrlKey || altKey || shiftKey;\n\n\t\tif (\n\t\t\thasModifierKeyPressed ||\n\t\t\t! includes( [ UP, DOWN, LEFT, RIGHT ], keyCode )\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// The event will be handled, stop propagation.\n\t\tevent.stopPropagation();\n\n\t\tconst { activeElement } = document;\n\t\tconst { currentTarget: treeGridElement } = event;\n\t\tif ( ! treeGridElement.contains( activeElement ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Calculate the columnIndex of the active element.\n\t\tconst activeRow = activeElement.closest( '[role=\"row\"]' );\n\t\tconst focusablesInRow = getRowFocusables( activeRow );\n\t\tconst currentColumnIndex = focusablesInRow.indexOf( activeElement );\n\n\t\tif ( includes( [ LEFT, RIGHT ], keyCode ) ) {\n\t\t\t// Calculate to the next element.\n\t\t\tlet nextIndex;\n\t\t\tif ( keyCode === LEFT ) {\n\t\t\t\tnextIndex = Math.max( 0, currentColumnIndex - 1 );\n\t\t\t} else {\n\t\t\t\tnextIndex = Math.min(\n\t\t\t\t\tcurrentColumnIndex + 1,\n\t\t\t\t\tfocusablesInRow.length - 1\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Focus is either at the left or right edge of the grid. Do nothing.\n\t\t\tif ( nextIndex === currentColumnIndex ) {\n\t\t\t\t// Prevent key use for anything else. For example, Voiceover\n\t\t\t\t// will start reading text on continued use of left/right arrow\n\t\t\t\t// keys.\n\t\t\t\tevent.preventDefault();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Focus the next element.\n\t\t\tfocusablesInRow[ nextIndex ].focus();\n\n\t\t\t// Prevent key use for anything else. This ensures Voiceover\n\t\t\t// doesn't try to handle key navigation.\n\t\t\tevent.preventDefault();\n\t\t} else if ( includes( [ UP, DOWN ], keyCode ) ) {\n\t\t\t// Calculate the rowIndex of the next row.\n\t\t\tconst rows = Array.from(\n\t\t\t\ttreeGridElement.querySelectorAll( '[role=\"row\"]' )\n\t\t\t);\n\t\t\tconst currentRowIndex = rows.indexOf( activeRow );\n\t\t\tlet nextRowIndex;\n\n\t\t\tif ( keyCode === UP ) {\n\t\t\t\tnextRowIndex = Math.max( 0, currentRowIndex - 1 );\n\t\t\t} else {\n\t\t\t\tnextRowIndex = Math.min( currentRowIndex + 1, rows.length - 1 );\n\t\t\t}\n\n\t\t\t// Focus is either at the top or bottom edge of the grid. Do nothing.\n\t\t\tif ( nextRowIndex === currentRowIndex ) {\n\t\t\t\t// Prevent key use for anything else. For example, Voiceover\n\t\t\t\t// will start navigating horizontally when reaching the vertical\n\t\t\t\t// bounds of a table.\n\t\t\t\tevent.preventDefault();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get the focusables in the next row.\n\t\t\tconst focusablesInNextRow = getRowFocusables(\n\t\t\t\trows[ nextRowIndex ]\n\t\t\t);\n\n\t\t\t// If for some reason there are no focusables in the next row, do nothing.\n\t\t\tif ( ! focusablesInNextRow || ! focusablesInNextRow.length ) {\n\t\t\t\t// Prevent key use for anything else. For example, Voiceover\n\t\t\t\t// will still focus text when using arrow keys, while this\n\t\t\t\t// component should limit navigation to focusables.\n\t\t\t\tevent.preventDefault();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Try to focus the element in the next row that's at a similar column to the activeElement.\n\t\t\tconst nextIndex = Math.min(\n\t\t\t\tcurrentColumnIndex,\n\t\t\t\tfocusablesInNextRow.length - 1\n\t\t\t);\n\t\t\tfocusablesInNextRow[ nextIndex ].focus();\n\n\t\t\t// Prevent key use for anything else. This ensures Voiceover\n\t\t\t// doesn't try to handle key navigation.\n\t\t\tevent.preventDefault();\n\t\t}\n\t}, [] );\n\n\treturn (\n\t\t<RovingTabIndexContainer>\n\t\t\t{ /* Disable reason: A treegrid is implemented using a table element. */ }\n\t\t\t{ /* eslint-disable-next-line jsx-a11y/no-noninteractive-element-to-interactive-role */ }\n\t\t\t<table { ...props } role=\"treegrid\" onKeyDown={ onKeyDown }>\n\t\t\t\t<tbody>{ children }</tbody>\n\t\t\t</table>\n\t\t</RovingTabIndexContainer>\n\t);\n}\n\nexport { default as TreeGridRow } from './row';\nexport { default as TreeGridCell } from './cell';\nexport { default as TreeGridItem } from './item';\n"]}