{"version":3,"sources":["@wordpress/components/src/slot-fill/context.js"],"names":["SlotFillContext","registerSlot","unregisterSlot","registerFill","unregisterFill","getSlot","getFills","subscribe","Provider","Consumer","SlotFillProvider","arguments","bind","hasFills","slots","fills","listeners","contextValue","name","slot","previousSlot","triggerListeners","forceUpdateSlot","forceUpdate","instance","resetFillOccurrence","slotInstance","length","occurrence","undefined","forEach","listener","push","props","children","Component","useSlot","setSlot","unsubscribe"],"mappings":";;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;AALA;;AAgBA;;;;;;AAEA,IAAMA,eAAe,GAAG,4BAAe;AACtCC,EAAAA,YAAY,EAAE,wBAAM,CAAE,CADgB;AAEtCC,EAAAA,cAAc,EAAE,0BAAM,CAAE,CAFc;AAGtCC,EAAAA,YAAY,EAAE,wBAAM,CAAE,CAHgB;AAItCC,EAAAA,cAAc,EAAE,0BAAM,CAAE,CAJc;AAKtCC,EAAAA,OAAO,EAAE,mBAAM,CAAE,CALqB;AAMtCC,EAAAA,QAAQ,EAAE,oBAAM,CAAE,CANoB;AAOtCC,EAAAA,SAAS,EAAE,qBAAM,CAAE;AAPmB,CAAf,CAAxB;IASQC,Q,GAAuBR,e,CAAvBQ,Q;IAAUC,Q,GAAaT,e,CAAbS,Q;;;IAEZC,gB;;;;;AACL,8BAAc;AAAA;;AAAA;AACb,+BAAUC,SAAV;AAEA,UAAKV,YAAL,GAAoB,MAAKA,YAAL,CAAkBW,IAAlB,6CAApB;AACA,UAAKT,YAAL,GAAoB,MAAKA,YAAL,CAAkBS,IAAlB,6CAApB;AACA,UAAKV,cAAL,GAAsB,MAAKA,cAAL,CAAoBU,IAApB,6CAAtB;AACA,UAAKR,cAAL,GAAsB,MAAKA,cAAL,CAAoBQ,IAApB,6CAAtB;AACA,UAAKP,OAAL,GAAe,MAAKA,OAAL,CAAaO,IAAb,6CAAf;AACA,UAAKN,QAAL,GAAgB,MAAKA,QAAL,CAAcM,IAAd,6CAAhB;AACA,UAAKC,QAAL,GAAgB,MAAKA,QAAL,CAAcD,IAAd,6CAAhB;AACA,UAAKL,SAAL,GAAiB,MAAKA,SAAL,CAAeK,IAAf,6CAAjB;AAEA,UAAKE,KAAL,GAAa,EAAb;AACA,UAAKC,KAAL,GAAa,EAAb;AACA,UAAKC,SAAL,GAAiB,EAAjB;AACA,UAAKC,YAAL,GAAoB;AACnBhB,MAAAA,YAAY,EAAE,MAAKA,YADA;AAEnBC,MAAAA,cAAc,EAAE,MAAKA,cAFF;AAGnBC,MAAAA,YAAY,EAAE,MAAKA,YAHA;AAInBC,MAAAA,cAAc,EAAE,MAAKA,cAJF;AAKnBC,MAAAA,OAAO,EAAE,MAAKA,OALK;AAMnBC,MAAAA,QAAQ,EAAE,MAAKA,QANI;AAOnBO,MAAAA,QAAQ,EAAE,MAAKA,QAPI;AAQnBN,MAAAA,SAAS,EAAE,MAAKA;AARG,KAApB;AAfa;AAyBb;;;;iCAEaW,I,EAAMC,I,EAAO;AAC1B,UAAMC,YAAY,GAAG,KAAKN,KAAL,CAAYI,IAAZ,CAArB;AACA,WAAKJ,KAAL,CAAYI,IAAZ,IAAqBC,IAArB;AACA,WAAKE,gBAAL,GAH0B,CAK1B;AACA;;AACA,WAAKC,eAAL,CAAsBJ,IAAtB,EAP0B,CAS1B;AACA;AACA;AACA;;AACA,UAAKE,YAAL,EAAoB;AACnBA,QAAAA,YAAY,CAACG,WAAb;AACA;AACD;;;iCAEaL,I,EAAMM,Q,EAAW;AAC9B,WAAKT,KAAL,CAAYG,IAAZ,+CAA4B,KAAKH,KAAL,CAAYG,IAAZ,KAAsB,EAAlD,IAAwDM,QAAxD;AACA,WAAKF,eAAL,CAAsBJ,IAAtB;AACA;;;mCAEeA,I,EAAMM,Q,EAAW;AAChC;AACA;AACA;AACA,UAAK,KAAKV,KAAL,CAAYI,IAAZ,MAAuBM,QAA5B,EAAuC;AACtC;AACA;;AAED,aAAO,KAAKV,KAAL,CAAYI,IAAZ,CAAP;AACA,WAAKG,gBAAL;AACA;;;mCAEeH,I,EAAMM,Q,EAAW;AAChC,WAAKT,KAAL,CAAYG,IAAZ,IAAqB,qBAAS,KAAKH,KAAL,CAAYG,IAAZ,CAAT,EAA6BM,QAA7B,CAArB;AACA,WAAKC,mBAAL,CAA0BP,IAA1B;AACA,WAAKI,eAAL,CAAsBJ,IAAtB;AACA;;;4BAEQA,I,EAAO;AACf,aAAO,KAAKJ,KAAL,CAAYI,IAAZ,CAAP;AACA;;;6BAESA,I,EAAMQ,Y,EAAe;AAC9B;AACA;AACA,UAAK,KAAKZ,KAAL,CAAYI,IAAZ,MAAuBQ,YAA5B,EAA2C;AAC1C,eAAO,EAAP;AACA;;AACD,aAAO,oBAAQ,KAAKX,KAAL,CAAYG,IAAZ,CAAR,EAA4B,YAA5B,CAAP;AACA;;;6BAESA,I,EAAO;AAChB,aAAO,KAAKH,KAAL,CAAYG,IAAZ,KAAsB,CAAC,CAAE,KAAKH,KAAL,CAAYG,IAAZ,EAAmBS,MAAnD;AACA;;;wCAEoBT,I,EAAO;AAC3B,2BAAS,KAAKH,KAAL,CAAYG,IAAZ,CAAT,EAA6B,UAAEM,QAAF,EAAgB;AAC5CA,QAAAA,QAAQ,CAACI,UAAT,GAAsBC,SAAtB;AACA,OAFD;AAGA;;;oCAEgBX,I,EAAO;AACvB,UAAMC,IAAI,GAAG,KAAKd,OAAL,CAAca,IAAd,CAAb;;AAEA,UAAKC,IAAL,EAAY;AACXA,QAAAA,IAAI,CAACI,WAAL;AACA;AACD;;;uCAEkB;AAClB,WAAKP,SAAL,CAAec,OAAf,CAAwB,UAAEC,QAAF;AAAA,eAAgBA,QAAQ,EAAxB;AAAA,OAAxB;AACA;;;8BAEUA,Q,EAAW;AAAA;;AACrB,WAAKf,SAAL,CAAegB,IAAf,CAAqBD,QAArB;AAEA,aAAO,YAAM;AACZ,QAAA,MAAI,CAACf,SAAL,GAAiB,qBAAS,MAAI,CAACA,SAAd,EAAyBe,QAAzB,CAAjB;AACA,OAFD;AAGA;;;6BAEQ;AACR,aACC,4BAAC,QAAD;AAAU,QAAA,KAAK,EAAG,KAAKd;AAAvB,SACC,4BAAC,yBAAD,QACG,KAAKgB,KAAL,CAAWC,QADd,CADD,CADD;AAOA;;;EAxH6BC,kB;AA2H/B;;;;;;;;AAMO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAElB,IAAF,EAAY;AAAA,oBACH,yBAAYlB,eAAZ,CADG;AAAA,MAC1BK,OAD0B,eAC1BA,OAD0B;AAAA,MACjBE,SADiB,eACjBA,SADiB;;AAAA,kBAER,uBAAUF,OAAO,CAAEa,IAAF,CAAjB,CAFQ;AAAA;AAAA,MAE1BC,IAF0B;AAAA,MAEpBkB,OAFoB;;AAIlC,0BAAW,YAAM;AAChBA,IAAAA,OAAO,CAAEhC,OAAO,CAAEa,IAAF,CAAT,CAAP;AACA,QAAMoB,WAAW,GAAG/B,SAAS,CAAE,YAAM;AACpC8B,MAAAA,OAAO,CAAEhC,OAAO,CAAEa,IAAF,CAAT,CAAP;AACA,KAF4B,CAA7B;AAIA,WAAOoB,WAAP;AACA,GAPD,EAOG,CAAEpB,IAAF,CAPH;AASA,SAAOC,IAAP;AACA,CAdM;;;eAgBQT,gB","sourcesContent":["/**\n * External dependencies\n */\nimport { sortBy, forEach, without } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tComponent,\n\tcreateContext,\n\tuseContext,\n\tuseState,\n\tuseEffect,\n} from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport SlotFillBubblesVirtuallyProvider from './bubbles-virtually/slot-fill-provider';\n\nconst SlotFillContext = createContext( {\n\tregisterSlot: () => {},\n\tunregisterSlot: () => {},\n\tregisterFill: () => {},\n\tunregisterFill: () => {},\n\tgetSlot: () => {},\n\tgetFills: () => {},\n\tsubscribe: () => {},\n} );\nconst { Provider, Consumer } = SlotFillContext;\n\nclass SlotFillProvider extends Component {\n\tconstructor() {\n\t\tsuper( ...arguments );\n\n\t\tthis.registerSlot = this.registerSlot.bind( this );\n\t\tthis.registerFill = this.registerFill.bind( this );\n\t\tthis.unregisterSlot = this.unregisterSlot.bind( this );\n\t\tthis.unregisterFill = this.unregisterFill.bind( this );\n\t\tthis.getSlot = this.getSlot.bind( this );\n\t\tthis.getFills = this.getFills.bind( this );\n\t\tthis.hasFills = this.hasFills.bind( this );\n\t\tthis.subscribe = this.subscribe.bind( this );\n\n\t\tthis.slots = {};\n\t\tthis.fills = {};\n\t\tthis.listeners = [];\n\t\tthis.contextValue = {\n\t\t\tregisterSlot: this.registerSlot,\n\t\t\tunregisterSlot: this.unregisterSlot,\n\t\t\tregisterFill: this.registerFill,\n\t\t\tunregisterFill: this.unregisterFill,\n\t\t\tgetSlot: this.getSlot,\n\t\t\tgetFills: this.getFills,\n\t\t\thasFills: this.hasFills,\n\t\t\tsubscribe: this.subscribe,\n\t\t};\n\t}\n\n\tregisterSlot( name, slot ) {\n\t\tconst previousSlot = this.slots[ name ];\n\t\tthis.slots[ name ] = slot;\n\t\tthis.triggerListeners();\n\n\t\t// Sometimes the fills are registered after the initial render of slot\n\t\t// But before the registerSlot call, we need to rerender the slot\n\t\tthis.forceUpdateSlot( name );\n\n\t\t// If a new instance of a slot is being mounted while another with the\n\t\t// same name exists, force its update _after_ the new slot has been\n\t\t// assigned into the instance, such that its own rendering of children\n\t\t// will be empty (the new Slot will subsume all fills for this name).\n\t\tif ( previousSlot ) {\n\t\t\tpreviousSlot.forceUpdate();\n\t\t}\n\t}\n\n\tregisterFill( name, instance ) {\n\t\tthis.fills[ name ] = [ ...( this.fills[ name ] || [] ), instance ];\n\t\tthis.forceUpdateSlot( name );\n\t}\n\n\tunregisterSlot( name, instance ) {\n\t\t// If a previous instance of a Slot by this name unmounts, do nothing,\n\t\t// as the slot and its fills should only be removed for the current\n\t\t// known instance.\n\t\tif ( this.slots[ name ] !== instance ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdelete this.slots[ name ];\n\t\tthis.triggerListeners();\n\t}\n\n\tunregisterFill( name, instance ) {\n\t\tthis.fills[ name ] = without( this.fills[ name ], instance );\n\t\tthis.resetFillOccurrence( name );\n\t\tthis.forceUpdateSlot( name );\n\t}\n\n\tgetSlot( name ) {\n\t\treturn this.slots[ name ];\n\t}\n\n\tgetFills( name, slotInstance ) {\n\t\t// Fills should only be returned for the current instance of the slot\n\t\t// in which they occupy.\n\t\tif ( this.slots[ name ] !== slotInstance ) {\n\t\t\treturn [];\n\t\t}\n\t\treturn sortBy( this.fills[ name ], 'occurrence' );\n\t}\n\n\thasFills( name ) {\n\t\treturn this.fills[ name ] && !! this.fills[ name ].length;\n\t}\n\n\tresetFillOccurrence( name ) {\n\t\tforEach( this.fills[ name ], ( instance ) => {\n\t\t\tinstance.occurrence = undefined;\n\t\t} );\n\t}\n\n\tforceUpdateSlot( name ) {\n\t\tconst slot = this.getSlot( name );\n\n\t\tif ( slot ) {\n\t\t\tslot.forceUpdate();\n\t\t}\n\t}\n\n\ttriggerListeners() {\n\t\tthis.listeners.forEach( ( listener ) => listener() );\n\t}\n\n\tsubscribe( listener ) {\n\t\tthis.listeners.push( listener );\n\n\t\treturn () => {\n\t\t\tthis.listeners = without( this.listeners, listener );\n\t\t};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Provider value={ this.contextValue }>\n\t\t\t\t<SlotFillBubblesVirtuallyProvider>\n\t\t\t\t\t{ this.props.children }\n\t\t\t\t</SlotFillBubblesVirtuallyProvider>\n\t\t\t</Provider>\n\t\t);\n\t}\n}\n\n/**\n * React hook returning the active slot given a name.\n *\n * @param {string} name Slot name.\n * @return {Object} Slot object.\n */\nexport const useSlot = ( name ) => {\n\tconst { getSlot, subscribe } = useContext( SlotFillContext );\n\tconst [ slot, setSlot ] = useState( getSlot( name ) );\n\n\tuseEffect( () => {\n\t\tsetSlot( getSlot( name ) );\n\t\tconst unsubscribe = subscribe( () => {\n\t\t\tsetSlot( getSlot( name ) );\n\t\t} );\n\n\t\treturn unsubscribe;\n\t}, [ name ] );\n\n\treturn slot;\n};\n\nexport default SlotFillProvider;\nexport { Consumer };\n"]}