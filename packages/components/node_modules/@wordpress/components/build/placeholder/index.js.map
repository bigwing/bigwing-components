{"version":3,"sources":["@wordpress/components/src/placeholder/index.js"],"names":["Placeholder","icon","children","label","instructions","className","notices","preview","isColumnLayout","additionalProps","resizeListener","width","modifierClassNames","classes","fieldsetClasses"],"mappings":";;;;;;;;;;;;;;;;;AAGA;;AAKA;;AAKA;;AAbA;;;;AAKA;;;;AAKA;;;;AAKA;;;;;;;;;;;;;;;AAeA,SAASA,WAAT,OAUI;AAAA,MATHC,IASG,QATHA,IASG;AAAA,MARHC,QAQG,QARHA,QAQG;AAAA,MAPHC,KAOG,QAPHA,KAOG;AAAA,MANHC,YAMG,QANHA,YAMG;AAAA,MALHC,SAKG,QALHA,SAKG;AAAA,MAJHC,OAIG,QAJHA,OAIG;AAAA,MAHHC,OAGG,QAHHA,OAGG;AAAA,MAFHC,cAEG,QAFHA,cAEG;AAAA,MADAC,eACA;;AAAA,2BACmC,iCADnC;AAAA;AAAA,MACKC,cADL;AAAA,MACuBC,KADvB,0BACuBA,KADvB,EAGH;AACA;;;AACA,MAAIC,kBAAJ;;AACA,MAAK,OAAOD,KAAP,KAAiB,QAAtB,EAAiC;AAChCC,IAAAA,kBAAkB,GAAG;AACpB,kBAAYD,KAAK,IAAI,GADD;AAEpB,mBAAaA,KAAK,IAAI,GAAT,IAAgBA,KAAK,GAAG,GAFjB;AAGpB,kBAAYA,KAAK,GAAG;AAHA,KAArB;AAKA;;AAED,MAAME,OAAO,GAAG,yBACf,wBADe,EAEfR,SAFe,EAGfO,kBAHe,CAAhB;AAKA,MAAME,eAAe,GAAG,yBAAY,kCAAZ,EAAgD;AACvE,wBAAoBN;AADmD,GAAhD,CAAxB;AAGA,SACC,8DAAUC,eAAV;AAA4B,IAAA,SAAS,EAAGI;AAAxC,MACGH,cADH,EAEGJ,OAFH,EAGGC,OAAO,IACR;AAAK,IAAA,SAAS,EAAC;AAAf,KACGA,OADH,CAJF,EAQC;AAAK,IAAA,SAAS,EAAC;AAAf,KACC,4BAAC,aAAD;AAAM,IAAA,IAAI,EAAGN;AAAb,IADD,EAEGE,KAFH,CARD,EAYG,CAAC,CAAEC,YAAH,IACD;AAAK,IAAA,SAAS,EAAC;AAAf,KACGA,YADH,CAbF,EAiBC;AAAK,IAAA,SAAS,EAAGU;AAAjB,KAAqCZ,QAArC,CAjBD,CADD;AAqBA;;eAEcF,W","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport { useResizeObserver } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport Icon from '../icon';\n\n/**\n * Renders a placeholder. Normally used by blocks to render their empty state.\n *\n * @param {Object}    props                The component props.\n * @param {WPIcon}    props.icon           An icon rendered before the label.\n * @param {WPElement} props.children       Children to be rendered.\n * @param {string}    props.label          Title of the placeholder.\n * @param {string}    props.instructions   Instructions of the placeholder.\n * @param {string}    props.className      Class to set on the container div.\n * @param {Object}    props.notices        A rendered notices list.\n * @param {Object}    props.preview        Preview to be rendered in the placeholder.\n * @param {boolean}   props.isColumnLayout Whether a column layout should be used.\n *\n * @return {Object}       The rendered placeholder.\n */\nfunction Placeholder( {\n\ticon,\n\tchildren,\n\tlabel,\n\tinstructions,\n\tclassName,\n\tnotices,\n\tpreview,\n\tisColumnLayout,\n\t...additionalProps\n} ) {\n\tconst [ resizeListener, { width } ] = useResizeObserver();\n\n\t// Since `useResizeObserver` will report a width of `null` until after the\n\t// first render, avoid applying any modifier classes until width is known.\n\tlet modifierClassNames;\n\tif ( typeof width === 'number' ) {\n\t\tmodifierClassNames = {\n\t\t\t'is-large': width >= 320,\n\t\t\t'is-medium': width >= 160 && width < 320,\n\t\t\t'is-small': width < 160,\n\t\t};\n\t}\n\n\tconst classes = classnames(\n\t\t'components-placeholder',\n\t\tclassName,\n\t\tmodifierClassNames\n\t);\n\tconst fieldsetClasses = classnames( 'components-placeholder__fieldset', {\n\t\t'is-column-layout': isColumnLayout,\n\t} );\n\treturn (\n\t\t<div { ...additionalProps } className={ classes }>\n\t\t\t{ resizeListener }\n\t\t\t{ notices }\n\t\t\t{ preview && (\n\t\t\t\t<div className=\"components-placeholder__preview\">\n\t\t\t\t\t{ preview }\n\t\t\t\t</div>\n\t\t\t) }\n\t\t\t<div className=\"components-placeholder__label\">\n\t\t\t\t<Icon icon={ icon } />\n\t\t\t\t{ label }\n\t\t\t</div>\n\t\t\t{ !! instructions && (\n\t\t\t\t<div className=\"components-placeholder__instructions\">\n\t\t\t\t\t{ instructions }\n\t\t\t\t</div>\n\t\t\t) }\n\t\t\t<div className={ fieldsetClasses }>{ children }</div>\n\t\t</div>\n\t);\n}\n\nexport default Placeholder;\n"]}