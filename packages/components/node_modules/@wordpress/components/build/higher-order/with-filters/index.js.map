{"version":3,"sources":["@wordpress/components/src/higher-order/with-filters/index.js"],"names":["ANIMATION_FRAME_PERIOD","withFilters","hookName","OriginalComponent","namespace","FilteredComponent","ensureFilteredComponent","undefined","FilteredComponentRenderer","arguments","instances","push","length","onHooksUpdated","props","Component","throttledForceUpdate","forEach","instance","forceUpdate","updatedHookName"],"mappings":";;;;;;;;;AAQA;;;;;;;;;;;;AALA;;AAMA;;AACA;;;;;;AAEA,IAAMA,sBAAsB,GAAG,EAA/B;AAEA;;;;;;;;;;;AAUe,SAASC,WAAT,CAAsBC,QAAtB,EAAiC;AAC/C,SAAO,yCAA4B,UAAEC,iBAAF,EAAyB;AAC3D,QAAMC,SAAS,GAAG,uBAAuBF,QAAzC;AAEA;;;;;;;;AAOA,QAAIG,iBAAJ;AAEA;;;;;AAIA,aAASC,uBAAT,GAAmC;AAClC,UAAKD,iBAAiB,KAAKE,SAA3B,EAAuC;AACtCF,QAAAA,iBAAiB,GAAG,yBAAcH,QAAd,EAAwBC,iBAAxB,CAApB;AACA;AACD;;AApB0D,QAsBrDK,yBAtBqD;AAAA;;AAAA;;AAuB1D,2CAAc;AAAA;;AAAA;AACb,mCAAUC,SAAV;AAEAH,QAAAA,uBAAuB;AAHV;AAIb;;AA3ByD;AAAA;AAAA,4CA6BtC;AACnBE,UAAAA,yBAAyB,CAACE,SAA1B,CAAoCC,IAApC,CAA0C,IAA1C,EADmB,CAGnB;AACA;;AACA,cAAKH,yBAAyB,CAACE,SAA1B,CAAoCE,MAApC,KAA+C,CAApD,EAAwD;AACvD,kCAAW,aAAX,EAA0BR,SAA1B,EAAqCS,cAArC;AACA,kCAAW,WAAX,EAAwBT,SAAxB,EAAmCS,cAAnC;AACA;AACD;AAtCyD;AAAA;AAAA,+CAwCnC;AACtBL,UAAAA,yBAAyB,CAACE,SAA1B,GAAsC,qBACrCF,yBAAyB,CAACE,SADW,EAErC,IAFqC,CAAtC,CADsB,CAMtB;AACA;;AACA,cAAKF,yBAAyB,CAACE,SAA1B,CAAoCE,MAApC,KAA+C,CAApD,EAAwD;AACvD,qCAAc,aAAd,EAA6BR,SAA7B;AACA,qCAAc,WAAd,EAA2BA,SAA3B;AACA;AACD;AApDyD;AAAA;AAAA,iCAsDjD;AACR,iBAAO,4BAAC,iBAAD,EAAwB,KAAKU,KAA7B,CAAP;AACA;AAxDyD;AAAA;AAAA,MAsBnBC,kBAtBmB;;AA2D3DP,IAAAA,yBAAyB,CAACE,SAA1B,GAAsC,EAAtC;AAEA;;;;;AAIA,QAAMM,oBAAoB,GAAG,sBAAU,YAAM;AAC5C;AACA;AACAX,MAAAA,iBAAiB,GAAG,yBAAcH,QAAd,EAAwBC,iBAAxB,CAApB,CAH4C,CAK5C;;AACAK,MAAAA,yBAAyB,CAACE,SAA1B,CAAoCO,OAApC,CAA6C,UAAEC,QAAF,EAAgB;AAC5DA,QAAAA,QAAQ,CAACC,WAAT;AACA,OAFD;AAGA,KAT4B,EAS1BnB,sBAT0B,CAA7B;AAWA;;;;;;;;AAOA,aAASa,cAAT,CAAyBO,eAAzB,EAA2C;AAC1C,UAAKA,eAAe,KAAKlB,QAAzB,EAAoC;AACnCc,QAAAA,oBAAoB;AACpB;AACD;;AAED,WAAOR,yBAAP;AACA,GA1FM,EA0FJ,aA1FI,CAAP;AA2FA","sourcesContent":["/**\n * External dependencies\n */\nimport { debounce, without } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { Component } from '@wordpress/element';\nimport { addAction, applyFilters, removeAction } from '@wordpress/hooks';\nimport { createHigherOrderComponent } from '@wordpress/compose';\n\nconst ANIMATION_FRAME_PERIOD = 16;\n\n/**\n * Creates a higher-order component which adds filtering capability to the\n * wrapped component. Filters get applied when the original component is about\n * to be mounted. When a filter is added or removed that matches the hook name,\n * the wrapped component re-renders.\n *\n * @param {string} hookName Hook name exposed to be used by filters.\n *\n * @return {Function} Higher-order component factory.\n */\nexport default function withFilters( hookName ) {\n\treturn createHigherOrderComponent( ( OriginalComponent ) => {\n\t\tconst namespace = 'core/with-filters/' + hookName;\n\n\t\t/**\n\t\t * The component definition with current filters applied. Each instance\n\t\t * reuse this shared reference as an optimization to avoid excessive\n\t\t * calls to `applyFilters` when many instances exist.\n\t\t *\n\t\t * @type {?Component}\n\t\t */\n\t\tlet FilteredComponent;\n\n\t\t/**\n\t\t * Initializes the FilteredComponent variable once, if not already\n\t\t * assigned. Subsequent calls are effectively a noop.\n\t\t */\n\t\tfunction ensureFilteredComponent() {\n\t\t\tif ( FilteredComponent === undefined ) {\n\t\t\t\tFilteredComponent = applyFilters( hookName, OriginalComponent );\n\t\t\t}\n\t\t}\n\n\t\tclass FilteredComponentRenderer extends Component {\n\t\t\tconstructor() {\n\t\t\t\tsuper( ...arguments );\n\n\t\t\t\tensureFilteredComponent();\n\t\t\t}\n\n\t\t\tcomponentDidMount() {\n\t\t\t\tFilteredComponentRenderer.instances.push( this );\n\n\t\t\t\t// If there were previously no mounted instances for components\n\t\t\t\t// filtered on this hook, add the hook handler.\n\t\t\t\tif ( FilteredComponentRenderer.instances.length === 1 ) {\n\t\t\t\t\taddAction( 'hookRemoved', namespace, onHooksUpdated );\n\t\t\t\t\taddAction( 'hookAdded', namespace, onHooksUpdated );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcomponentWillUnmount() {\n\t\t\t\tFilteredComponentRenderer.instances = without(\n\t\t\t\t\tFilteredComponentRenderer.instances,\n\t\t\t\t\tthis\n\t\t\t\t);\n\n\t\t\t\t// If this was the last of the mounted components filtered on\n\t\t\t\t// this hook, remove the hook handler.\n\t\t\t\tif ( FilteredComponentRenderer.instances.length === 0 ) {\n\t\t\t\t\tremoveAction( 'hookRemoved', namespace );\n\t\t\t\t\tremoveAction( 'hookAdded', namespace );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\trender() {\n\t\t\t\treturn <FilteredComponent { ...this.props } />;\n\t\t\t}\n\t\t}\n\n\t\tFilteredComponentRenderer.instances = [];\n\n\t\t/**\n\t\t * Updates the FilteredComponent definition, forcing a render for each\n\t\t * mounted instance. This occurs a maximum of once per animation frame.\n\t\t */\n\t\tconst throttledForceUpdate = debounce( () => {\n\t\t\t// Recreate the filtered component, only after delay so that it's\n\t\t\t// computed once, even if many filters added.\n\t\t\tFilteredComponent = applyFilters( hookName, OriginalComponent );\n\n\t\t\t// Force each instance to render.\n\t\t\tFilteredComponentRenderer.instances.forEach( ( instance ) => {\n\t\t\t\tinstance.forceUpdate();\n\t\t\t} );\n\t\t}, ANIMATION_FRAME_PERIOD );\n\n\t\t/**\n\t\t * When a filter is added or removed for the matching hook name, each\n\t\t * mounted instance should re-render with the new filters having been\n\t\t * applied to the original component.\n\t\t *\n\t\t * @param {string} updatedHookName Name of the hook that was updated.\n\t\t */\n\t\tfunction onHooksUpdated( updatedHookName ) {\n\t\t\tif ( updatedHookName === hookName ) {\n\t\t\t\tthrottledForceUpdate();\n\t\t\t}\n\t\t}\n\n\t\treturn FilteredComponentRenderer;\n\t}, 'withFilters' );\n}\n"]}