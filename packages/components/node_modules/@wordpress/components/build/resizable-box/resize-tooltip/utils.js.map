{"version":3,"sources":["@wordpress/components/src/resizable-box/resize-tooltip/utils.js"],"names":["window","clearTimeout","setTimeout","POSITIONS","bottom","corner","useResizeLabel","axis","fadeTimeout","onResize","noop","position","showPx","resizeListener","sizes","isAxisControlled","moveX","setMoveX","moveY","setMoveY","heightRef","height","widthRef","width","moveTimeoutRef","unsetMoveXY","debounceUnsetMoveXY","current","isRendered","didWidthChange","didHeightChange","label","getSizeLabel","labelUnit"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { noop } from 'lodash';\nimport useResizeAware from 'react-resize-aware';\n\n/**\n * WordPress dependencies\n */\nimport { useEffect, useRef, useState } from '@wordpress/element';\n\nconst { clearTimeout, setTimeout } = window;\n\nexport const POSITIONS = {\n\tbottom: 'bottom',\n\tcorner: 'corner',\n};\n\n/**\n * @typedef {Object} UseResizeLabelProps\n *\n * @property {undefined|string} label The label value.\n * @property {Function} resizeListener Element to be rendered for resize listening events.\n */\n\n/**\n * Custom hook that manages resize listener events. It also provides a label\n * based on current resize width x height values.\n *\n * @param {Object} props\n * @param {string} props.axis Only shows the label corresponding to the axis.\n * @param {number} props.fadeTimeout Duration (ms) before deactivating the resize label.\n * @param {boolean} props.onResize Callback when a resize occurs. Provides { width, height } callback.\n * @param {string} props.position Adjusts label value.\n * @param {boolean} props.showPx Whether to add `PX` to the label.\n *\n * @return {UseResizeLabelProps} Properties for hook.\n */\nexport function useResizeLabel( {\n\taxis,\n\tfadeTimeout = 180,\n\tonResize = noop,\n\tposition = POSITIONS.bottom,\n\tshowPx = false,\n} ) {\n\t/*\n\t * The width/height values derive from this special useResizeAware hook.\n\t * This custom hook uses injects an iFrame into the element, allowing it\n\t * to tap into the onResize (window) callback events.\n\t */\n\tconst [ resizeListener, sizes ] = useResizeAware();\n\n\t/*\n\t * Indicates if the x/y axis is preferred.\n\t * If set, we will avoid resetting the moveX and moveY values.\n\t * This will allow for the preferred axis values to persist in the label.\n\t */\n\tconst isAxisControlled = !! axis;\n\n\t/*\n\t * The moveX and moveY values are used to track whether the label should\n\t * display width, height, or width x height.\n\t */\n\tconst [ moveX, setMoveX ] = useState( false );\n\tconst [ moveY, setMoveY ] = useState( false );\n\n\t/*\n\t * Cached dimension values to check for width/height updates from the\n\t * sizes property from useResizeAware()\n\t */\n\tconst heightRef = useRef( height );\n\tconst widthRef = useRef( width );\n\n\t/*\n\t * This timeout is used with setMoveX and setMoveY to determine of\n\t * both width and height values have changed at (roughly) the same time.\n\t */\n\tconst moveTimeoutRef = useRef();\n\n\tconst { width, height } = sizes;\n\n\tconst unsetMoveXY = () => {\n\t\t/*\n\t\t * If axis is controlled, we will avoid resetting the moveX and moveY values.\n\t\t * This will allow for the preferred axis values to persist in the label.\n\t\t */\n\t\tif ( isAxisControlled ) return;\n\t\tsetMoveX( false );\n\t\tsetMoveY( false );\n\t};\n\n\tconst debounceUnsetMoveXY = () => {\n\t\tif ( moveTimeoutRef.current ) {\n\t\t\tclearTimeout( moveTimeoutRef.current );\n\t\t}\n\n\t\tmoveTimeoutRef.current = setTimeout( unsetMoveXY, fadeTimeout );\n\t};\n\n\tuseEffect( () => {\n\t\t/*\n\t\t * On the initial render of useResizeAware, the height and width values are\n\t\t * null. They are calculated then set using via an internal useEffect hook.\n\t\t */\n\t\tconst isRendered = width !== null || height !== null;\n\n\t\tif ( ! isRendered ) return;\n\n\t\tconst didWidthChange = width !== widthRef.current;\n\t\tconst didHeightChange = height !== heightRef.current;\n\n\t\tif ( ! didWidthChange && ! didHeightChange ) return;\n\n\t\t/*\n\t\t * After the initial render, the useResizeAware will set the first\n\t\t * width and height values. We'll sync those values with our\n\t\t * width and height refs. However, we shouldn't render our Tooltip\n\t\t * label on this first cycle.\n\t\t */\n\t\tif ( width && ! widthRef.current && height && ! heightRef.current ) {\n\t\t\twidthRef.current = width;\n\t\t\theightRef.current = height;\n\t\t\treturn;\n\t\t}\n\n\t\t/*\n\t\t * After the first cycle, we can track width and height changes.\n\t\t */\n\t\tif ( didWidthChange ) {\n\t\t\tsetMoveX( true );\n\t\t\twidthRef.current = width;\n\t\t}\n\n\t\tif ( didHeightChange ) {\n\t\t\tsetMoveY( true );\n\t\t\theightRef.current = height;\n\t\t}\n\n\t\tonResize( { width, height } );\n\t\tdebounceUnsetMoveXY();\n\t}, [ width, height ] );\n\n\tconst label = getSizeLabel( {\n\t\taxis,\n\t\theight,\n\t\tmoveX,\n\t\tmoveY,\n\t\tposition,\n\t\tshowPx,\n\t\twidth,\n\t} );\n\n\treturn {\n\t\tlabel,\n\t\tresizeListener,\n\t};\n}\n\n/**\n * Gets the resize label based on width and height values (as well as recent changes).\n *\n * @param {Object} props\n * @param {string} props.axis Only shows the label corresponding to the axis.\n * @param {number} props.height Height value.\n * @param {boolean} props.moveX Recent width (x axis) changes.\n * @param {boolean} props.moveY Recent width (y axis) changes.\n * @param {string} props.position Adjusts label value.\n * @param {boolean} props.showPx Whether to add `PX` to the label.\n * @param {number} props.width Width value.\n *\n * @return {undefined | string} The rendered label.\n */\nfunction getSizeLabel( {\n\taxis,\n\theight,\n\tmoveX = false,\n\tmoveY = false,\n\tposition = POSITIONS.bottom,\n\tshowPx = false,\n\twidth,\n} ) {\n\tif ( ! moveX && ! moveY ) return null;\n\n\t/*\n\t * Corner position...\n\t * We want the label to appear like width x height.\n\t */\n\tif ( position === POSITIONS.corner ) {\n\t\treturn `${ width } x ${ height }`;\n\t}\n\n\t/*\n\t * Other POSITIONS...\n\t * The label will combine both width x height values if both\n\t * values have recently been changed.\n\t *\n\t * Otherwise, only width or height will be displayed.\n\t * The `PX` unit will be added, if specified by the `showPx` prop.\n\t */\n\tconst labelUnit = showPx ? ' px' : '';\n\n\tif ( axis ) {\n\t\tif ( axis === 'x' && moveX ) {\n\t\t\treturn `${ width }${ labelUnit }`;\n\t\t}\n\t\tif ( axis === 'y' && moveY ) {\n\t\t\treturn `${ height }${ labelUnit }`;\n\t\t}\n\t}\n\n\tif ( moveX && moveY ) {\n\t\treturn `${ width } x ${ height }`;\n\t}\n\tif ( moveX ) {\n\t\treturn `${ width }${ labelUnit }`;\n\t}\n\tif ( moveY ) {\n\t\treturn `${ height }${ labelUnit }`;\n\t}\n\n\treturn null;\n}\n"]}