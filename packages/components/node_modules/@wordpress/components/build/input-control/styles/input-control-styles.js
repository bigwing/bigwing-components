"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Suffix = exports.LegendText = exports.Legend = exports.Fieldset = exports.Label = exports.Input = exports.Container = exports.Root = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _core = require("@emotion/core");

var _text = _interopRequireDefault(require("../../text"));

var _styleMixins = require("../../utils/style-mixins");

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

var FLOATING_LABEL_TRANSITION_SPEED = '60ms';

var rootFloatLabelStyles = function rootFloatLabelStyles(_ref3) {
  var isFloatingLabel = _ref3.isFloatingLabel;
  var paddingTop = isFloatingLabel ? 5 : 0;
  return /*#__PURE__*/(0, _core.css)({
    paddingTop: paddingTop
  }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

var _ref = process.env.NODE_ENV === "production" ? {
  name: "r6z5ec",
  styles: "z-index:1;"
} : {
  name: "r6z5ec",
  styles: "z-index:1;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var rootFocusedStyles = function rootFocusedStyles(_ref4) {
  var isFocused = _ref4.isFocused;
  if (!isFocused) return '';
  return _ref;
};

var Root = (0, _styledBase.default)("div", {
  target: "e1cr7zh10",
  label: "Root"
})("box-sizing:border-box;position:relative;border-radius:2px;", rootFloatLabelStyles, ";", rootFocusedStyles, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.Root = Root;

var containerDisabledStyle = function containerDisabledStyle(_ref5) {
  var disabled = _ref5.disabled;
  var backgroundColor = disabled ? (0, _styleMixins.color)('ui.backgroundDisabled') : (0, _styleMixins.color)('ui.background');
  return /*#__PURE__*/(0, _core.css)({
    backgroundColor: backgroundColor
  }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

var Container = (0, _styledBase.default)("div", {
  target: "e1cr7zh11",
  label: "Container"
})("align-items:center;box-sizing:border-box;border-radius:inherit;display:flex;position:relative;", containerDisabledStyle, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.Container = Container;

var disabledStyles = function disabledStyles(_ref6) {
  var disabled = _ref6.disabled;
  if (!disabled) return '';
  return /*#__PURE__*/(0, _core.css)({
    color: (0, _styleMixins.color)('ui.textDisabled')
  }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

var fontSizeStyles = function fontSizeStyles(_ref7) {
  var size = _ref7.size;
  var sizes = {
    default: '13px',
    small: '11px'
  };
  var fontSize = sizes[size];
  var fontSizeMobile = '16px';
  if (!fontSize) return '';
  return /*#__PURE__*/(0, _core.css)("font-size:", fontSizeMobile, ";@media ( min-width:600px ){font-size:", fontSize, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvaW5wdXQtY29udHJvbC9zdHlsZXMvaW5wdXQtY29udHJvbC1zdHlsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBdUVXIiwiZmlsZSI6IkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvaW5wdXQtY29udHJvbC9zdHlsZXMvaW5wdXQtY29udHJvbC1zdHlsZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcblxuLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IFRleHQgZnJvbSAnLi4vLi4vdGV4dCc7XG5pbXBvcnQgeyBjb2xvciwgcnRsLCByZWR1Y2VNb3Rpb24gfSBmcm9tICcuLi8uLi91dGlscy9zdHlsZS1taXhpbnMnO1xuXG5jb25zdCBGTE9BVElOR19MQUJFTF9UUkFOU0lUSU9OX1NQRUVEID0gJzYwbXMnO1xuXG5jb25zdCByb290RmxvYXRMYWJlbFN0eWxlcyA9ICggeyBpc0Zsb2F0aW5nTGFiZWwgfSApID0+IHtcblx0Y29uc3QgcGFkZGluZ1RvcCA9IGlzRmxvYXRpbmdMYWJlbCA/IDUgOiAwO1xuXHRyZXR1cm4gY3NzKCB7IHBhZGRpbmdUb3AgfSApO1xufTtcblxuY29uc3Qgcm9vdEZvY3VzZWRTdHlsZXMgPSAoIHsgaXNGb2N1c2VkIH0gKSA9PiB7XG5cdGlmICggISBpc0ZvY3VzZWQgKSByZXR1cm4gJyc7XG5cblx0cmV0dXJuIGNzcyggeyB6SW5kZXg6IDEgfSApO1xufTtcblxuZXhwb3J0IGNvbnN0IFJvb3QgPSBzdHlsZWQuZGl2YFxuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdGJvcmRlci1yYWRpdXM6IDJweDtcblxuXHQkeyByb290RmxvYXRMYWJlbFN0eWxlcyB9O1xuXHQkeyByb290Rm9jdXNlZFN0eWxlcyB9O1xuYDtcblxuY29uc3QgY29udGFpbmVyRGlzYWJsZWRTdHlsZSA9ICggeyBkaXNhYmxlZCB9ICkgPT4ge1xuXHRjb25zdCBiYWNrZ3JvdW5kQ29sb3IgPSBkaXNhYmxlZFxuXHRcdD8gY29sb3IoICd1aS5iYWNrZ3JvdW5kRGlzYWJsZWQnIClcblx0XHQ6IGNvbG9yKCAndWkuYmFja2dyb3VuZCcgKTtcblxuXHRyZXR1cm4gY3NzKCB7IGJhY2tncm91bmRDb2xvciB9ICk7XG59O1xuXG5leHBvcnQgY29uc3QgQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0Ym9yZGVyLXJhZGl1czogaW5oZXJpdDtcblx0ZGlzcGxheTogZmxleDtcblx0cG9zaXRpb246IHJlbGF0aXZlO1xuXG5cdCR7IGNvbnRhaW5lckRpc2FibGVkU3R5bGUgfTtcbmA7XG5cbmNvbnN0IGRpc2FibGVkU3R5bGVzID0gKCB7IGRpc2FibGVkIH0gKSA9PiB7XG5cdGlmICggISBkaXNhYmxlZCApIHJldHVybiAnJztcblxuXHRyZXR1cm4gY3NzKCB7XG5cdFx0Y29sb3I6IGNvbG9yKCAndWkudGV4dERpc2FibGVkJyApLFxuXHR9ICk7XG59O1xuXG5jb25zdCBmb250U2l6ZVN0eWxlcyA9ICggeyBzaXplIH0gKSA9PiB7XG5cdGNvbnN0IHNpemVzID0ge1xuXHRcdGRlZmF1bHQ6ICcxM3B4Jyxcblx0XHRzbWFsbDogJzExcHgnLFxuXHR9O1xuXG5cdGNvbnN0IGZvbnRTaXplID0gc2l6ZXNbIHNpemUgXTtcblx0Y29uc3QgZm9udFNpemVNb2JpbGUgPSAnMTZweCc7XG5cblx0aWYgKCAhIGZvbnRTaXplICkgcmV0dXJuICcnO1xuXG5cdHJldHVybiBjc3NgXG5cdFx0Zm9udC1zaXplOiAkeyBmb250U2l6ZU1vYmlsZSB9O1xuXG5cdFx0QG1lZGlhICggbWluLXdpZHRoOiA2MDBweCApIHtcblx0XHRcdGZvbnQtc2l6ZTogJHsgZm9udFNpemUgfTtcblx0XHR9XG5cdGA7XG59O1xuXG5jb25zdCBzaXplU3R5bGVzID0gKCB7IHNpemUgfSApID0+IHtcblx0Y29uc3Qgc2l6ZXMgPSB7XG5cdFx0ZGVmYXVsdDoge1xuXHRcdFx0aGVpZ2h0OiAzMCxcblx0XHRcdGxpbmVIZWlnaHQ6IDEsXG5cdFx0XHRtaW5IZWlnaHQ6IDMwLFxuXHRcdH0sXG5cdFx0c21hbGw6IHtcblx0XHRcdGhlaWdodDogMjQsXG5cdFx0XHRsaW5lSGVpZ2h0OiAxLFxuXHRcdFx0bWluSGVpZ2h0OiAyNCxcblx0XHR9LFxuXHR9O1xuXG5cdGNvbnN0IHN0eWxlID0gc2l6ZXNbIHNpemUgXSB8fCBzaXplcy5kZWZhdWx0O1xuXG5cdHJldHVybiBjc3MoIHN0eWxlICk7XG59O1xuXG5jb25zdCBwbGFjZWhvbGRlclN0eWxlcyA9ICggeyBpc0ZpbGxlZCwgaXNGbG9hdGluZywgaXNGbG9hdGluZ0xhYmVsIH0gKSA9PiB7XG5cdGxldCBvcGFjaXR5ID0gMTtcblxuXHRpZiAoIGlzRmxvYXRpbmdMYWJlbCApIHtcblx0XHRpZiAoICEgaXNGaWxsZWQgJiYgISBpc0Zsb2F0aW5nICkge1xuXHRcdFx0b3BhY2l0eSA9IDA7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNzc2Bcblx0XHQmOjpwbGFjZWhvbGRlciB7XG5cdFx0XHRvcGFjaXR5OiAkeyBvcGFjaXR5IH07XG5cdFx0fVxuXG5cdFx0Jjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7XG5cdFx0XHRsaW5lLWhlaWdodDogbm9ybWFsO1xuXHRcdH1cblx0YDtcbn07XG5cbmNvbnN0IGRyYWdTdHlsZXMgPSAoIHsgaXNEcmFnZ2luZywgZHJhZ0N1cnNvciB9ICkgPT4ge1xuXHRsZXQgZGVmYXVsdEFycm93U3R5bGVzID0gJyc7XG5cdGxldCBhY3RpdmVEcmFnQ3Vyc29yU3R5bGVzID0gJyc7XG5cblx0aWYgKCBpc0RyYWdnaW5nICkge1xuXHRcdGRlZmF1bHRBcnJvd1N0eWxlcyA9IGNzc2Bcblx0XHRcdGN1cnNvcjogJHsgZHJhZ0N1cnNvciB9O1xuXHRcdFx0dXNlci1zZWxlY3Q6IG5vbmU7XG5cblx0XHRcdCY6Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24sXG5cdFx0XHQmOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uIHtcblx0XHRcdFx0LXdlYmtpdC1hcHBlYXJhbmNlOiBub25lICFpbXBvcnRhbnQ7XG5cdFx0XHRcdG1hcmdpbjogMCAhaW1wb3J0YW50O1xuXHRcdFx0fVxuXHRcdGA7XG5cdH1cblxuXHRpZiAoIGlzRHJhZ2dpbmcgJiYgZHJhZ0N1cnNvciApIHtcblx0XHRhY3RpdmVEcmFnQ3Vyc29yU3R5bGVzID0gY3NzYFxuXHRcdFx0JjphY3RpdmUge1xuXHRcdFx0XHRjdXJzb3I6ICR7IGRyYWdDdXJzb3IgfTtcblx0XHRcdH1cblx0XHRgO1xuXHR9XG5cblx0cmV0dXJuIGNzc2Bcblx0XHQkeyBkZWZhdWx0QXJyb3dTdHlsZXMgfTtcblx0XHQkeyBhY3RpdmVEcmFnQ3Vyc29yU3R5bGVzIH07XG5cdGA7XG59O1xuXG4vLyBUT0RPOiBSZXNvbHZlIG5lZWQgdG8gdXNlICYmJiB0byBpbmNyZWFzZSBzcGVjaWZpY2l0eVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL1dvcmRQcmVzcy9ndXRlbmJlcmcvaXNzdWVzLzE4NDgzXG5cbmV4cG9ydCBjb25zdCBJbnB1dCA9IHN0eWxlZC5pbnB1dGBcblx0JiYmIHtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcblx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdGJvcmRlcjogbm9uZTtcblx0XHRib3gtc2hhZG93OiBub25lICFpbXBvcnRhbnQ7XG5cdFx0Y29sb3I6ICR7IGNvbG9yKCAnYmxhY2snICkgfTtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRvdXRsaW5lOiBub25lO1xuXHRcdHBhZGRpbmctbGVmdDogOHB4O1xuXHRcdHBhZGRpbmctcmlnaHQ6IDhweDtcblx0XHR3aWR0aDogMTAwJTtcblxuXHRcdCR7IGRyYWdTdHlsZXMgfTtcblx0XHQkeyBkaXNhYmxlZFN0eWxlcyB9O1xuXHRcdCR7IGZvbnRTaXplU3R5bGVzIH07XG5cdFx0JHsgc2l6ZVN0eWxlcyB9O1xuXG5cdFx0JHsgcGxhY2Vob2xkZXJTdHlsZXMgfTtcblx0fVxuYDtcblxuY29uc3QgbGFiZXJDb2xvciA9ICggeyBpc0Zsb2F0aW5nTGFiZWwsIGlzRmlsbGVkLCBpc0Zsb2F0aW5nIH0gKSA9PiB7XG5cdGNvbnN0IGlzUGxhY2Vob2xkZXIgPSBpc0Zsb2F0aW5nTGFiZWwgJiYgISBpc0ZpbGxlZDtcblx0Y29uc3QgdGV4dENvbG9yID1cblx0XHRpc1BsYWNlaG9sZGVyIHx8IGlzRmxvYXRpbmdcblx0XHRcdD8gY29sb3IoICd1aS50ZXh0RGlzYWJsZWQnIClcblx0XHRcdDogJ2N1cnJlbnRDb2xvcic7XG5cblx0cmV0dXJuIGNzcyggeyBjb2xvcjogdGV4dENvbG9yIH0gKTtcbn07XG5cbmNvbnN0IGxhYmVsRm9udFNpemUgPSAoIHsgaXNGbG9hdGluZ0xhYmVsLCBzaXplIH0gKSA9PiB7XG5cdGNvbnN0IHNpemVzID0ge1xuXHRcdGRlZmF1bHQ6ICcxM3B4Jyxcblx0XHRzbWFsbDogJzExcHgnLFxuXHR9O1xuXHRjb25zdCBmb250U2l6ZSA9IHNpemVzWyBzaXplIF07XG5cdGNvbnN0IGxpbmVIZWlnaHQgPSBpc0Zsb2F0aW5nTGFiZWwgPyAxLjIgOiBudWxsO1xuXG5cdHJldHVybiBjc3MoIHsgZm9udFNpemUsIGxpbmVIZWlnaHQgfSApO1xufTtcblxuY29uc3QgbGFiZWxQb3NpdGlvbiA9ICggeyBpc0Zsb2F0aW5nTGFiZWwsIGlzRmxvYXRpbmcsIHNpemUgfSApID0+IHtcblx0Y29uc3QgcGFkZGluZ0JvdHRvbSA9IGlzRmxvYXRpbmdMYWJlbCA/IDAgOiA0O1xuXHRjb25zdCBwb3NpdGlvbiA9IGlzRmxvYXRpbmdMYWJlbCA/ICdhYnNvbHV0ZScgOiBudWxsO1xuXHRjb25zdCBwb2ludGVyRXZlbnRzID0gaXNGbG9hdGluZyA/IG51bGwgOiAnbm9uZSc7XG5cblx0Y29uc3QgaXNTbWFsbCA9IHNpemUgPT09ICdzbWFsbCc7XG5cblx0Y29uc3Qgb2Zmc2V0VG9wID0gaXNTbWFsbCA/IDEgOiAyO1xuXHRjb25zdCBvZmZzZXQgPSBpc1NtYWxsID8gJy0xcHgnIDogJy0zcHgnO1xuXG5cdGNvbnN0IG1hcmdpblRvcCA9IGlzRmxvYXRpbmcgPyAwIDogb2Zmc2V0VG9wO1xuXHRjb25zdCBtYXJnaW5MZWZ0ID0gaXNGbG9hdGluZ0xhYmVsID8gOCA6IDA7XG5cblx0bGV0IHRyYW5zZm9ybSA9IGlzRmxvYXRpbmdcblx0XHQ/IGB0cmFuc2xhdGUoIDAsIGNhbGMoLTEwMCUgKyAkeyBvZmZzZXQgfSkgKSBzY2FsZSggMC43NSApYFxuXHRcdDogJ3RyYW5zbGF0ZSggMCwgLTUwJSkgc2NhbGUoMSknO1xuXG5cdGlmICggISBpc0Zsb2F0aW5nTGFiZWwgKSB7XG5cdFx0dHJhbnNmb3JtID0gbnVsbDtcblx0fVxuXG5cdGNvbnN0IHRyYW5zaXRpb24gPSBpc0Zsb2F0aW5nTGFiZWxcblx0XHQ/IGB0cmFuc2Zvcm0gJHsgRkxPQVRJTkdfTEFCRUxfVFJBTlNJVElPTl9TUEVFRCB9IGxpbmVhcmBcblx0XHQ6IG51bGw7XG5cblx0cmV0dXJuIGNzcyhcblx0XHR7XG5cdFx0XHRtYXJnaW5Ub3AsXG5cdFx0XHRwYWRkaW5nQm90dG9tLFxuXHRcdFx0cG9zaXRpb24sXG5cdFx0XHRwb2ludGVyRXZlbnRzLFxuXHRcdFx0dHJhbnNpdGlvbixcblx0XHRcdHRyYW5zZm9ybSxcblx0XHR9LFxuXHRcdHJ0bCggeyBtYXJnaW5MZWZ0IH0gKSgpLFxuXHRcdHJ0bChcblx0XHRcdHsgdHJhbnNmb3JtT3JpZ2luOiAndG9wIGxlZnQnIH0sXG5cdFx0XHR7IHRyYW5zZm9ybU9yaWdpbjogJ3RvcCByaWdodCcgfVxuXHRcdCkoKVxuXHQpO1xufTtcblxuY29uc3QgbGFiZWxUcnVuY2F0aW9uID0gKCB7IGlzRmxvYXRpbmcgfSApID0+IHtcblx0aWYgKCBpc0Zsb2F0aW5nICkgcmV0dXJuICcnO1xuXG5cdHJldHVybiBjc3NgXG5cdFx0bWF4LXdpZHRoOiBjYWxjKCAxMDAlIC0gMTBweCApO1xuXHRcdG92ZXJmbG93OiBoaWRkZW47XG5cdFx0dGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG5cdFx0d2hpdGUtc3BhY2U6IG5vd3JhcDtcblx0YDtcbn07XG5cbmNvbnN0IEJhc2VMYWJlbCA9IHN0eWxlZCggVGV4dCApYFxuXHQmJiYge1xuXHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0bWFyZ2luOiAwO1xuXHRcdG1heC13aWR0aDogMTAwJTtcblx0XHRwYWRkaW5nOiAwO1xuXHRcdHBvaW50ZXItZXZlbnRzOiBub25lO1xuXHRcdHRvcDogNTAlO1xuXHRcdHRyYW5zaXRpb246IHRyYW5zZm9ybSAkeyBGTE9BVElOR19MQUJFTF9UUkFOU0lUSU9OX1NQRUVEIH0gbGluZWFyLFxuXHRcdFx0bWF4LXdpZHRoICR7IEZMT0FUSU5HX0xBQkVMX1RSQU5TSVRJT05fU1BFRUQgfSBsaW5lYXI7XG5cdFx0ei1pbmRleDogMTtcblxuXHRcdCR7IGxhYmVyQ29sb3IgfTtcblx0XHQkeyBsYWJlbEZvbnRTaXplIH07XG5cdFx0JHsgbGFiZWxQb3NpdGlvbiB9O1xuXHRcdCR7IGxhYmVsVHJ1bmNhdGlvbiB9O1xuXHRcdCR7IHJlZHVjZU1vdGlvbiggJ3RyYW5zaXRpb24nICkgfTtcblxuXHRcdCR7IHJ0bCggeyBsZWZ0OiAwIH0gKSB9XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBMYWJlbCA9ICggcHJvcHMgKSA9PiA8QmFzZUxhYmVsIHsgLi4ucHJvcHMgfSBhcz1cImxhYmVsXCIgLz47XG5cbmNvbnN0IGZpZWxkc2V0VG9wU3R5bGVzID0gKCB7IGlzRmxvYXRpbmdMYWJlbCB9ICkgPT4ge1xuXHRjb25zdCB0b3AgPSBpc0Zsb2F0aW5nTGFiZWwgPyAtNSA6IDA7XG5cdHJldHVybiBjc3MoIHsgdG9wIH0gKTtcbn07XG5cbmNvbnN0IGZpZWxkc2V0Rm9jdXNlZFN0eWxlcyA9ICggeyBkaXNhYmxlZCwgaXNGb2N1c2VkIH0gKSA9PiB7XG5cdGxldCBib3JkZXJDb2xvciA9IGlzRm9jdXNlZFxuXHRcdD8gY29sb3IoICd1aS5ib3JkZXJGb2N1cycgKVxuXHRcdDogY29sb3IoICd1aS5ib3JkZXInICk7XG5cblx0aWYgKCBkaXNhYmxlZCApIHtcblx0XHRib3JkZXJDb2xvciA9ICd1aS5ib3JkZXJEaXNhYmxlZCc7XG5cdH1cblxuXHRjb25zdCBib3JkZXJXaWR0aCA9IGlzRm9jdXNlZCA/IDIgOiAxO1xuXHRjb25zdCBib3JkZXJTdHlsZSA9ICdzb2xpZCc7XG5cblx0cmV0dXJuIGNzcyggeyBib3JkZXJDb2xvciwgYm9yZGVyU3R5bGUsIGJvcmRlcldpZHRoIH0gKTtcbn07XG5cbmV4cG9ydCBjb25zdCBGaWVsZHNldCA9IHN0eWxlZC5maWVsZHNldGBcblx0JiYmIHtcblx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdGJvcmRlci1yYWRpdXM6IGluaGVyaXQ7XG5cdFx0Ym90dG9tOiAwO1xuXHRcdGxlZnQ6IDA7XG5cdFx0bWFyZ2luOiAwO1xuXHRcdHBhZGRpbmc6IDA7XG5cdFx0cG9pbnRlci1ldmVudHM6IG5vbmU7XG5cdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdHJpZ2h0OiAwO1xuXG5cdFx0JHsgZmllbGRzZXRGb2N1c2VkU3R5bGVzIH07XG5cdFx0JHsgZmllbGRzZXRUb3BTdHlsZXMgfTtcblx0XHQkeyBydGwoIHsgcGFkZGluZ0xlZnQ6IDIgfSApIH1cblx0fVxuYDtcblxuY29uc3QgbGVnZW5kU2l6ZSA9ICggeyBpc0Zsb2F0aW5nLCBzaXplIH0gKSA9PiB7XG5cdGNvbnN0IG1heFdpZHRoID0gaXNGbG9hdGluZyA/IDEwMDAgOiAwLjAxO1xuXHRjb25zdCBzaXplcyA9IHtcblx0XHRkZWZhdWx0OiA5Ljc1LFxuXHRcdHNtYWxsOiA4LjI1LFxuXHR9O1xuXG5cdGNvbnN0IGZvbnRTaXplID0gc2l6ZXNbIHNpemUgXTtcblxuXHRyZXR1cm4gY3NzKCB7XG5cdFx0Zm9udFNpemUsXG5cdFx0bWF4V2lkdGgsXG5cdH0gKTtcbn07XG5cbmV4cG9ydCBjb25zdCBMZWdlbmQgPSBzdHlsZWQubGVnZW5kYFxuXHQmJiYge1xuXHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0aGVpZ2h0OiAxMXB4O1xuXHRcdGxpbmUtaGVpZ2h0OiAxMXB4O1xuXHRcdG1hcmdpbjogMDtcblx0XHRwYWRkaW5nOiAwO1xuXHRcdHRyYW5zaXRpb246IG1heC13aWR0aCAkeyBGTE9BVElOR19MQUJFTF9UUkFOU0lUSU9OX1NQRUVEIH0gbGluZWFyO1xuXHRcdHZpc2liaWxpdHk6IGhpZGRlbjtcblx0XHR3aWR0aDogYXV0bztcblxuXHRcdCR7IGxlZ2VuZFNpemUgfTtcblx0XHQkeyByZWR1Y2VNb3Rpb24oICd0cmFuc2l0aW9uJyApIH07XG5cdH1cbmA7XG5cbmNvbnN0IEJhc2VMZWdlbmRUZXh0ID0gc3R5bGVkKCBUZXh0IClgXG5cdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdGRpc3BsYXk6IGlubGluZS1ibG9jaztcblx0JHsgcnRsKCB7IHBhZGRpbmdMZWZ0OiA0LCBwYWRkaW5nUmlnaHQ6IDUgfSApIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBMZWdlbmRUZXh0ID0gKCBwcm9wcyApID0+IChcblx0PEJhc2VMZWdlbmRUZXh0IHsgLi4ucHJvcHMgfSBhcz1cInNwYW5cIiAvPlxuKTtcblxuZXhwb3J0IGNvbnN0IFN1ZmZpeCA9IHN0eWxlZC5zcGFuYFxuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRkaXNwbGF5OiBibG9jaztcbmA7XG4iXX0= */"));
};

var sizeStyles = function sizeStyles(_ref8) {
  var size = _ref8.size;
  var sizes = {
    default: {
      height: 30,
      lineHeight: 1,
      minHeight: 30
    },
    small: {
      height: 24,
      lineHeight: 1,
      minHeight: 24
    }
  };
  var style = sizes[size] || sizes.default;
  return /*#__PURE__*/(0, _core.css)(style, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

var placeholderStyles = function placeholderStyles(_ref9) {
  var isFilled = _ref9.isFilled,
      isFloating = _ref9.isFloating,
      isFloatingLabel = _ref9.isFloatingLabel;
  var opacity = 1;

  if (isFloatingLabel) {
    if (!isFilled && !isFloating) {
      opacity = 0;
    }
  }

  return /*#__PURE__*/(0, _core.css)("&::placeholder{opacity:", opacity, ";}&::-webkit-input-placeholder{line-height:normal;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
};

var dragStyles = function dragStyles(_ref10) {
  var isDragging = _ref10.isDragging,
      dragCursor = _ref10.dragCursor;
  var defaultArrowStyles = '';
  var activeDragCursorStyles = '';

  if (isDragging) {
    defaultArrowStyles = /*#__PURE__*/(0, _core.css)("cursor:", dragCursor, ";user-select:none;&::-webkit-outer-spin-button,&::-webkit-inner-spin-button{-webkit-appearance:none !important;margin:0 !important;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
  }

  if (isDragging && dragCursor) {
    activeDragCursorStyles = /*#__PURE__*/(0, _core.css)("&:active{cursor:", dragCursor, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
  }

  return /*#__PURE__*/(0, _core.css)(defaultArrowStyles, ";", activeDragCursorStyles, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}; // TODO: Resolve need to use &&& to increase specificity
// https://github.com/WordPress/gutenberg/issues/18483


var Input = (0, _styledBase.default)("input", {
  target: "e1cr7zh12",
  label: "Input"
})("&&&{background-color:transparent;box-sizing:border-box;border:none;box-shadow:none !important;color:", (0, _styleMixins.color)('black'), ";display:block;outline:none;padding-left:8px;padding-right:8px;width:100%;", dragStyles, ";", disabledStyles, ";", fontSizeStyles, ";", sizeStyles, ";", placeholderStyles, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.Input = Input;

var laberColor = function laberColor(_ref11) {
  var isFloatingLabel = _ref11.isFloatingLabel,
      isFilled = _ref11.isFilled,
      isFloating = _ref11.isFloating;
  var isPlaceholder = isFloatingLabel && !isFilled;
  var textColor = isPlaceholder || isFloating ? (0, _styleMixins.color)('ui.textDisabled') : 'currentColor';
  return /*#__PURE__*/(0, _core.css)({
    color: textColor
  }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

var labelFontSize = function labelFontSize(_ref12) {
  var isFloatingLabel = _ref12.isFloatingLabel,
      size = _ref12.size;
  var sizes = {
    default: '13px',
    small: '11px'
  };
  var fontSize = sizes[size];
  var lineHeight = isFloatingLabel ? 1.2 : null;
  return /*#__PURE__*/(0, _core.css)({
    fontSize: fontSize,
    lineHeight: lineHeight
  }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

var labelPosition = function labelPosition(_ref13) {
  var isFloatingLabel = _ref13.isFloatingLabel,
      isFloating = _ref13.isFloating,
      size = _ref13.size;
  var paddingBottom = isFloatingLabel ? 0 : 4;
  var position = isFloatingLabel ? 'absolute' : null;
  var pointerEvents = isFloating ? null : 'none';
  var isSmall = size === 'small';
  var offsetTop = isSmall ? 1 : 2;
  var offset = isSmall ? '-1px' : '-3px';
  var marginTop = isFloating ? 0 : offsetTop;
  var marginLeft = isFloatingLabel ? 8 : 0;
  var transform = isFloating ? "translate( 0, calc(-100% + ".concat(offset, ") ) scale( 0.75 )") : 'translate( 0, -50%) scale(1)';

  if (!isFloatingLabel) {
    transform = null;
  }

  var transition = isFloatingLabel ? "transform ".concat(FLOATING_LABEL_TRANSITION_SPEED, " linear") : null;
  return /*#__PURE__*/(0, _core.css)({
    marginTop: marginTop,
    paddingBottom: paddingBottom,
    position: position,
    pointerEvents: pointerEvents,
    transition: transition,
    transform: transform
  }, (0, _styleMixins.rtl)({
    marginLeft: marginLeft
  })(), (0, _styleMixins.rtl)({
    transformOrigin: 'top left'
  }, {
    transformOrigin: 'top right'
  })(), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

var _ref2 = process.env.NODE_ENV === "production" ? {
  name: "fjfd5j",
  styles: "max-width:calc( 100% - 10px );overflow:hidden;text-overflow:ellipsis;white-space:nowrap;"
} : {
  name: "fjfd5j",
  styles: "max-width:calc( 100% - 10px );overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var labelTruncation = function labelTruncation(_ref14) {
  var isFloating = _ref14.isFloating;
  if (isFloating) return '';
  return _ref2;
};

var BaseLabel = ( /*#__PURE__*/0, _styledBase.default)(_text.default, {
  target: "e1cr7zh13",
  label: "BaseLabel"
})("&&&{box-sizing:border-box;display:block;margin:0;max-width:100%;padding:0;pointer-events:none;top:50%;transition:transform ", FLOATING_LABEL_TRANSITION_SPEED, " linear,max-width ", FLOATING_LABEL_TRANSITION_SPEED, " linear;z-index:1;", laberColor, ";", labelFontSize, ";", labelPosition, ";", labelTruncation, ";", (0, _styleMixins.reduceMotion)('transition'), ";", (0, _styleMixins.rtl)({
  left: 0
}), "}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var Label = function Label(props) {
  return (0, _element.createElement)(BaseLabel, (0, _extends2.default)({}, props, {
    as: "label"
  }));
};

exports.Label = Label;

var fieldsetTopStyles = function fieldsetTopStyles(_ref15) {
  var isFloatingLabel = _ref15.isFloatingLabel;
  var top = isFloatingLabel ? -5 : 0;
  return /*#__PURE__*/(0, _core.css)({
    top: top
  }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

var fieldsetFocusedStyles = function fieldsetFocusedStyles(_ref16) {
  var disabled = _ref16.disabled,
      isFocused = _ref16.isFocused;
  var borderColor = isFocused ? (0, _styleMixins.color)('ui.borderFocus') : (0, _styleMixins.color)('ui.border');

  if (disabled) {
    borderColor = 'ui.borderDisabled';
  }

  var borderWidth = isFocused ? 2 : 1;
  var borderStyle = 'solid';
  return /*#__PURE__*/(0, _core.css)({
    borderColor: borderColor,
    borderStyle: borderStyle,
    borderWidth: borderWidth
  }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

var Fieldset = (0, _styledBase.default)("fieldset", {
  target: "e1cr7zh14",
  label: "Fieldset"
})("&&&{box-sizing:border-box;border-radius:inherit;bottom:0;left:0;margin:0;padding:0;pointer-events:none;position:absolute;right:0;", fieldsetFocusedStyles, ";", fieldsetTopStyles, ";", (0, _styleMixins.rtl)({
  paddingLeft: 2
}), "}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.Fieldset = Fieldset;

var legendSize = function legendSize(_ref17) {
  var isFloating = _ref17.isFloating,
      size = _ref17.size;
  var maxWidth = isFloating ? 1000 : 0.01;
  var sizes = {
    default: 9.75,
    small: 8.25
  };
  var fontSize = sizes[size];
  return /*#__PURE__*/(0, _core.css)({
    fontSize: fontSize,
    maxWidth: maxWidth
  }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

var Legend = (0, _styledBase.default)("legend", {
  target: "e1cr7zh15",
  label: "Legend"
})("&&&{box-sizing:border-box;display:block;height:11px;line-height:11px;margin:0;padding:0;transition:max-width ", FLOATING_LABEL_TRANSITION_SPEED, " linear;visibility:hidden;width:auto;", legendSize, ";", (0, _styleMixins.reduceMotion)('transition'), ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.Legend = Legend;
var BaseLegendText = ( /*#__PURE__*/0, _styledBase.default)(_text.default, {
  target: "e1cr7zh16",
  label: "BaseLegendText"
})("box-sizing:border-box;display:inline-block;", (0, _styleMixins.rtl)({
  paddingLeft: 4,
  paddingRight: 5
}), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");

var LegendText = function LegendText(props) {
  return (0, _element.createElement)(BaseLegendText, (0, _extends2.default)({}, props, {
    as: "span"
  }));
};

exports.LegendText = LegendText;
var Suffix = (0, _styledBase.default)("span", {
  target: "e1cr7zh17",
  label: "Suffix"
})(process.env.NODE_ENV === "production" ? {
  name: "1pxuk39",
  styles: "box-sizing:border-box;display:block;"
} : {
  name: "1pxuk39",
  styles: "box-sizing:border-box;display:block;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
exports.Suffix = Suffix;
//# sourceMappingURL=input-control-styles.js.map