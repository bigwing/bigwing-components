{"version":3,"sources":["@wordpress/components/src/utils/rtl.js"],"names":["LOWER_LEFT_REGEXP","RegExp","LOWER_RIGHT_REGEXP","UPPER_LEFT_REGEXP","UPPER_RIGHT_REGEXP","getRTL","document","documentElement","dir","useRTL","getConvertedKey","key","test","replace","convertLTRToRTL","ltrStyles","_value","rtl","rtlStyles","isRTL"],"mappings":";;;;;;;;;;AAGA;;AACA;;AAJA;;;AAMA,IAAMA,iBAAiB,GAAG,IAAIC,MAAJ,CAAY,QAAZ,CAA1B;AACA,IAAMC,kBAAkB,GAAG,IAAID,MAAJ,CAAY,SAAZ,CAA3B;AACA,IAAME,iBAAiB,GAAG,IAAIF,MAAJ,CAAY,OAAZ,CAA1B;AACA,IAAMG,kBAAkB,GAAG,IAAIH,MAAJ,CAAY,QAAZ,CAA3B;AAEA;;;;;;AAKO,SAASI,MAAT,GAAkB;AACxB,SAAO,CAAC,EAAIC,QAAQ,IAAIA,QAAQ,CAACC,eAAT,CAAyBC,GAAzB,KAAiC,KAAjD,CAAR;AACA;AAED;;;;;;;AAKO,SAASC,MAAT,GAAkB;AACxB,SAAOJ,MAAM,EAAb;AACA;AAED;;;;;;;;;AAOA,SAASK,eAAT,CAA0BC,GAA1B,EAAgC;AAC/B,MAAKA,GAAG,KAAK,MAAb,EAAsB;AACrB,WAAO,OAAP;AACA;;AAED,MAAKA,GAAG,KAAK,OAAb,EAAuB;AACtB,WAAO,MAAP;AACA;;AAED,MAAKX,iBAAiB,CAACY,IAAlB,CAAwBD,GAAxB,CAAL,EAAqC;AACpC,WAAOA,GAAG,CAACE,OAAJ,CAAab,iBAAb,EAAgC,QAAhC,CAAP;AACA;;AAED,MAAKE,kBAAkB,CAACU,IAAnB,CAAyBD,GAAzB,CAAL,EAAsC;AACrC,WAAOA,GAAG,CAACE,OAAJ,CAAaX,kBAAb,EAAiC,OAAjC,CAAP;AACA;;AAED,MAAKC,iBAAiB,CAACS,IAAlB,CAAwBD,GAAxB,CAAL,EAAqC;AACpC,WAAOA,GAAG,CAACE,OAAJ,CAAaV,iBAAb,EAAgC,OAAhC,CAAP;AACA;;AAED,MAAKC,kBAAkB,CAACQ,IAAnB,CAAyBD,GAAzB,CAAL,EAAsC;AACrC,WAAOA,GAAG,CAACE,OAAJ,CAAaT,kBAAb,EAAiC,MAAjC,CAAP;AACA;;AAED,SAAOO,GAAP;AACA;AAED;;;;;;;;;AAOO,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,GAAsB;AAAA,MAApBC,SAAoB,uEAAR,EAAQ;AACpD,SAAO,qBAASA,SAAT,EAAoB,UAAEC,MAAF,EAAUL,GAAV;AAAA,WAAmBD,eAAe,CAAEC,GAAF,CAAlC;AAAA,GAApB,CAAP;AACA,CAFM;AAIP;;;;;;;;;;;;AAQO,SAASM,GAAT,GAA0C;AAAA,MAA5BF,SAA4B,uEAAhB,EAAgB;AAAA,MAAZG,SAAY;AAChD,SAAO,YAAM;AACZ,QAAMC,KAAK,GAAGd,MAAM,EAApB;;AAEA,QAAKa,SAAL,EAAiB;AAChB,aAAOC,KAAK,gBAAG,eAAKD,SAAL,i+GAAH,gBAAsB,eAAKH,SAAL,i+GAAlC;AACA;;AAED,WAAOI,KAAK,gBAAG,eAAKL,eAAe,CAAEC,SAAF,CAApB,i+GAAH,gBAAyC,eAAKA,SAAL,i+GAArD;AACA,GARD;AASA","sourcesContent":["/**\n * External dependencies\n */\nimport { css } from '@emotion/core';\nimport { mapKeys } from 'lodash';\n\nconst LOWER_LEFT_REGEXP = new RegExp( /-left/g );\nconst LOWER_RIGHT_REGEXP = new RegExp( /-right/g );\nconst UPPER_LEFT_REGEXP = new RegExp( /Left/g );\nconst UPPER_RIGHT_REGEXP = new RegExp( /Right/g );\n\n/**\n * Checks to see whether the document is set to rtl.\n *\n * @return {boolean} Whether document is RTL.\n */\nexport function getRTL() {\n\treturn !! ( document && document.documentElement.dir === 'rtl' );\n}\n\n/**\n * Simple hook to retrieve RTL direction value\n *\n * @return {boolean} Whether document is RTL.\n */\nexport function useRTL() {\n\treturn getRTL();\n}\n\n/**\n * Flips a CSS property from left <-> right.\n *\n * @param {string} key The CSS property name.\n *\n * @return {string} The flipped CSS property name, if applicable.\n */\nfunction getConvertedKey( key ) {\n\tif ( key === 'left' ) {\n\t\treturn 'right';\n\t}\n\n\tif ( key === 'right' ) {\n\t\treturn 'left';\n\t}\n\n\tif ( LOWER_LEFT_REGEXP.test( key ) ) {\n\t\treturn key.replace( LOWER_LEFT_REGEXP, '-right' );\n\t}\n\n\tif ( LOWER_RIGHT_REGEXP.test( key ) ) {\n\t\treturn key.replace( LOWER_RIGHT_REGEXP, '-left' );\n\t}\n\n\tif ( UPPER_LEFT_REGEXP.test( key ) ) {\n\t\treturn key.replace( UPPER_LEFT_REGEXP, 'Right' );\n\t}\n\n\tif ( UPPER_RIGHT_REGEXP.test( key ) ) {\n\t\treturn key.replace( UPPER_RIGHT_REGEXP, 'Left' );\n\t}\n\n\treturn key;\n}\n\n/**\n * An incredibly basic ltr -> rtl converter for style properties\n *\n * @param {Object} ltrStyles\n *\n * @return {Object} Converted ltr -> rtl styles\n */\nexport const convertLTRToRTL = ( ltrStyles = {} ) => {\n\treturn mapKeys( ltrStyles, ( _value, key ) => getConvertedKey( key ) );\n};\n\n/**\n * A higher-order function that create an incredibly basic ltr -> rtl style converter for CSS objects.\n *\n * @param {Object} ltrStyles Ltr styles. Converts and renders from ltr -> rtl styles, if applicable.\n * @param {null|Object} rtlStyles Rtl styles. Renders if provided.\n *\n * @return {Function} A function to output CSS styles for Emotion's renderer\n */\nexport function rtl( ltrStyles = {}, rtlStyles ) {\n\treturn () => {\n\t\tconst isRTL = getRTL();\n\n\t\tif ( rtlStyles ) {\n\t\t\treturn isRTL ? css( rtlStyles ) : css( ltrStyles );\n\t\t}\n\n\t\treturn isRTL ? css( convertLTRToRTL( ltrStyles ) ) : css( ltrStyles );\n\t};\n}\n"]}