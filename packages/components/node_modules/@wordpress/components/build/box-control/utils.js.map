{"version":3,"sources":["@wordpress/components/src/box-control/utils.js"],"names":["LABELS","all","top","bottom","left","right","mixed","DEFAULT_VALUES","DEFAULT_VISUALIZER_VALUES","mode","arr","sort","a","b","filter","v","length","pop","getAllValue","values","parsedValues","Object","map","parseUnit","allValues","value","allUnits","every","unit","allValue","isValuesMixed","isMixed","isNaN","parseFloat","isValuesDefined","undefined","Boolean"],"mappings":";;;;;;;;;;AAGA;;AAKA;;AAKA;;AAbA;;;;AAKA;;;;AAKA;;;AAKO,IAAMA,MAAM,GAAG;AACrBC,EAAAA,GAAG,EAAE,cAAI,KAAJ,CADgB;AAErBC,EAAAA,GAAG,EAAE,cAAI,KAAJ,CAFgB;AAGrBC,EAAAA,MAAM,EAAE,cAAI,QAAJ,CAHa;AAIrBC,EAAAA,IAAI,EAAE,cAAI,MAAJ,CAJe;AAKrBC,EAAAA,KAAK,EAAE,cAAI,OAAJ,CALc;AAMrBC,EAAAA,KAAK,EAAE,cAAI,OAAJ;AANc,CAAf;;AASA,IAAMC,cAAc,GAAG;AAC7BL,EAAAA,GAAG,EAAE,IADwB;AAE7BG,EAAAA,KAAK,EAAE,IAFsB;AAG7BF,EAAAA,MAAM,EAAE,IAHqB;AAI7BC,EAAAA,IAAI,EAAE;AAJuB,CAAvB;;AAOA,IAAMI,yBAAyB,GAAG;AACxCN,EAAAA,GAAG,EAAE,KADmC;AAExCG,EAAAA,KAAK,EAAE,KAFiC;AAGxCF,EAAAA,MAAM,EAAE,KAHgC;AAIxCC,EAAAA,IAAI,EAAE;AAJkC,CAAlC;AAOP;;;;;;;;;;AAOA,SAASK,IAAT,CAAeC,GAAf,EAAqB;AACpB,SAAOA,GAAG,CACRC,IADK,CAEL,UAAEC,CAAF,EAAKC,CAAL;AAAA,WACCH,GAAG,CAACI,MAAJ,CAAY,UAAEC,CAAF;AAAA,aAASA,CAAC,KAAKH,CAAf;AAAA,KAAZ,EAA+BI,MAA/B,GACAN,GAAG,CAACI,MAAJ,CAAY,UAAEC,CAAF;AAAA,aAASA,CAAC,KAAKF,CAAf;AAAA,KAAZ,EAA+BG,MAFhC;AAAA,GAFK,EAMLC,GANK,EAAP;AAOA;AAED;;;;;;;;AAMO,SAASC,WAAT,GAAoC;AAAA,MAAdC,MAAc,uEAAL,EAAK;AAC1C,MAAMC,YAAY,GAAGC,MAAM,CAACF,MAAP,CAAeA,MAAf,EAAwBG,GAAxB,CAA6BC,gBAA7B,CAArB;AAEA,MAAMC,SAAS,GAAGJ,YAAY,CAACE,GAAb,CAAkB,UAAEG,KAAF;AAAA,WAAaA,KAAK,CAAE,CAAF,CAAlB;AAAA,GAAlB,CAAlB;AACA,MAAMC,QAAQ,GAAGN,YAAY,CAACE,GAAb,CAAkB,UAAEG,KAAF;AAAA,WAAaA,KAAK,CAAE,CAAF,CAAlB;AAAA,GAAlB,CAAjB;AAEA,MAAMA,KAAK,GAAGD,SAAS,CAACG,KAAV,CAAiB,UAAEZ,CAAF;AAAA,WAASA,CAAC,KAAKS,SAAS,CAAE,CAAF,CAAxB;AAAA,GAAjB,IACXA,SAAS,CAAE,CAAF,CADE,GAEX,EAFH;AAGA,MAAMI,IAAI,GAAGnB,IAAI,CAAEiB,QAAF,CAAjB;AAEA;;;;;;;;;;AASA,MAAMG,QAAQ,GAAG,sBAAUJ,KAAV,cAAwBA,KAAxB,SAAkCG,IAAlC,IAA4C,IAA7D;AAEA,SAAOC,QAAP;AACA;AAED;;;;;;;;AAMO,SAASC,aAAT,GAAsC;AAAA,MAAdX,MAAc,uEAAL,EAAK;AAC5C,MAAMU,QAAQ,GAAGX,WAAW,CAAEC,MAAF,CAA5B;AACA,MAAMY,OAAO,GAAGC,KAAK,CAAEC,UAAU,CAAEJ,QAAF,CAAZ,CAArB;AAEA,SAAOE,OAAP;AACA;AAED;;;;;;;;;AAOO,SAASG,eAAT,CAA0Bf,MAA1B,EAAmC;AACzC,SACCA,MAAM,KAAKgB,SAAX,IACA,CAAE,qBAASd,MAAM,CAACF,MAAP,CAAeA,MAAf,EAAwBL,MAAxB,CAAgCsB,OAAhC,CAAT,CAFH;AAIA","sourcesContent":["/**\n * External dependencies\n */\nimport { isEmpty, isNumber } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport { parseUnit } from '../unit-control/utils';\n\nexport const LABELS = {\n\tall: __( 'All' ),\n\ttop: __( 'Top' ),\n\tbottom: __( 'Bottom' ),\n\tleft: __( 'Left' ),\n\tright: __( 'Right' ),\n\tmixed: __( 'Mixed' ),\n};\n\nexport const DEFAULT_VALUES = {\n\ttop: null,\n\tright: null,\n\tbottom: null,\n\tleft: null,\n};\n\nexport const DEFAULT_VISUALIZER_VALUES = {\n\ttop: false,\n\tright: false,\n\tbottom: false,\n\tleft: false,\n};\n\n/**\n * Gets an items with the most occurance within an array\n * https://stackoverflow.com/a/20762713\n *\n * @param {Array<any>} arr Array of items to check.\n * @return {any} The item with the most occurances.\n */\nfunction mode( arr ) {\n\treturn arr\n\t\t.sort(\n\t\t\t( a, b ) =>\n\t\t\t\tarr.filter( ( v ) => v === a ).length -\n\t\t\t\tarr.filter( ( v ) => v === b ).length\n\t\t)\n\t\t.pop();\n}\n\n/**\n * Gets the 'all' input value and unit from values data.\n *\n * @param {Object} values Box values.\n * @return {string} A value + unit for the 'all' input.\n */\nexport function getAllValue( values = {} ) {\n\tconst parsedValues = Object.values( values ).map( parseUnit );\n\n\tconst allValues = parsedValues.map( ( value ) => value[ 0 ] );\n\tconst allUnits = parsedValues.map( ( value ) => value[ 1 ] );\n\n\tconst value = allValues.every( ( v ) => v === allValues[ 0 ] )\n\t\t? allValues[ 0 ]\n\t\t: '';\n\tconst unit = mode( allUnits );\n\n\t/**\n\t * The isNumber check is important. On reset actions, the incoming value\n\t * may be null or an empty string.\n\t *\n\t * Also, the value may also be zero (0), which is considered a valid unit value.\n\t *\n\t * isNumber() is more specific for these cases, rather than relying on a\n\t * simple truthy check.\n\t */\n\tconst allValue = isNumber( value ) ? `${ value }${ unit }` : null;\n\n\treturn allValue;\n}\n\n/**\n * Checks to determine if values are mixed.\n *\n * @param {Object} values Box values.\n * @return {boolean} Whether values are mixed.\n */\nexport function isValuesMixed( values = {} ) {\n\tconst allValue = getAllValue( values );\n\tconst isMixed = isNaN( parseFloat( allValue ) );\n\n\treturn isMixed;\n}\n\n/**\n * Checks to determine if values are defined.\n *\n * @param {Object} values Box values.\n *\n * @return {boolean} Whether values are mixed.\n */\nexport function isValuesDefined( values ) {\n\treturn (\n\t\tvalues !== undefined &&\n\t\t! isEmpty( Object.values( values ).filter( Boolean ) )\n\t);\n}\n"]}