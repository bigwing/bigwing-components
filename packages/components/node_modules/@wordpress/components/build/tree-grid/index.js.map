{"version":3,"sources":["@wordpress/components/src/tree-grid/index.js"],"names":["getRowFocusables","rowElement","focusablesInRow","focus","focusable","find","length","filter","closest","TreeGrid","children","props","onKeyDown","event","keyCode","metaKey","ctrlKey","altKey","shiftKey","hasModifierKeyPressed","UP","DOWN","LEFT","RIGHT","stopPropagation","document","activeElement","treeGridElement","currentTarget","contains","activeRow","currentColumnIndex","indexOf","nextIndex","Math","max","min","preventDefault","rows","Array","from","querySelectorAll","currentRowIndex","nextRowIndex","focusablesInNextRow"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { includes } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { focus } from '@wordpress/dom';\nimport { useCallback } from '@wordpress/element';\nimport { UP, DOWN, LEFT, RIGHT } from '@wordpress/keycodes';\n\n/**\n * Internal dependencies\n */\nimport RovingTabIndexContainer from './roving-tab-index';\n\n/**\n * Return focusables in a row element, excluding those from other branches\n * nested within the row.\n *\n * @param {Element} rowElement The DOM element representing the row.\n *\n * @return {?Array} The array of focusables in the row.\n */\nfunction getRowFocusables( rowElement ) {\n\tconst focusablesInRow = focus.focusable.find( rowElement );\n\n\tif ( ! focusablesInRow || ! focusablesInRow.length ) {\n\t\treturn;\n\t}\n\n\treturn focusablesInRow.filter( ( focusable ) => {\n\t\treturn focusable.closest( '[role=\"row\"]' ) === rowElement;\n\t} );\n}\n\n/**\n * Renders both a table and tbody element, used to create a tree hierarchy.\n *\n * @see https://github.com/WordPress/gutenberg/blob/master/packages/components/src/tree-grid/README.md\n *\n * @param {Object}    props          Component props.\n * @param {WPElement} props.children Children to be rendered\n */\nexport default function TreeGrid( { children, ...props } ) {\n\tconst onKeyDown = useCallback( ( event ) => {\n\t\tconst { keyCode, metaKey, ctrlKey, altKey, shiftKey } = event;\n\n\t\tconst hasModifierKeyPressed = metaKey || ctrlKey || altKey || shiftKey;\n\n\t\tif (\n\t\t\thasModifierKeyPressed ||\n\t\t\t! includes( [ UP, DOWN, LEFT, RIGHT ], keyCode )\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// The event will be handled, stop propagation.\n\t\tevent.stopPropagation();\n\n\t\tconst { activeElement } = document;\n\t\tconst { currentTarget: treeGridElement } = event;\n\t\tif ( ! treeGridElement.contains( activeElement ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Calculate the columnIndex of the active element.\n\t\tconst activeRow = activeElement.closest( '[role=\"row\"]' );\n\t\tconst focusablesInRow = getRowFocusables( activeRow );\n\t\tconst currentColumnIndex = focusablesInRow.indexOf( activeElement );\n\n\t\tif ( includes( [ LEFT, RIGHT ], keyCode ) ) {\n\t\t\t// Calculate to the next element.\n\t\t\tlet nextIndex;\n\t\t\tif ( keyCode === LEFT ) {\n\t\t\t\tnextIndex = Math.max( 0, currentColumnIndex - 1 );\n\t\t\t} else {\n\t\t\t\tnextIndex = Math.min(\n\t\t\t\t\tcurrentColumnIndex + 1,\n\t\t\t\t\tfocusablesInRow.length - 1\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Focus is either at the left or right edge of the grid. Do nothing.\n\t\t\tif ( nextIndex === currentColumnIndex ) {\n\t\t\t\t// Prevent key use for anything else. For example, Voiceover\n\t\t\t\t// will start reading text on continued use of left/right arrow\n\t\t\t\t// keys.\n\t\t\t\tevent.preventDefault();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Focus the next element.\n\t\t\tfocusablesInRow[ nextIndex ].focus();\n\n\t\t\t// Prevent key use for anything else. This ensures Voiceover\n\t\t\t// doesn't try to handle key navigation.\n\t\t\tevent.preventDefault();\n\t\t} else if ( includes( [ UP, DOWN ], keyCode ) ) {\n\t\t\t// Calculate the rowIndex of the next row.\n\t\t\tconst rows = Array.from(\n\t\t\t\ttreeGridElement.querySelectorAll( '[role=\"row\"]' )\n\t\t\t);\n\t\t\tconst currentRowIndex = rows.indexOf( activeRow );\n\t\t\tlet nextRowIndex;\n\n\t\t\tif ( keyCode === UP ) {\n\t\t\t\tnextRowIndex = Math.max( 0, currentRowIndex - 1 );\n\t\t\t} else {\n\t\t\t\tnextRowIndex = Math.min( currentRowIndex + 1, rows.length - 1 );\n\t\t\t}\n\n\t\t\t// Focus is either at the top or bottom edge of the grid. Do nothing.\n\t\t\tif ( nextRowIndex === currentRowIndex ) {\n\t\t\t\t// Prevent key use for anything else. For example, Voiceover\n\t\t\t\t// will start navigating horizontally when reaching the vertical\n\t\t\t\t// bounds of a table.\n\t\t\t\tevent.preventDefault();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get the focusables in the next row.\n\t\t\tconst focusablesInNextRow = getRowFocusables(\n\t\t\t\trows[ nextRowIndex ]\n\t\t\t);\n\n\t\t\t// If for some reason there are no focusables in the next row, do nothing.\n\t\t\tif ( ! focusablesInNextRow || ! focusablesInNextRow.length ) {\n\t\t\t\t// Prevent key use for anything else. For example, Voiceover\n\t\t\t\t// will still focus text when using arrow keys, while this\n\t\t\t\t// component should limit navigation to focusables.\n\t\t\t\tevent.preventDefault();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Try to focus the element in the next row that's at a similar column to the activeElement.\n\t\t\tconst nextIndex = Math.min(\n\t\t\t\tcurrentColumnIndex,\n\t\t\t\tfocusablesInNextRow.length - 1\n\t\t\t);\n\t\t\tfocusablesInNextRow[ nextIndex ].focus();\n\n\t\t\t// Prevent key use for anything else. This ensures Voiceover\n\t\t\t// doesn't try to handle key navigation.\n\t\t\tevent.preventDefault();\n\t\t}\n\t}, [] );\n\n\treturn (\n\t\t<RovingTabIndexContainer>\n\t\t\t{ /* Disable reason: A treegrid is implemented using a table element. */ }\n\t\t\t{ /* eslint-disable-next-line jsx-a11y/no-noninteractive-element-to-interactive-role */ }\n\t\t\t<table { ...props } role=\"treegrid\" onKeyDown={ onKeyDown }>\n\t\t\t\t<tbody>{ children }</tbody>\n\t\t\t</table>\n\t\t</RovingTabIndexContainer>\n\t);\n}\n\nexport { default as TreeGridRow } from './row';\nexport { default as TreeGridCell } from './cell';\nexport { default as TreeGridItem } from './item';\n"]}