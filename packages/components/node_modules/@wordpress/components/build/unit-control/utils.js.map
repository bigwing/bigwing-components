{"version":3,"sources":["@wordpress/components/src/unit-control/utils.js"],"names":["CSS_UNITS","value","label","default","DEFAULT_UNIT","getParsedValue","unit","units","initialValue","parseUnit","hasUnits","length","String","trim","num","parseFloat","isNaN","unitMatch","match","undefined","toLowerCase","find","item","getValidParsedUnit","next","fallbackValue","fallbackUnit","parsedValue","parsedUnit","baseValue","baseUnit"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { isEmpty } from 'lodash';\n\nexport const CSS_UNITS = [\n\t{ value: 'px', label: 'px', default: 0 },\n\t{ value: '%', label: '%', default: 10 },\n\t{ value: 'em', label: 'em', default: 0 },\n\t{ value: 'rem', label: 'rem', default: 0 },\n\t{ value: 'vw', label: 'vw', default: 10 },\n\t{ value: 'vh', label: 'vh', default: 10 },\n];\n\nexport const DEFAULT_UNIT = CSS_UNITS[ 0 ];\n\n/**\n * Handles legacy value + unit handling.\n * This component use to manage both incoming value and units separately.\n *\n * Moving forward, ideally the value should be a string that contains both\n * the value and unit, example: '10px'\n *\n * @param {number|string} value Value\n * @param {string} unit Unit value\n * @param {Array<Object>} units Units to derive from.\n * @return {Array<number, string>} The extracted number and unit.\n */\nexport function getParsedValue( value, unit, units ) {\n\tconst initialValue = unit ? `${ value }${ unit }` : value;\n\n\treturn parseUnit( initialValue, units );\n}\n\n/**\n * Checks if units are defined.\n *\n * @param {any} units Units to check.\n * @return {boolean} Whether units are defined.\n */\nexport function hasUnits( units ) {\n\treturn ! isEmpty( units ) && units.length > 1 && units !== false;\n}\n\n/**\n * Parses a number and unit from a value.\n *\n * @param {string} initialValue Value to parse\n * @param {Array<Object>} units Units to derive from.\n * @return {Array<number, string>} The extracted number and unit.\n */\nexport function parseUnit( initialValue, units = CSS_UNITS ) {\n\tconst value = String( initialValue ).trim();\n\n\tlet num = parseFloat( value, 10 );\n\tnum = isNaN( num ) ? '' : num;\n\n\tconst unitMatch = value.match( /[\\d.\\-\\+]*\\s*(.*)/ )[ 1 ];\n\n\tlet unit = unitMatch !== undefined ? unitMatch : '';\n\tunit = unit.toLowerCase();\n\n\tif ( hasUnits( units ) ) {\n\t\tconst match = units.find( ( item ) => item.value === unit );\n\t\tunit = match?.value;\n\t}\n\n\treturn [ num, unit ];\n}\n\n/**\n * Parses a number and unit from a value. Validates parsed value, using fallback\n * value if invalid.\n *\n * @param {number|string} next The next value.\n * @param {Array<Object>} units Units to derive from.\n * @param {number|string} fallbackValue The fallback value.\n * @param {string} fallbackUnit The fallback value.\n * @return {Array<number, string>} The extracted number and unit.\n */\nexport function getValidParsedUnit( next, units, fallbackValue, fallbackUnit ) {\n\tconst [ parsedValue, parsedUnit ] = parseUnit( next, units );\n\tlet baseValue = parsedValue;\n\tlet baseUnit;\n\n\tif ( isNaN( parsedValue ) || parsedValue === '' ) {\n\t\tbaseValue = fallbackValue;\n\t}\n\n\tbaseUnit = parsedUnit || fallbackUnit;\n\n\t/**\n\t * If no unit is found, attempt to use the first value from the collection\n\t * of units as a default fallback.\n\t */\n\tif ( hasUnits( units ) && ! baseUnit ) {\n\t\tbaseUnit = units[ 0 ]?.value;\n\t}\n\n\treturn [ baseValue, baseUnit ];\n}\n"]}