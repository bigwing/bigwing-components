{"version":3,"sources":["@wordpress/blocks/src/api/serializer.js"],"names":["getBlockDefaultClassName","blockName","className","replace","getBlockMenuDefaultClassName","getSaveElement","blockTypeOrName","attributes","innerBlocks","blockType","save","prototype","Component","instance","render","bind","element","props","getSaveContent","getCommentAttributes","accumulator","attributeSchema","key","value","undefined","source","default","serializeAttributes","JSON","stringify","getBlockContent","block","saveContent","originalContent","isValid","length","name","error","getCommentDelimitedContent","rawBlockName","content","serializedAttributes","slice","serializeBlock","isInnerBlocks","saveAttributes","serialize","blocks","options","map","join"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { isEmpty, reduce, isObject, castArray, startsWith } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { Component, cloneElement, renderToString } from '@wordpress/element';\nimport { hasFilter, applyFilters } from '@wordpress/hooks';\nimport isShallowEqual from '@wordpress/is-shallow-equal';\n\n/**\n * Internal dependencies\n */\nimport {\n\tgetBlockType,\n\tgetFreeformContentHandlerName,\n\tgetUnregisteredTypeHandlerName,\n} from './registration';\nimport { normalizeBlockType } from './utils';\nimport BlockContentProvider from '../block-content-provider';\n\n/**\n * @typedef {Object} WPBlockSerializationOptions Serialization Options.\n *\n * @property {boolean} isInnerBlocks Whether we are serializing inner blocks.\n */\n\n/**\n * Returns the block's default classname from its name.\n *\n * @param {string} blockName The block name.\n *\n * @return {string} The block's default class.\n */\nexport function getBlockDefaultClassName( blockName ) {\n\t// Generated HTML classes for blocks follow the `wp-block-{name}` nomenclature.\n\t// Blocks provided by WordPress drop the prefixes 'core/' or 'core-' (used in 'core-embed/').\n\tconst className =\n\t\t'wp-block-' + blockName.replace( /\\//, '-' ).replace( /^core-/, '' );\n\n\treturn applyFilters(\n\t\t'blocks.getBlockDefaultClassName',\n\t\tclassName,\n\t\tblockName\n\t);\n}\n\n/**\n * Returns the block's default menu item classname from its name.\n *\n * @param {string} blockName The block name.\n *\n * @return {string} The block's default menu item class.\n */\nexport function getBlockMenuDefaultClassName( blockName ) {\n\t// Generated HTML classes for blocks follow the `editor-block-list-item-{name}` nomenclature.\n\t// Blocks provided by WordPress drop the prefixes 'core/' or 'core-' (used in 'core-embed/').\n\tconst className =\n\t\t'editor-block-list-item-' +\n\t\tblockName.replace( /\\//, '-' ).replace( /^core-/, '' );\n\n\treturn applyFilters(\n\t\t'blocks.getBlockMenuDefaultClassName',\n\t\tclassName,\n\t\tblockName\n\t);\n}\n\n/**\n * Given a block type containing a save render implementation and attributes, returns the\n * enhanced element to be saved or string when raw HTML expected.\n *\n * @param {string|Object} blockTypeOrName   Block type or name.\n * @param {Object}        attributes        Block attributes.\n * @param {?Array}        innerBlocks       Nested blocks.\n *\n * @return {Object|string} Save element or raw HTML string.\n */\nexport function getSaveElement(\n\tblockTypeOrName,\n\tattributes,\n\tinnerBlocks = []\n) {\n\tconst blockType = normalizeBlockType( blockTypeOrName );\n\tlet { save } = blockType;\n\n\t// Component classes are unsupported for save since serialization must\n\t// occur synchronously. For improved interoperability with higher-order\n\t// components which often return component class, emulate basic support.\n\tif ( save.prototype instanceof Component ) {\n\t\tconst instance = new save( { attributes } );\n\t\tsave = instance.render.bind( instance );\n\t}\n\n\tlet element = save( { attributes, innerBlocks } );\n\n\tif (\n\t\tisObject( element ) &&\n\t\thasFilter( 'blocks.getSaveContent.extraProps' )\n\t) {\n\t\t/**\n\t\t * Filters the props applied to the block save result element.\n\t\t *\n\t\t * @param {Object}  props      Props applied to save element.\n\t\t * @param {WPBlock} blockType  Block type definition.\n\t\t * @param {Object}  attributes Block attributes.\n\t\t */\n\t\tconst props = applyFilters(\n\t\t\t'blocks.getSaveContent.extraProps',\n\t\t\t{ ...element.props },\n\t\t\tblockType,\n\t\t\tattributes\n\t\t);\n\n\t\tif ( ! isShallowEqual( props, element.props ) ) {\n\t\t\telement = cloneElement( element, props );\n\t\t}\n\t}\n\n\t/**\n\t * Filters the save result of a block during serialization.\n\t *\n\t * @param {WPElement} element    Block save result.\n\t * @param {WPBlock}   blockType  Block type definition.\n\t * @param {Object}    attributes Block attributes.\n\t */\n\telement = applyFilters(\n\t\t'blocks.getSaveElement',\n\t\telement,\n\t\tblockType,\n\t\tattributes\n\t);\n\n\treturn (\n\t\t<BlockContentProvider innerBlocks={ innerBlocks }>\n\t\t\t{ element }\n\t\t</BlockContentProvider>\n\t);\n}\n\n/**\n * Given a block type containing a save render implementation and attributes, returns the\n * static markup to be saved.\n *\n * @param {string|Object} blockTypeOrName Block type or name.\n * @param {Object}        attributes      Block attributes.\n * @param {?Array}        innerBlocks     Nested blocks.\n *\n * @return {string} Save content.\n */\nexport function getSaveContent( blockTypeOrName, attributes, innerBlocks ) {\n\tconst blockType = normalizeBlockType( blockTypeOrName );\n\n\treturn renderToString(\n\t\tgetSaveElement( blockType, attributes, innerBlocks )\n\t);\n}\n\n/**\n * Returns attributes which are to be saved and serialized into the block\n * comment delimiter.\n *\n * When a block exists in memory it contains as its attributes both those\n * parsed the block comment delimiter _and_ those which matched from the\n * contents of the block.\n *\n * This function returns only those attributes which are needed to persist and\n * which cannot be matched from the block content.\n *\n * @param {Object<string,*>} blockType     Block type.\n * @param {Object<string,*>} attributes Attributes from in-memory block data.\n *\n * @return {Object<string,*>} Subset of attributes for comment serialization.\n */\nexport function getCommentAttributes( blockType, attributes ) {\n\treturn reduce(\n\t\tblockType.attributes,\n\t\t( accumulator, attributeSchema, key ) => {\n\t\t\tconst value = attributes[ key ];\n\t\t\t// Ignore undefined values.\n\t\t\tif ( undefined === value ) {\n\t\t\t\treturn accumulator;\n\t\t\t}\n\n\t\t\t// Ignore all attributes but the ones with an \"undefined\" source\n\t\t\t// \"undefined\" source refers to attributes saved in the block comment.\n\t\t\tif ( attributeSchema.source !== undefined ) {\n\t\t\t\treturn accumulator;\n\t\t\t}\n\n\t\t\t// Ignore default value.\n\t\t\tif (\n\t\t\t\t'default' in attributeSchema &&\n\t\t\t\tattributeSchema.default === value\n\t\t\t) {\n\t\t\t\treturn accumulator;\n\t\t\t}\n\n\t\t\t// Otherwise, include in comment set.\n\t\t\taccumulator[ key ] = value;\n\t\t\treturn accumulator;\n\t\t},\n\t\t{}\n\t);\n}\n\n/**\n * Given an attributes object, returns a string in the serialized attributes\n * format prepared for post content.\n *\n * @param {Object} attributes Attributes object.\n *\n * @return {string} Serialized attributes.\n */\nexport function serializeAttributes( attributes ) {\n\treturn (\n\t\tJSON.stringify( attributes )\n\t\t\t// Don't break HTML comments.\n\t\t\t.replace( /--/g, '\\\\u002d\\\\u002d' )\n\n\t\t\t// Don't break non-standard-compliant tools.\n\t\t\t.replace( /</g, '\\\\u003c' )\n\t\t\t.replace( />/g, '\\\\u003e' )\n\t\t\t.replace( /&/g, '\\\\u0026' )\n\n\t\t\t// Bypass server stripslashes behavior which would unescape stringify's\n\t\t\t// escaping of quotation mark.\n\t\t\t//\n\t\t\t// See: https://developer.wordpress.org/reference/functions/wp_kses_stripslashes/\n\t\t\t.replace( /\\\\\"/g, '\\\\u0022' )\n\t);\n}\n\n/**\n * Given a block object, returns the Block's Inner HTML markup.\n *\n * @param {Object} block Block instance.\n *\n * @return {string} HTML.\n */\nexport function getBlockContent( block ) {\n\t// @todo why not getBlockInnerHtml?\n\n\t// If block was parsed as invalid or encounters an error while generating\n\t// save content, use original content instead to avoid content loss. If a\n\t// block contains nested content, exempt it from this condition because we\n\t// otherwise have no access to its original content and content loss would\n\t// still occur.\n\tlet saveContent = block.originalContent;\n\tif ( block.isValid || block.innerBlocks.length ) {\n\t\ttry {\n\t\t\tsaveContent = getSaveContent(\n\t\t\t\tblock.name,\n\t\t\t\tblock.attributes,\n\t\t\t\tblock.innerBlocks\n\t\t\t);\n\t\t} catch ( error ) {}\n\t}\n\n\treturn saveContent;\n}\n\n/**\n * Returns the content of a block, including comment delimiters.\n *\n * @param {string} rawBlockName Block name.\n * @param {Object} attributes   Block attributes.\n * @param {string} content      Block save content.\n *\n * @return {string} Comment-delimited block content.\n */\nexport function getCommentDelimitedContent(\n\trawBlockName,\n\tattributes,\n\tcontent\n) {\n\tconst serializedAttributes = ! isEmpty( attributes )\n\t\t? serializeAttributes( attributes ) + ' '\n\t\t: '';\n\n\t// Strip core blocks of their namespace prefix.\n\tconst blockName = startsWith( rawBlockName, 'core/' )\n\t\t? rawBlockName.slice( 5 )\n\t\t: rawBlockName;\n\n\t// @todo make the `wp:` prefix potentially configurable.\n\n\tif ( ! content ) {\n\t\treturn `<!-- wp:${ blockName } ${ serializedAttributes }/-->`;\n\t}\n\n\treturn (\n\t\t`<!-- wp:${ blockName } ${ serializedAttributes }-->\\n` +\n\t\tcontent +\n\t\t`\\n<!-- /wp:${ blockName } -->`\n\t);\n}\n\n/**\n * Returns the content of a block, including comment delimiters, determining\n * serialized attributes and content form from the current state of the block.\n *\n * @param {Object}                      block   Block instance.\n * @param {WPBlockSerializationOptions} options Serialization options.\n *\n * @return {string} Serialized block.\n */\nexport function serializeBlock( block, { isInnerBlocks = false } = {} ) {\n\tconst blockName = block.name;\n\tconst saveContent = getBlockContent( block );\n\n\tif (\n\t\tblockName === getUnregisteredTypeHandlerName() ||\n\t\t( ! isInnerBlocks && blockName === getFreeformContentHandlerName() )\n\t) {\n\t\treturn saveContent;\n\t}\n\n\tconst blockType = getBlockType( blockName );\n\tconst saveAttributes = getCommentAttributes( blockType, block.attributes );\n\treturn getCommentDelimitedContent( blockName, saveAttributes, saveContent );\n}\n\n/**\n * Takes a block or set of blocks and returns the serialized post content.\n *\n * @param {Array}                       blocks  Block(s) to serialize.\n * @param {WPBlockSerializationOptions} options Serialization options.\n *\n * @return {string} The post content.\n */\nexport default function serialize( blocks, options ) {\n\treturn castArray( blocks )\n\t\t.map( ( block ) => serializeBlock( block, options ) )\n\t\t.join( '\\n\\n' );\n}\n"]}