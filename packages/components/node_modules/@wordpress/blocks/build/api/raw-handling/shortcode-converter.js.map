{"version":3,"sources":["@wordpress/blocks/src/api/raw-handling/shortcode-converter.js"],"names":["segmentHTMLToShortcodeBlock","HTML","lastIndex","excludedBlockNames","transformsFrom","transformation","transform","indexOf","blockName","type","tag","test","transformTags","transformTag","match","previousIndex","index","content","length","beforeHTML","substr","afterHTML","shortcode","isMatch","attrs","attributes","schema","block"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { some, castArray, find, mapValues, pickBy, includes } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { regexp, next } from '@wordpress/shortcode';\n\n/**\n * Internal dependencies\n */\nimport { createBlock, getBlockTransforms, findTransform } from '../factory';\nimport { getBlockType } from '../registration';\nimport { getBlockAttributes } from '../parser';\n\nfunction segmentHTMLToShortcodeBlock(\n\tHTML,\n\tlastIndex = 0,\n\texcludedBlockNames = []\n) {\n\t// Get all matches.\n\tconst transformsFrom = getBlockTransforms( 'from' );\n\n\tconst transformation = findTransform(\n\t\ttransformsFrom,\n\t\t( transform ) =>\n\t\t\texcludedBlockNames.indexOf( transform.blockName ) === -1 &&\n\t\t\ttransform.type === 'shortcode' &&\n\t\t\tsome( castArray( transform.tag ), ( tag ) =>\n\t\t\t\tregexp( tag ).test( HTML )\n\t\t\t)\n\t);\n\n\tif ( ! transformation ) {\n\t\treturn [ HTML ];\n\t}\n\n\tconst transformTags = castArray( transformation.tag );\n\tconst transformTag = find( transformTags, ( tag ) =>\n\t\tregexp( tag ).test( HTML )\n\t);\n\n\tlet match;\n\tconst previousIndex = lastIndex;\n\n\tif ( ( match = next( transformTag, HTML, lastIndex ) ) ) {\n\t\tlastIndex = match.index + match.content.length;\n\t\tconst beforeHTML = HTML.substr( 0, match.index );\n\t\tconst afterHTML = HTML.substr( lastIndex );\n\n\t\t// If the shortcode content does not contain HTML and the shortcode is\n\t\t// not on a new line (or in paragraph from Markdown converter),\n\t\t// consider the shortcode as inline text, and thus skip conversion for\n\t\t// this segment.\n\t\tif (\n\t\t\t! includes( match.shortcode.content || '', '<' ) &&\n\t\t\t! (\n\t\t\t\t/(\\n|<p>)\\s*$/.test( beforeHTML ) &&\n\t\t\t\t/^\\s*(\\n|<\\/p>)/.test( afterHTML )\n\t\t\t)\n\t\t) {\n\t\t\treturn segmentHTMLToShortcodeBlock( HTML, lastIndex );\n\t\t}\n\n\t\t// If a transformation's `isMatch` predicate fails for the inbound\n\t\t// shortcode, try again by excluding the current block type.\n\t\t//\n\t\t// This is the only call to `segmentHTMLToShortcodeBlock` that should\n\t\t// ever carry over `excludedBlockNames`. Other calls in the module\n\t\t// should skip that argument as a way to reset the exclusion state, so\n\t\t// that one `isMatch` fail in an HTML fragment doesn't prevent any\n\t\t// valid matches in subsequent fragments.\n\t\tif (\n\t\t\ttransformation.isMatch &&\n\t\t\t! transformation.isMatch( match.shortcode.attrs )\n\t\t) {\n\t\t\treturn segmentHTMLToShortcodeBlock( HTML, previousIndex, [\n\t\t\t\t...excludedBlockNames,\n\t\t\t\ttransformation.blockName,\n\t\t\t] );\n\t\t}\n\n\t\tconst attributes = mapValues(\n\t\t\tpickBy( transformation.attributes, ( schema ) => schema.shortcode ),\n\t\t\t// Passing all of `match` as second argument is intentionally broad\n\t\t\t// but shouldn't be too relied upon.\n\t\t\t//\n\t\t\t// See: https://github.com/WordPress/gutenberg/pull/3610#discussion_r152546926\n\t\t\t( schema ) => schema.shortcode( match.shortcode.attrs, match )\n\t\t);\n\n\t\tconst block = createBlock(\n\t\t\ttransformation.blockName,\n\t\t\tgetBlockAttributes(\n\t\t\t\t{\n\t\t\t\t\t...getBlockType( transformation.blockName ),\n\t\t\t\t\tattributes: transformation.attributes,\n\t\t\t\t},\n\t\t\t\tmatch.shortcode.content,\n\t\t\t\tattributes\n\t\t\t)\n\t\t);\n\n\t\treturn [\n\t\t\tbeforeHTML,\n\t\t\tblock,\n\t\t\t...segmentHTMLToShortcodeBlock( HTML.substr( lastIndex ) ),\n\t\t];\n\t}\n\n\treturn [ HTML ];\n}\n\nexport default segmentHTMLToShortcodeBlock;\n"]}