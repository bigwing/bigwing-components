{"version":3,"sources":["@wordpress/blocks/src/api/raw-handling/is-inline-content.js"],"names":["isInline","node","contextTag","tag","nodeName","toLowerCase","inlineWhitelistTagGroups","some","tagGroup","length","deepCheck","nodes","every","Array","from","children","isDoubleBR","previousSibling","isInlineContent","HTML","doc","document","implementation","createHTMLDocument","body","innerHTML"],"mappings":";;;;;;;AAGA;;AAKA;;AARA;;;;AAKA;;;;AAKA;;;;;;;;;AASA,SAASA,QAAT,CAAmBC,IAAnB,EAAyBC,UAAzB,EAAsC;AACrC,MAAK,oCAAeD,IAAf,CAAL,EAA6B;AAC5B,WAAO,IAAP;AACA;;AAED,MAAK,CAAEC,UAAP,EAAoB;AACnB,WAAO,KAAP;AACA;;AAED,MAAMC,GAAG,GAAGF,IAAI,CAACG,QAAL,CAAcC,WAAd,EAAZ;AACA,MAAMC,wBAAwB,GAAG,CAChC,CAAE,IAAF,EAAQ,IAAR,EAAc,IAAd,CADgC,EAEhC,CAAE,IAAF,EAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB,EAA0B,IAA1B,EAAgC,IAAhC,CAFgC,CAAjC;AAKA,SAAOA,wBAAwB,CAACC,IAAzB,CACN,UAAEC,QAAF;AAAA,WAAgB,wBAAY,CAAEL,GAAF,EAAOD,UAAP,CAAZ,EAAiCM,QAAjC,EAA4CC,MAA5C,KAAuD,CAAvE;AAAA,GADM,CAAP;AAGA;;AAED,SAASC,SAAT,CAAoBC,KAApB,EAA2BT,UAA3B,EAAwC;AACvC,SAAOS,KAAK,CAACC,KAAN,CACN,UAAEX,IAAF;AAAA,WACCD,QAAQ,CAAEC,IAAF,EAAQC,UAAR,CAAR,IACAQ,SAAS,CAAEG,KAAK,CAACC,IAAN,CAAYb,IAAI,CAACc,QAAjB,CAAF,EAA+Bb,UAA/B,CAFV;AAAA,GADM,CAAP;AAKA;;AAED,SAASc,UAAT,CAAqBf,IAArB,EAA4B;AAC3B,SACCA,IAAI,CAACG,QAAL,KAAkB,IAAlB,IACAH,IAAI,CAACgB,eADL,IAEAhB,IAAI,CAACgB,eAAL,CAAqBb,QAArB,KAAkC,IAHnC;AAKA;;AAEc,SAASc,eAAT,CAA0BC,IAA1B,EAAgCjB,UAAhC,EAA6C;AAC3D,MAAMkB,GAAG,GAAGC,QAAQ,CAACC,cAAT,CAAwBC,kBAAxB,CAA4C,EAA5C,CAAZ;AAEAH,EAAAA,GAAG,CAACI,IAAJ,CAASC,SAAT,GAAqBN,IAArB;AAEA,MAAMR,KAAK,GAAGE,KAAK,CAACC,IAAN,CAAYM,GAAG,CAACI,IAAJ,CAAST,QAArB,CAAd;AAEA,SAAO,CAAEJ,KAAK,CAACJ,IAAN,CAAYS,UAAZ,CAAF,IAA8BN,SAAS,CAAEC,KAAF,EAAST,UAAT,CAA9C;AACA","sourcesContent":["/**\n * External dependencies\n */\nimport { difference } from 'lodash';\n\n/**\n * Internal dependencies\n */\nimport { isTextContent } from './phrasing-content';\n\n/**\n * Checks if the given node should be considered inline content, optionally\n * depending on a context tag.\n *\n * @param {Node}   node       Node name.\n * @param {string} contextTag Tag name.\n *\n * @return {boolean} True if the node is inline content, false if nohe.\n */\nfunction isInline( node, contextTag ) {\n\tif ( isTextContent( node ) ) {\n\t\treturn true;\n\t}\n\n\tif ( ! contextTag ) {\n\t\treturn false;\n\t}\n\n\tconst tag = node.nodeName.toLowerCase();\n\tconst inlineWhitelistTagGroups = [\n\t\t[ 'ul', 'li', 'ol' ],\n\t\t[ 'h1', 'h2', 'h3', 'h4', 'h5', 'h6' ],\n\t];\n\n\treturn inlineWhitelistTagGroups.some(\n\t\t( tagGroup ) => difference( [ tag, contextTag ], tagGroup ).length === 0\n\t);\n}\n\nfunction deepCheck( nodes, contextTag ) {\n\treturn nodes.every(\n\t\t( node ) =>\n\t\t\tisInline( node, contextTag ) &&\n\t\t\tdeepCheck( Array.from( node.children ), contextTag )\n\t);\n}\n\nfunction isDoubleBR( node ) {\n\treturn (\n\t\tnode.nodeName === 'BR' &&\n\t\tnode.previousSibling &&\n\t\tnode.previousSibling.nodeName === 'BR'\n\t);\n}\n\nexport default function isInlineContent( HTML, contextTag ) {\n\tconst doc = document.implementation.createHTMLDocument( '' );\n\n\tdoc.body.innerHTML = HTML;\n\n\tconst nodes = Array.from( doc.body.children );\n\n\treturn ! nodes.some( isDoubleBR ) && deepCheck( nodes, contextTag );\n}\n"]}