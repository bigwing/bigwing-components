{"version":3,"sources":["@wordpress/blocks/src/api/raw-handling/paste-handler.js"],"names":["window","console","filterInlineHTML","HTML","googleDocsUIDRemover","phrasingContentReducer","commentRemover","inline","htmlFormattingRemover","brRemover","log","getRawTransformations","type","map","transform","isMatch","node","selector","matches","htmlToBlocks","html","rawTransforms","doc","document","implementation","createHTMLDocument","body","innerHTML","Array","from","children","rawTransform","outerHTML","blockName","pasteHandler","plainText","mode","tagName","replace","content","indexOf","String","prototype","normalize","pieces","hasShortcodes","length","phrasingContentSchema","blockContentSchema","blocks","piece","filters","msListConverter","headRemover","listReducer","imageCorrector","specialCommentConverter","iframeRemover","figureContentReducer","blockquoteNormaliser","schema","emptyParagraphRemover","name","trimmedPlainText","trim"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { flatMap, filter, compact } from 'lodash';\n\n/**\n * Internal dependencies\n */\nimport { createBlock, getBlockTransforms, findTransform } from '../factory';\nimport { hasBlockSupport } from '../registration';\nimport { getBlockContent } from '../serializer';\nimport { getBlockAttributes, parseWithGrammar } from '../parser';\nimport normaliseBlocks from './normalise-blocks';\nimport specialCommentConverter from './special-comment-converter';\nimport commentRemover from './comment-remover';\nimport isInlineContent from './is-inline-content';\nimport phrasingContentReducer from './phrasing-content-reducer';\nimport headRemover from './head-remover';\nimport msListConverter from './ms-list-converter';\nimport listReducer from './list-reducer';\nimport imageCorrector from './image-corrector';\nimport blockquoteNormaliser from './blockquote-normaliser';\nimport figureContentReducer from './figure-content-reducer';\nimport shortcodeConverter from './shortcode-converter';\nimport markdownConverter from './markdown-converter';\nimport iframeRemover from './iframe-remover';\nimport googleDocsUIDRemover from './google-docs-uid-remover';\nimport htmlFormattingRemover from './html-formatting-remover';\nimport brRemover from './br-remover';\nimport { getPhrasingContentSchema } from './phrasing-content';\nimport {\n\tdeepFilterHTML,\n\tisPlain,\n\tremoveInvalidHTML,\n\tgetBlockContentSchema,\n} from './utils';\nimport emptyParagraphRemover from './empty-paragraph-remover';\n\n/**\n * Browser dependencies\n */\nconst { console } = window;\n\n/**\n * Filters HTML to only contain phrasing content.\n *\n * @param {string} HTML The HTML to filter.\n *\n * @return {string} HTML only containing phrasing content.\n */\nfunction filterInlineHTML( HTML ) {\n\tHTML = deepFilterHTML( HTML, [\n\t\tgoogleDocsUIDRemover,\n\t\tphrasingContentReducer,\n\t\tcommentRemover,\n\t] );\n\tHTML = removeInvalidHTML( HTML, getPhrasingContentSchema( 'paste' ), {\n\t\tinline: true,\n\t} );\n\tHTML = deepFilterHTML( HTML, [ htmlFormattingRemover, brRemover ] );\n\n\t// Allows us to ask for this information when we get a report.\n\tconsole.log( 'Processed inline HTML:\\n\\n', HTML );\n\n\treturn HTML;\n}\n\nfunction getRawTransformations() {\n\treturn filter( getBlockTransforms( 'from' ), { type: 'raw' } ).map(\n\t\t( transform ) => {\n\t\t\treturn transform.isMatch\n\t\t\t\t? transform\n\t\t\t\t: {\n\t\t\t\t\t\t...transform,\n\t\t\t\t\t\tisMatch: ( node ) =>\n\t\t\t\t\t\t\ttransform.selector &&\n\t\t\t\t\t\t\tnode.matches( transform.selector ),\n\t\t\t\t  };\n\t\t}\n\t);\n}\n\n/**\n * Converts HTML directly to blocks. Looks for a matching transform for each\n * top-level tag. The HTML should be filtered to not have any text between\n * top-level tags and formatted in a way that blocks can handle the HTML.\n *\n * @param  {Object} $1               Named parameters.\n * @param  {string} $1.html          HTML to convert.\n * @param  {Array}  $1.rawTransforms Transforms that can be used.\n *\n * @return {Array} An array of blocks.\n */\nfunction htmlToBlocks( { html, rawTransforms } ) {\n\tconst doc = document.implementation.createHTMLDocument( '' );\n\n\tdoc.body.innerHTML = html;\n\n\treturn Array.from( doc.body.children ).map( ( node ) => {\n\t\tconst rawTransform = findTransform( rawTransforms, ( { isMatch } ) =>\n\t\t\tisMatch( node )\n\t\t);\n\n\t\tif ( ! rawTransform ) {\n\t\t\treturn createBlock(\n\t\t\t\t// Should not be hardcoded.\n\t\t\t\t'core/html',\n\t\t\t\tgetBlockAttributes( 'core/html', node.outerHTML )\n\t\t\t);\n\t\t}\n\n\t\tconst { transform, blockName } = rawTransform;\n\n\t\tif ( transform ) {\n\t\t\treturn transform( node );\n\t\t}\n\n\t\treturn createBlock(\n\t\t\tblockName,\n\t\t\tgetBlockAttributes( blockName, node.outerHTML )\n\t\t);\n\t} );\n}\n\n/**\n * Converts an HTML string to known blocks. Strips everything else.\n *\n * @param {Object}  options\n * @param {string}  [options.HTML]      The HTML to convert.\n * @param {string}  [options.plainText] Plain text version.\n * @param {string}  [options.mode]      Handle content as blocks or inline content.\n *                                      * 'AUTO': Decide based on the content passed.\n *                                      * 'INLINE': Always handle as inline content, and return string.\n *                                      * 'BLOCKS': Always handle as blocks, and return array of blocks.\n * @param {Array}   [options.tagName]   The tag into which content will be inserted.\n *\n * @return {Array|string} A list of blocks or a string, depending on `handlerMode`.\n */\nexport function pasteHandler( {\n\tHTML = '',\n\tplainText = '',\n\tmode = 'AUTO',\n\ttagName,\n} ) {\n\t// First of all, strip any meta tags.\n\tHTML = HTML.replace( /<meta[^>]+>/g, '' );\n\t// Strip Windows markers.\n\tHTML = HTML.replace(\n\t\t/^\\s*<html[^>]*>\\s*<body[^>]*>(?:\\s*<!--\\s*StartFragment\\s*-->)?/i,\n\t\t''\n\t);\n\tHTML = HTML.replace(\n\t\t/(?:<!--\\s*EndFragment\\s*-->\\s*)?<\\/body>\\s*<\\/html>\\s*$/i,\n\t\t''\n\t);\n\n\t// If we detect block delimiters in HTML, parse entirely as blocks.\n\tif ( mode !== 'INLINE' ) {\n\t\t// Check plain text if there is no HTML.\n\t\tconst content = HTML ? HTML : plainText;\n\n\t\tif ( content.indexOf( '<!-- wp:' ) !== -1 ) {\n\t\t\treturn parseWithGrammar( content );\n\t\t}\n\t}\n\n\t// Normalize unicode to use composed characters.\n\t// This is unsupported in IE 11 but it's a nice-to-have feature, not mandatory.\n\t// Not normalizing the content will only affect older browsers and won't\n\t// entirely break the app.\n\t// See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\n\t// See: https://core.trac.wordpress.org/ticket/30130\n\t// See: https://github.com/WordPress/gutenberg/pull/6983#pullrequestreview-125151075\n\tif ( String.prototype.normalize ) {\n\t\tHTML = HTML.normalize();\n\t}\n\n\t// Parse Markdown (and encoded HTML) if:\n\t// * There is a plain text version.\n\t// * There is no HTML version, or it has no formatting.\n\tif ( plainText && ( ! HTML || isPlain( HTML ) ) ) {\n\t\tHTML = markdownConverter( plainText );\n\n\t\t// Switch to inline mode if:\n\t\t// * The current mode is AUTO.\n\t\t// * The original plain text had no line breaks.\n\t\t// * The original plain text was not an HTML paragraph.\n\t\t// * The converted text is just a paragraph.\n\t\tif (\n\t\t\tmode === 'AUTO' &&\n\t\t\tplainText.indexOf( '\\n' ) === -1 &&\n\t\t\tplainText.indexOf( '<p>' ) !== 0 &&\n\t\t\tHTML.indexOf( '<p>' ) === 0\n\t\t) {\n\t\t\tmode = 'INLINE';\n\t\t}\n\t}\n\n\tif ( mode === 'INLINE' ) {\n\t\treturn filterInlineHTML( HTML );\n\t}\n\n\t// An array of HTML strings and block objects. The blocks replace matched\n\t// shortcodes.\n\tconst pieces = shortcodeConverter( HTML );\n\n\t// The call to shortcodeConverter will always return more than one element\n\t// if shortcodes are matched. The reason is when shortcodes are matched\n\t// empty HTML strings are included.\n\tconst hasShortcodes = pieces.length > 1;\n\n\tif (\n\t\tmode === 'AUTO' &&\n\t\t! hasShortcodes &&\n\t\tisInlineContent( HTML, tagName )\n\t) {\n\t\treturn filterInlineHTML( HTML );\n\t}\n\n\tconst rawTransforms = getRawTransformations();\n\tconst phrasingContentSchema = getPhrasingContentSchema( 'paste' );\n\tconst blockContentSchema = getBlockContentSchema(\n\t\trawTransforms,\n\t\tphrasingContentSchema,\n\t\ttrue\n\t);\n\n\tconst blocks = compact(\n\t\tflatMap( pieces, ( piece ) => {\n\t\t\t// Already a block from shortcode.\n\t\t\tif ( typeof piece !== 'string' ) {\n\t\t\t\treturn piece;\n\t\t\t}\n\n\t\t\tconst filters = [\n\t\t\t\tgoogleDocsUIDRemover,\n\t\t\t\tmsListConverter,\n\t\t\t\theadRemover,\n\t\t\t\tlistReducer,\n\t\t\t\timageCorrector,\n\t\t\t\tphrasingContentReducer,\n\t\t\t\tspecialCommentConverter,\n\t\t\t\tcommentRemover,\n\t\t\t\tiframeRemover,\n\t\t\t\tfigureContentReducer,\n\t\t\t\tblockquoteNormaliser,\n\t\t\t];\n\n\t\t\tconst schema = {\n\t\t\t\t...blockContentSchema,\n\t\t\t\t// Keep top-level phrasing content, normalised by `normaliseBlocks`.\n\t\t\t\t...phrasingContentSchema,\n\t\t\t};\n\n\t\t\tpiece = deepFilterHTML( piece, filters, blockContentSchema );\n\t\t\tpiece = removeInvalidHTML( piece, schema );\n\t\t\tpiece = normaliseBlocks( piece );\n\t\t\tpiece = deepFilterHTML(\n\t\t\t\tpiece,\n\t\t\t\t[ htmlFormattingRemover, brRemover, emptyParagraphRemover ],\n\t\t\t\tblockContentSchema\n\t\t\t);\n\n\t\t\t// Allows us to ask for this information when we get a report.\n\t\t\tconsole.log( 'Processed HTML piece:\\n\\n', piece );\n\n\t\t\treturn htmlToBlocks( { html: piece, rawTransforms } );\n\t\t} )\n\t);\n\n\t// If we're allowed to return inline content, and there is only one inlineable block,\n\t// and the original plain text content does not have any line breaks, then\n\t// treat it as inline paste.\n\tif (\n\t\tmode === 'AUTO' &&\n\t\tblocks.length === 1 &&\n\t\thasBlockSupport( blocks[ 0 ].name, '__unstablePasteTextInline', false )\n\t) {\n\t\tconst trimmedPlainText = plainText.trim();\n\n\t\tif (\n\t\t\ttrimmedPlainText !== '' &&\n\t\t\ttrimmedPlainText.indexOf( '\\n' ) === -1\n\t\t) {\n\t\t\treturn removeInvalidHTML(\n\t\t\t\tgetBlockContent( blocks[ 0 ] ),\n\t\t\t\tphrasingContentSchema\n\t\t\t);\n\t\t}\n\t}\n\n\treturn blocks;\n}\n"]}