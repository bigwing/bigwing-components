{"version":3,"sources":["@wordpress/blocks/src/api/registration.js"],"names":["LEGACY_CATEGORY_MAPPING","common","formatting","layout","serverSideBlockDefinitions","unstable__bootstrapServerSideBlockDefinitions","definitions","registerBlockType","name","settings","icon","blockDefault","keywords","attributes","providesContext","usesContext","supports","styles","save","value","console","error","test","getBlockType","preFilterSettings","deprecated","map","deprecation","DEPRECATED_ENTRY_KEYS","edit","hasOwnProperty","category","getCategories","slug","warn","title","src","addBlockTypes","registerBlockCollection","namespace","addBlockCollection","unregisterBlockCollection","removeBlockCollection","unregisterBlockType","oldBlock","removeBlockTypes","setFreeformContentHandlerName","blockName","setFreeformFallbackBlockName","getFreeformContentHandlerName","getFreeformFallbackBlockName","getGroupingBlockName","setUnregisteredTypeHandlerName","setUnregisteredFallbackBlockName","getUnregisteredTypeHandlerName","getUnregisteredFallbackBlockName","setDefaultBlockName","setGroupingBlockName","getDefaultBlockName","getBlockTypes","getBlockSupport","nameOrType","feature","defaultSupports","hasBlockSupport","isReusableBlock","blockOrType","getChildBlockNames","hasChildBlocks","hasChildBlocksWithInserterSupport","registerBlockStyle","styleVariation","addBlockStyles","unregisterBlockStyle","styleVariationName","removeBlockStyles","registerBlockVariation","variation","addBlockVariations","unregisterBlockVariation","variationName","removeBlockVariations"],"mappings":"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","sourcesContent":["/* eslint no-console: [ 'error', { allow: [ 'error', 'warn' ] } ] */\n\n/**\n * External dependencies\n */\nimport {\n\tget,\n\tisFunction,\n\tisNil,\n\tisPlainObject,\n\tomit,\n\tpick,\n\tpickBy,\n\tsome,\n} from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { applyFilters } from '@wordpress/hooks';\nimport { select, dispatch } from '@wordpress/data';\nimport { blockDefault } from '@wordpress/icons';\n\n/**\n * Internal dependencies\n */\nimport { isValidIcon, normalizeIconObject } from './utils';\nimport { DEPRECATED_ENTRY_KEYS } from './constants';\n\n/**\n * An icon type definition. One of a Dashicon slug, an element,\n * or a component.\n *\n * @typedef {(string|WPElement|WPComponent)} WPIcon\n *\n * @see https://developer.wordpress.org/resource/dashicons/\n */\n\n/**\n * Render behavior of a block type icon; one of a Dashicon slug, an element,\n * or a component.\n *\n * @typedef {WPIcon} WPBlockTypeIconRender\n */\n\n/**\n * An object describing a normalized block type icon.\n *\n * @typedef {Object} WPBlockTypeIconDescriptor\n *\n * @property {WPBlockTypeIconRender} src         Render behavior of the icon,\n *                                               one of a Dashicon slug, an\n *                                               element, or a component.\n * @property {string}                background  Optimal background hex string\n *                                               color when displaying icon.\n * @property {string}                foreground  Optimal foreground hex string\n *                                               color when displaying icon.\n * @property {string}                shadowColor Optimal shadow hex string\n *                                               color when displaying icon.\n */\n\n/**\n * Value to use to render the icon for a block type in an editor interface,\n * either a Dashicon slug, an element, a component, or an object describing\n * the icon.\n *\n * @typedef {(WPBlockTypeIconDescriptor|WPBlockTypeIconRender)} WPBlockTypeIcon\n */\n\n/**\n * Named block variation scopes.\n *\n * @typedef {'block'|'inserter'} WPBlockVariationScope\n */\n\n/**\n * An object describing a variation defined for the block type.\n *\n * @typedef {Object} WPBlockVariation\n *\n * @property {string}   name                   The unique and machine-readable name.\n * @property {string}   title                  A human-readable variation title.\n * @property {string}   [description]          A detailed variation description.\n * @property {WPIcon}   [icon]                 An icon helping to visualize the variation.\n * @property {boolean}  [isDefault]            Indicates whether the current variation is\n *                                             the default one. Defaults to `false`.\n * @property {Object}   [attributes]           Values which override block attributes.\n * @property {Array[]}  [innerBlocks]          Initial configuration of nested blocks.\n * @property {Object}   [example]              Example provides structured data for\n *                                             the block preview. You can set to\n *                                             `undefined` to disable the preview shown\n *                                             for the block type.\n * @property {WPBlockVariationScope[]} [scope] The list of scopes where the variation\n *                                             is applicable. When not provided, it\n *                                             assumes all available scopes.\n */\n\n/**\n * Defined behavior of a block type.\n *\n * @typedef {Object} WPBlock\n *\n * @property {string}             name          Block type's namespaced name.\n * @property {string}             title         Human-readable block type label.\n * @property {string}             [description] A detailed block type description.\n * @property {string}             [category]    Block type category classification,\n *                                              used in search interfaces to arrange\n *                                              block types by category.\n * @property {WPBlockTypeIcon}    [icon]        Block type icon.\n * @property {string[]}           [keywords]    Additional keywords to produce block\n *                                              type as result in search interfaces.\n * @property {Object}             [attributes]  Block type attributes.\n * @property {WPComponent}        [save]        Optional component describing\n *                                              serialized markup structure of a\n *                                              block type.\n * @property {WPComponent}        edit          Component rendering an element to\n *                                              manipulate the attributes of a block\n *                                              in the context of an editor.\n * @property {WPBlockVariation[]} [variations]  The list of block variations.\n * @property {Object}             [example]     Example provides structured data for\n *                                              the block preview. When not defined\n *                                              then no preview is shown.\n */\n\n/**\n * Mapping of legacy category slugs to their latest normal values, used to\n * accommodate updates of the default set of block categories.\n *\n * @type {Record<string,string>}\n */\nconst LEGACY_CATEGORY_MAPPING = {\n\tcommon: 'text',\n\tformatting: 'text',\n\tlayout: 'design',\n};\n\nexport let serverSideBlockDefinitions = {};\n\n/**\n * Sets the server side block definition of blocks.\n *\n * @param {Object} definitions Server-side block definitions\n */\n// eslint-disable-next-line camelcase\nexport function unstable__bootstrapServerSideBlockDefinitions( definitions ) {\n\tserverSideBlockDefinitions = {\n\t\t...serverSideBlockDefinitions,\n\t\t...definitions,\n\t};\n}\n\n/**\n * Registers a new block provided a unique name and an object defining its\n * behavior. Once registered, the block is made available as an option to any\n * editor interface where blocks are implemented.\n *\n * @param {string} name     Block name.\n * @param {Object} settings Block settings.\n *\n * @return {?WPBlock} The block, if it has been successfully registered;\n *                    otherwise `undefined`.\n */\nexport function registerBlockType( name, settings ) {\n\tsettings = {\n\t\tname,\n\t\ticon: blockDefault,\n\t\tkeywords: [],\n\t\tattributes: {},\n\t\tprovidesContext: {},\n\t\tusesContext: [],\n\t\tsupports: {},\n\t\tstyles: [],\n\t\tsave: () => null,\n\t\t...pickBy(\n\t\t\tget( serverSideBlockDefinitions, name, {} ),\n\t\t\t( value ) => ! isNil( value )\n\t\t),\n\t\t...settings,\n\t};\n\n\tif ( typeof name !== 'string' ) {\n\t\tconsole.error( 'Block names must be strings.' );\n\t\treturn;\n\t}\n\tif ( ! /^[a-z][a-z0-9-]*\\/[a-z][a-z0-9-]*$/.test( name ) ) {\n\t\tconsole.error(\n\t\t\t'Block names must contain a namespace prefix, include only lowercase alphanumeric characters or dashes, and start with a letter. Example: my-plugin/my-custom-block'\n\t\t);\n\t\treturn;\n\t}\n\tif ( select( 'core/blocks' ).getBlockType( name ) ) {\n\t\tconsole.error( 'Block \"' + name + '\" is already registered.' );\n\t\treturn;\n\t}\n\n\tconst preFilterSettings = { ...settings };\n\tsettings = applyFilters( 'blocks.registerBlockType', settings, name );\n\n\tif ( settings.deprecated ) {\n\t\tsettings.deprecated = settings.deprecated.map( ( deprecation ) =>\n\t\t\tpick(\n\t\t\t\t// Only keep valid deprecation keys.\n\t\t\t\tapplyFilters(\n\t\t\t\t\t'blocks.registerBlockType',\n\t\t\t\t\t// Merge deprecation keys with pre-filter settings\n\t\t\t\t\t// so that filters that depend on specific keys being\n\t\t\t\t\t// present don't fail.\n\t\t\t\t\t{\n\t\t\t\t\t\t// Omit deprecation keys here so that deprecations\n\t\t\t\t\t\t// can opt out of specific keys like \"supports\".\n\t\t\t\t\t\t...omit( preFilterSettings, DEPRECATED_ENTRY_KEYS ),\n\t\t\t\t\t\t...deprecation,\n\t\t\t\t\t},\n\t\t\t\t\tname\n\t\t\t\t),\n\t\t\t\tDEPRECATED_ENTRY_KEYS\n\t\t\t)\n\t\t);\n\t}\n\n\tif ( ! isPlainObject( settings ) ) {\n\t\tconsole.error( 'Block settings must be a valid object.' );\n\t\treturn;\n\t}\n\n\tif ( ! isFunction( settings.save ) ) {\n\t\tconsole.error( 'The \"save\" property must be a valid function.' );\n\t\treturn;\n\t}\n\tif ( 'edit' in settings && ! isFunction( settings.edit ) ) {\n\t\tconsole.error( 'The \"edit\" property must be a valid function.' );\n\t\treturn;\n\t}\n\n\t// Canonicalize legacy categories to equivalent fallback.\n\tif ( LEGACY_CATEGORY_MAPPING.hasOwnProperty( settings.category ) ) {\n\t\tsettings.category = LEGACY_CATEGORY_MAPPING[ settings.category ];\n\t}\n\n\tif (\n\t\t'category' in settings &&\n\t\t! some( select( 'core/blocks' ).getCategories(), {\n\t\t\tslug: settings.category,\n\t\t} )\n\t) {\n\t\tconsole.warn(\n\t\t\t'The block \"' +\n\t\t\t\tname +\n\t\t\t\t'\" is registered with an invalid category \"' +\n\t\t\t\tsettings.category +\n\t\t\t\t'\".'\n\t\t);\n\t\tdelete settings.category;\n\t}\n\n\tif ( ! ( 'title' in settings ) || settings.title === '' ) {\n\t\tconsole.error( 'The block \"' + name + '\" must have a title.' );\n\t\treturn;\n\t}\n\tif ( typeof settings.title !== 'string' ) {\n\t\tconsole.error( 'Block titles must be strings.' );\n\t\treturn;\n\t}\n\n\tsettings.icon = normalizeIconObject( settings.icon );\n\tif ( ! isValidIcon( settings.icon.src ) ) {\n\t\tconsole.error(\n\t\t\t'The icon passed is invalid. ' +\n\t\t\t\t'The icon should be a string, an element, a function, or an object following the specifications documented in https://developer.wordpress.org/block-editor/developers/block-api/block-registration/#icon-optional'\n\t\t);\n\t\treturn;\n\t}\n\n\tdispatch( 'core/blocks' ).addBlockTypes( settings );\n\n\treturn settings;\n}\n\n/**\n * Registers a new block collection to group blocks in the same namespace in the inserter.\n *\n * @param {string} namespace       The namespace to group blocks by in the inserter; corresponds to the block namespace.\n * @param {Object} settings        The block collection settings.\n * @param {string} settings.title  The title to display in the block inserter.\n * @param {Object} [settings.icon] The icon to display in the block inserter.\n */\nexport function registerBlockCollection( namespace, { title, icon } ) {\n\tdispatch( 'core/blocks' ).addBlockCollection( namespace, title, icon );\n}\n\n/**\n * Unregisters a block collection\n *\n * @param {string} namespace The namespace to group blocks by in the inserter; corresponds to the block namespace\n *\n */\nexport function unregisterBlockCollection( namespace ) {\n\tdispatch( 'core/blocks' ).removeBlockCollection( namespace );\n}\n\n/**\n * Unregisters a block.\n *\n * @param {string} name Block name.\n *\n * @return {?WPBlock} The previous block value, if it has been successfully\n *                    unregistered; otherwise `undefined`.\n */\nexport function unregisterBlockType( name ) {\n\tconst oldBlock = select( 'core/blocks' ).getBlockType( name );\n\tif ( ! oldBlock ) {\n\t\tconsole.error( 'Block \"' + name + '\" is not registered.' );\n\t\treturn;\n\t}\n\tdispatch( 'core/blocks' ).removeBlockTypes( name );\n\treturn oldBlock;\n}\n\n/**\n * Assigns name of block for handling non-block content.\n *\n * @param {string} blockName Block name.\n */\nexport function setFreeformContentHandlerName( blockName ) {\n\tdispatch( 'core/blocks' ).setFreeformFallbackBlockName( blockName );\n}\n\n/**\n * Retrieves name of block handling non-block content, or undefined if no\n * handler has been defined.\n *\n * @return {?string} Block name.\n */\nexport function getFreeformContentHandlerName() {\n\treturn select( 'core/blocks' ).getFreeformFallbackBlockName();\n}\n\n/**\n * Retrieves name of block used for handling grouping interactions.\n *\n * @return {?string} Block name.\n */\nexport function getGroupingBlockName() {\n\treturn select( 'core/blocks' ).getGroupingBlockName();\n}\n\n/**\n * Assigns name of block handling unregistered block types.\n *\n * @param {string} blockName Block name.\n */\nexport function setUnregisteredTypeHandlerName( blockName ) {\n\tdispatch( 'core/blocks' ).setUnregisteredFallbackBlockName( blockName );\n}\n\n/**\n * Retrieves name of block handling unregistered block types, or undefined if no\n * handler has been defined.\n *\n * @return {?string} Block name.\n */\nexport function getUnregisteredTypeHandlerName() {\n\treturn select( 'core/blocks' ).getUnregisteredFallbackBlockName();\n}\n\n/**\n * Assigns the default block name.\n *\n * @param {string} name Block name.\n */\nexport function setDefaultBlockName( name ) {\n\tdispatch( 'core/blocks' ).setDefaultBlockName( name );\n}\n\n/**\n * Assigns name of block for handling block grouping interactions.\n *\n * @param {string} name Block name.\n */\nexport function setGroupingBlockName( name ) {\n\tdispatch( 'core/blocks' ).setGroupingBlockName( name );\n}\n\n/**\n * Retrieves the default block name.\n *\n * @return {?string} Block name.\n */\nexport function getDefaultBlockName() {\n\treturn select( 'core/blocks' ).getDefaultBlockName();\n}\n\n/**\n * Returns a registered block type.\n *\n * @param {string} name Block name.\n *\n * @return {?Object} Block type.\n */\nexport function getBlockType( name ) {\n\treturn select( 'core/blocks' ).getBlockType( name );\n}\n\n/**\n * Returns all registered blocks.\n *\n * @return {Array} Block settings.\n */\nexport function getBlockTypes() {\n\treturn select( 'core/blocks' ).getBlockTypes();\n}\n\n/**\n * Returns the block support value for a feature, if defined.\n *\n * @param  {(string|Object)} nameOrType      Block name or type object\n * @param  {string}          feature         Feature to retrieve\n * @param  {*}               defaultSupports Default value to return if not\n *                                           explicitly defined\n *\n * @return {?*} Block support value\n */\nexport function getBlockSupport( nameOrType, feature, defaultSupports ) {\n\treturn select( 'core/blocks' ).getBlockSupport(\n\t\tnameOrType,\n\t\tfeature,\n\t\tdefaultSupports\n\t);\n}\n\n/**\n * Returns true if the block defines support for a feature, or false otherwise.\n *\n * @param {(string|Object)} nameOrType      Block name or type object.\n * @param {string}          feature         Feature to test.\n * @param {boolean}         defaultSupports Whether feature is supported by\n *                                          default if not explicitly defined.\n *\n * @return {boolean} Whether block supports feature.\n */\nexport function hasBlockSupport( nameOrType, feature, defaultSupports ) {\n\treturn select( 'core/blocks' ).hasBlockSupport(\n\t\tnameOrType,\n\t\tfeature,\n\t\tdefaultSupports\n\t);\n}\n\n/**\n * Determines whether or not the given block is a reusable block. This is a\n * special block type that is used to point to a global block stored via the\n * API.\n *\n * @param {Object} blockOrType Block or Block Type to test.\n *\n * @return {boolean} Whether the given block is a reusable block.\n */\nexport function isReusableBlock( blockOrType ) {\n\treturn blockOrType.name === 'core/block';\n}\n\n/**\n * Returns an array with the child blocks of a given block.\n *\n * @param {string} blockName Name of block (example: “latest-posts”).\n *\n * @return {Array} Array of child block names.\n */\nexport const getChildBlockNames = ( blockName ) => {\n\treturn select( 'core/blocks' ).getChildBlockNames( blockName );\n};\n\n/**\n * Returns a boolean indicating if a block has child blocks or not.\n *\n * @param {string} blockName Name of block (example: “latest-posts”).\n *\n * @return {boolean} True if a block contains child blocks and false otherwise.\n */\nexport const hasChildBlocks = ( blockName ) => {\n\treturn select( 'core/blocks' ).hasChildBlocks( blockName );\n};\n\n/**\n * Returns a boolean indicating if a block has at least one child block with inserter support.\n *\n * @param {string} blockName Block type name.\n *\n * @return {boolean} True if a block contains at least one child blocks with inserter support\n *                   and false otherwise.\n */\nexport const hasChildBlocksWithInserterSupport = ( blockName ) => {\n\treturn select( 'core/blocks' ).hasChildBlocksWithInserterSupport(\n\t\tblockName\n\t);\n};\n\n/**\n * Registers a new block style variation for the given block.\n *\n * @param {string} blockName      Name of block (example: “core/latest-posts”).\n * @param {Object} styleVariation Object containing `name` which is the class name applied to the block and `label` which identifies the variation to the user.\n */\nexport const registerBlockStyle = ( blockName, styleVariation ) => {\n\tdispatch( 'core/blocks' ).addBlockStyles( blockName, styleVariation );\n};\n\n/**\n * Unregisters a block style variation for the given block.\n *\n * @param {string} blockName          Name of block (example: “core/latest-posts”).\n * @param {string} styleVariationName Name of class applied to the block.\n */\nexport const unregisterBlockStyle = ( blockName, styleVariationName ) => {\n\tdispatch( 'core/blocks' ).removeBlockStyles(\n\t\tblockName,\n\t\tstyleVariationName\n\t);\n};\n\n/**\n * Registers a new block variation for the given block type.\n *\n * @param {string}           blockName Name of the block (example: “core/columns”).\n * @param {WPBlockVariation} variation Object describing a block variation.\n */\nexport const registerBlockVariation = ( blockName, variation ) => {\n\tdispatch( 'core/blocks' ).addBlockVariations( blockName, variation );\n};\n\n/**\n * Unregisters a block variation defined for the given block type.\n *\n * @param {string} blockName     Name of the block (example: “core/columns”).\n * @param {string} variationName Name of the variation defined for the block.\n */\nexport const unregisterBlockVariation = ( blockName, variationName ) => {\n\tdispatch( 'core/blocks' ).removeBlockVariations( blockName, variationName );\n};\n"]}