{"version":3,"sources":["@wordpress/blocks/src/api/raw-handling/index.js"],"names":["flatMap","filter","compact","createBlock","getBlockTransforms","findTransform","getBlockAttributes","parseWithGrammar","normaliseBlocks","specialCommentConverter","listReducer","blockquoteNormaliser","figureContentReducer","shortcodeConverter","deepFilterHTML","getBlockContentSchema","getPhrasingContentSchema","pasteHandler","getRawTransformations","type","map","transform","isMatch","node","selector","matches","htmlToBlocks","html","rawTransforms","doc","document","implementation","createHTMLDocument","body","innerHTML","Array","from","children","rawTransform","outerHTML","blockName","rawHandler","HTML","indexOf","pieces","phrasingContentSchema","blockContentSchema","piece","filters"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { flatMap, filter, compact } from 'lodash';\n\n/**\n * Internal dependencies\n */\nimport { createBlock, getBlockTransforms, findTransform } from '../factory';\nimport { getBlockAttributes, parseWithGrammar } from '../parser';\nimport normaliseBlocks from './normalise-blocks';\nimport specialCommentConverter from './special-comment-converter';\nimport listReducer from './list-reducer';\nimport blockquoteNormaliser from './blockquote-normaliser';\nimport figureContentReducer from './figure-content-reducer';\nimport shortcodeConverter from './shortcode-converter';\nimport { deepFilterHTML, getBlockContentSchema } from './utils';\n\nimport { getPhrasingContentSchema } from './phrasing-content';\n\nexport { pasteHandler } from './paste-handler';\nexport { getPhrasingContentSchema };\n\nfunction getRawTransformations() {\n\treturn filter( getBlockTransforms( 'from' ), { type: 'raw' } ).map(\n\t\t( transform ) => {\n\t\t\treturn transform.isMatch\n\t\t\t\t? transform\n\t\t\t\t: {\n\t\t\t\t\t\t...transform,\n\t\t\t\t\t\tisMatch: ( node ) =>\n\t\t\t\t\t\t\ttransform.selector &&\n\t\t\t\t\t\t\tnode.matches( transform.selector ),\n\t\t\t\t  };\n\t\t}\n\t);\n}\n\n/**\n * Converts HTML directly to blocks. Looks for a matching transform for each\n * top-level tag. The HTML should be filtered to not have any text between\n * top-level tags and formatted in a way that blocks can handle the HTML.\n *\n * @param  {Object} $1               Named parameters.\n * @param  {string} $1.html          HTML to convert.\n * @param  {Array}  $1.rawTransforms Transforms that can be used.\n *\n * @return {Array} An array of blocks.\n */\nfunction htmlToBlocks( { html, rawTransforms } ) {\n\tconst doc = document.implementation.createHTMLDocument( '' );\n\n\tdoc.body.innerHTML = html;\n\n\treturn Array.from( doc.body.children ).map( ( node ) => {\n\t\tconst rawTransform = findTransform( rawTransforms, ( { isMatch } ) =>\n\t\t\tisMatch( node )\n\t\t);\n\n\t\tif ( ! rawTransform ) {\n\t\t\treturn createBlock(\n\t\t\t\t// Should not be hardcoded.\n\t\t\t\t'core/html',\n\t\t\t\tgetBlockAttributes( 'core/html', node.outerHTML )\n\t\t\t);\n\t\t}\n\n\t\tconst { transform, blockName } = rawTransform;\n\n\t\tif ( transform ) {\n\t\t\treturn transform( node );\n\t\t}\n\n\t\treturn createBlock(\n\t\t\tblockName,\n\t\t\tgetBlockAttributes( blockName, node.outerHTML )\n\t\t);\n\t} );\n}\n\n/**\n * Converts an HTML string to known blocks.\n *\n * @param {Object} $1\n * @param {string} $1.HTML The HTML to convert.\n *\n * @return {Array} A list of blocks.\n */\nexport function rawHandler( { HTML = '' } ) {\n\t// If we detect block delimiters, parse entirely as blocks.\n\tif ( HTML.indexOf( '<!-- wp:' ) !== -1 ) {\n\t\treturn parseWithGrammar( HTML );\n\t}\n\n\t// An array of HTML strings and block objects. The blocks replace matched\n\t// shortcodes.\n\tconst pieces = shortcodeConverter( HTML );\n\tconst rawTransforms = getRawTransformations();\n\tconst phrasingContentSchema = getPhrasingContentSchema();\n\tconst blockContentSchema = getBlockContentSchema(\n\t\trawTransforms,\n\t\tphrasingContentSchema\n\t);\n\n\treturn compact(\n\t\tflatMap( pieces, ( piece ) => {\n\t\t\t// Already a block from shortcode.\n\t\t\tif ( typeof piece !== 'string' ) {\n\t\t\t\treturn piece;\n\t\t\t}\n\n\t\t\t// These filters are essential for some blocks to be able to transform\n\t\t\t// from raw HTML. These filters move around some content or add\n\t\t\t// additional tags, they do not remove any content.\n\t\t\tconst filters = [\n\t\t\t\t// Needed to adjust invalid lists.\n\t\t\t\tlistReducer,\n\t\t\t\t// Needed to create more and nextpage blocks.\n\t\t\t\tspecialCommentConverter,\n\t\t\t\t// Needed to create media blocks.\n\t\t\t\tfigureContentReducer,\n\t\t\t\t// Needed to create the quote block, which cannot handle text\n\t\t\t\t// without wrapper paragraphs.\n\t\t\t\tblockquoteNormaliser,\n\t\t\t];\n\n\t\t\tpiece = deepFilterHTML( piece, filters, blockContentSchema );\n\t\t\tpiece = normaliseBlocks( piece );\n\n\t\t\treturn htmlToBlocks( { html: piece, rawTransforms } );\n\t\t} )\n\t);\n}\n"]}