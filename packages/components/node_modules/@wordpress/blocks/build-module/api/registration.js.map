{"version":3,"sources":["@wordpress/blocks/src/api/registration.js"],"names":["get","isFunction","isNil","isPlainObject","omit","pick","pickBy","some","applyFilters","select","dispatch","blockDefault","isValidIcon","normalizeIconObject","DEPRECATED_ENTRY_KEYS","LEGACY_CATEGORY_MAPPING","common","formatting","layout","serverSideBlockDefinitions","unstable__bootstrapServerSideBlockDefinitions","definitions","registerBlockType","name","settings","icon","keywords","attributes","providesContext","usesContext","supports","styles","save","value","console","error","test","getBlockType","preFilterSettings","deprecated","map","deprecation","edit","hasOwnProperty","category","getCategories","slug","warn","title","src","addBlockTypes","registerBlockCollection","namespace","addBlockCollection","unregisterBlockCollection","removeBlockCollection","unregisterBlockType","oldBlock","removeBlockTypes","setFreeformContentHandlerName","blockName","setFreeformFallbackBlockName","getFreeformContentHandlerName","getFreeformFallbackBlockName","getGroupingBlockName","setUnregisteredTypeHandlerName","setUnregisteredFallbackBlockName","getUnregisteredTypeHandlerName","getUnregisteredFallbackBlockName","setDefaultBlockName","setGroupingBlockName","getDefaultBlockName","getBlockTypes","getBlockSupport","nameOrType","feature","defaultSupports","hasBlockSupport","isReusableBlock","blockOrType","getChildBlockNames","hasChildBlocks","hasChildBlocksWithInserterSupport","registerBlockStyle","styleVariation","addBlockStyles","unregisterBlockStyle","styleVariationName","removeBlockStyles","registerBlockVariation","variation","addBlockVariations","unregisterBlockVariation","variationName","removeBlockVariations"],"mappings":"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","sourcesContent":["/* eslint no-console: [ 'error', { allow: [ 'error', 'warn' ] } ] */\n\n/**\n * External dependencies\n */\nimport {\n\tget,\n\tisFunction,\n\tisNil,\n\tisPlainObject,\n\tomit,\n\tpick,\n\tpickBy,\n\tsome,\n} from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { applyFilters } from '@wordpress/hooks';\nimport { select, dispatch } from '@wordpress/data';\nimport { blockDefault } from '@wordpress/icons';\n\n/**\n * Internal dependencies\n */\nimport { isValidIcon, normalizeIconObject } from './utils';\nimport { DEPRECATED_ENTRY_KEYS } from './constants';\n\n/**\n * An icon type definition. One of a Dashicon slug, an element,\n * or a component.\n *\n * @typedef {(string|WPElement|WPComponent)} WPIcon\n *\n * @see https://developer.wordpress.org/resource/dashicons/\n */\n\n/**\n * Render behavior of a block type icon; one of a Dashicon slug, an element,\n * or a component.\n *\n * @typedef {WPIcon} WPBlockTypeIconRender\n */\n\n/**\n * An object describing a normalized block type icon.\n *\n * @typedef {Object} WPBlockTypeIconDescriptor\n *\n * @property {WPBlockTypeIconRender} src         Render behavior of the icon,\n *                                               one of a Dashicon slug, an\n *                                               element, or a component.\n * @property {string}                background  Optimal background hex string\n *                                               color when displaying icon.\n * @property {string}                foreground  Optimal foreground hex string\n *                                               color when displaying icon.\n * @property {string}                shadowColor Optimal shadow hex string\n *                                               color when displaying icon.\n */\n\n/**\n * Value to use to render the icon for a block type in an editor interface,\n * either a Dashicon slug, an element, a component, or an object describing\n * the icon.\n *\n * @typedef {(WPBlockTypeIconDescriptor|WPBlockTypeIconRender)} WPBlockTypeIcon\n */\n\n/**\n * Named block variation scopes.\n *\n * @typedef {'block'|'inserter'} WPBlockVariationScope\n */\n\n/**\n * An object describing a variation defined for the block type.\n *\n * @typedef {Object} WPBlockVariation\n *\n * @property {string}   name                   The unique and machine-readable name.\n * @property {string}   title                  A human-readable variation title.\n * @property {string}   [description]          A detailed variation description.\n * @property {WPIcon}   [icon]                 An icon helping to visualize the variation.\n * @property {boolean}  [isDefault]            Indicates whether the current variation is\n *                                             the default one. Defaults to `false`.\n * @property {Object}   [attributes]           Values which override block attributes.\n * @property {Array[]}  [innerBlocks]          Initial configuration of nested blocks.\n * @property {Object}   [example]              Example provides structured data for\n *                                             the block preview. You can set to\n *                                             `undefined` to disable the preview shown\n *                                             for the block type.\n * @property {WPBlockVariationScope[]} [scope] The list of scopes where the variation\n *                                             is applicable. When not provided, it\n *                                             assumes all available scopes.\n */\n\n/**\n * Defined behavior of a block type.\n *\n * @typedef {Object} WPBlock\n *\n * @property {string}             name          Block type's namespaced name.\n * @property {string}             title         Human-readable block type label.\n * @property {string}             [description] A detailed block type description.\n * @property {string}             [category]    Block type category classification,\n *                                              used in search interfaces to arrange\n *                                              block types by category.\n * @property {WPBlockTypeIcon}    [icon]        Block type icon.\n * @property {string[]}           [keywords]    Additional keywords to produce block\n *                                              type as result in search interfaces.\n * @property {Object}             [attributes]  Block type attributes.\n * @property {WPComponent}        [save]        Optional component describing\n *                                              serialized markup structure of a\n *                                              block type.\n * @property {WPComponent}        edit          Component rendering an element to\n *                                              manipulate the attributes of a block\n *                                              in the context of an editor.\n * @property {WPBlockVariation[]} [variations]  The list of block variations.\n * @property {Object}             [example]     Example provides structured data for\n *                                              the block preview. When not defined\n *                                              then no preview is shown.\n */\n\n/**\n * Mapping of legacy category slugs to their latest normal values, used to\n * accommodate updates of the default set of block categories.\n *\n * @type {Record<string,string>}\n */\nconst LEGACY_CATEGORY_MAPPING = {\n\tcommon: 'text',\n\tformatting: 'text',\n\tlayout: 'design',\n};\n\nexport let serverSideBlockDefinitions = {};\n\n/**\n * Sets the server side block definition of blocks.\n *\n * @param {Object} definitions Server-side block definitions\n */\n// eslint-disable-next-line camelcase\nexport function unstable__bootstrapServerSideBlockDefinitions( definitions ) {\n\tserverSideBlockDefinitions = {\n\t\t...serverSideBlockDefinitions,\n\t\t...definitions,\n\t};\n}\n\n/**\n * Registers a new block provided a unique name and an object defining its\n * behavior. Once registered, the block is made available as an option to any\n * editor interface where blocks are implemented.\n *\n * @param {string} name     Block name.\n * @param {Object} settings Block settings.\n *\n * @return {?WPBlock} The block, if it has been successfully registered;\n *                    otherwise `undefined`.\n */\nexport function registerBlockType( name, settings ) {\n\tsettings = {\n\t\tname,\n\t\ticon: blockDefault,\n\t\tkeywords: [],\n\t\tattributes: {},\n\t\tprovidesContext: {},\n\t\tusesContext: [],\n\t\tsupports: {},\n\t\tstyles: [],\n\t\tsave: () => null,\n\t\t...pickBy(\n\t\t\tget( serverSideBlockDefinitions, name, {} ),\n\t\t\t( value ) => ! isNil( value )\n\t\t),\n\t\t...settings,\n\t};\n\n\tif ( typeof name !== 'string' ) {\n\t\tconsole.error( 'Block names must be strings.' );\n\t\treturn;\n\t}\n\tif ( ! /^[a-z][a-z0-9-]*\\/[a-z][a-z0-9-]*$/.test( name ) ) {\n\t\tconsole.error(\n\t\t\t'Block names must contain a namespace prefix, include only lowercase alphanumeric characters or dashes, and start with a letter. Example: my-plugin/my-custom-block'\n\t\t);\n\t\treturn;\n\t}\n\tif ( select( 'core/blocks' ).getBlockType( name ) ) {\n\t\tconsole.error( 'Block \"' + name + '\" is already registered.' );\n\t\treturn;\n\t}\n\n\tconst preFilterSettings = { ...settings };\n\tsettings = applyFilters( 'blocks.registerBlockType', settings, name );\n\n\tif ( settings.deprecated ) {\n\t\tsettings.deprecated = settings.deprecated.map( ( deprecation ) =>\n\t\t\tpick(\n\t\t\t\t// Only keep valid deprecation keys.\n\t\t\t\tapplyFilters(\n\t\t\t\t\t'blocks.registerBlockType',\n\t\t\t\t\t// Merge deprecation keys with pre-filter settings\n\t\t\t\t\t// so that filters that depend on specific keys being\n\t\t\t\t\t// present don't fail.\n\t\t\t\t\t{\n\t\t\t\t\t\t// Omit deprecation keys here so that deprecations\n\t\t\t\t\t\t// can opt out of specific keys like \"supports\".\n\t\t\t\t\t\t...omit( preFilterSettings, DEPRECATED_ENTRY_KEYS ),\n\t\t\t\t\t\t...deprecation,\n\t\t\t\t\t},\n\t\t\t\t\tname\n\t\t\t\t),\n\t\t\t\tDEPRECATED_ENTRY_KEYS\n\t\t\t)\n\t\t);\n\t}\n\n\tif ( ! isPlainObject( settings ) ) {\n\t\tconsole.error( 'Block settings must be a valid object.' );\n\t\treturn;\n\t}\n\n\tif ( ! isFunction( settings.save ) ) {\n\t\tconsole.error( 'The \"save\" property must be a valid function.' );\n\t\treturn;\n\t}\n\tif ( 'edit' in settings && ! isFunction( settings.edit ) ) {\n\t\tconsole.error( 'The \"edit\" property must be a valid function.' );\n\t\treturn;\n\t}\n\n\t// Canonicalize legacy categories to equivalent fallback.\n\tif ( LEGACY_CATEGORY_MAPPING.hasOwnProperty( settings.category ) ) {\n\t\tsettings.category = LEGACY_CATEGORY_MAPPING[ settings.category ];\n\t}\n\n\tif (\n\t\t'category' in settings &&\n\t\t! some( select( 'core/blocks' ).getCategories(), {\n\t\t\tslug: settings.category,\n\t\t} )\n\t) {\n\t\tconsole.warn(\n\t\t\t'The block \"' +\n\t\t\t\tname +\n\t\t\t\t'\" is registered with an invalid category \"' +\n\t\t\t\tsettings.category +\n\t\t\t\t'\".'\n\t\t);\n\t\tdelete settings.category;\n\t}\n\n\tif ( ! ( 'title' in settings ) || settings.title === '' ) {\n\t\tconsole.error( 'The block \"' + name + '\" must have a title.' );\n\t\treturn;\n\t}\n\tif ( typeof settings.title !== 'string' ) {\n\t\tconsole.error( 'Block titles must be strings.' );\n\t\treturn;\n\t}\n\n\tsettings.icon = normalizeIconObject( settings.icon );\n\tif ( ! isValidIcon( settings.icon.src ) ) {\n\t\tconsole.error(\n\t\t\t'The icon passed is invalid. ' +\n\t\t\t\t'The icon should be a string, an element, a function, or an object following the specifications documented in https://developer.wordpress.org/block-editor/developers/block-api/block-registration/#icon-optional'\n\t\t);\n\t\treturn;\n\t}\n\n\tdispatch( 'core/blocks' ).addBlockTypes( settings );\n\n\treturn settings;\n}\n\n/**\n * Registers a new block collection to group blocks in the same namespace in the inserter.\n *\n * @param {string} namespace       The namespace to group blocks by in the inserter; corresponds to the block namespace.\n * @param {Object} settings        The block collection settings.\n * @param {string} settings.title  The title to display in the block inserter.\n * @param {Object} [settings.icon] The icon to display in the block inserter.\n */\nexport function registerBlockCollection( namespace, { title, icon } ) {\n\tdispatch( 'core/blocks' ).addBlockCollection( namespace, title, icon );\n}\n\n/**\n * Unregisters a block collection\n *\n * @param {string} namespace The namespace to group blocks by in the inserter; corresponds to the block namespace\n *\n */\nexport function unregisterBlockCollection( namespace ) {\n\tdispatch( 'core/blocks' ).removeBlockCollection( namespace );\n}\n\n/**\n * Unregisters a block.\n *\n * @param {string} name Block name.\n *\n * @return {?WPBlock} The previous block value, if it has been successfully\n *                    unregistered; otherwise `undefined`.\n */\nexport function unregisterBlockType( name ) {\n\tconst oldBlock = select( 'core/blocks' ).getBlockType( name );\n\tif ( ! oldBlock ) {\n\t\tconsole.error( 'Block \"' + name + '\" is not registered.' );\n\t\treturn;\n\t}\n\tdispatch( 'core/blocks' ).removeBlockTypes( name );\n\treturn oldBlock;\n}\n\n/**\n * Assigns name of block for handling non-block content.\n *\n * @param {string} blockName Block name.\n */\nexport function setFreeformContentHandlerName( blockName ) {\n\tdispatch( 'core/blocks' ).setFreeformFallbackBlockName( blockName );\n}\n\n/**\n * Retrieves name of block handling non-block content, or undefined if no\n * handler has been defined.\n *\n * @return {?string} Block name.\n */\nexport function getFreeformContentHandlerName() {\n\treturn select( 'core/blocks' ).getFreeformFallbackBlockName();\n}\n\n/**\n * Retrieves name of block used for handling grouping interactions.\n *\n * @return {?string} Block name.\n */\nexport function getGroupingBlockName() {\n\treturn select( 'core/blocks' ).getGroupingBlockName();\n}\n\n/**\n * Assigns name of block handling unregistered block types.\n *\n * @param {string} blockName Block name.\n */\nexport function setUnregisteredTypeHandlerName( blockName ) {\n\tdispatch( 'core/blocks' ).setUnregisteredFallbackBlockName( blockName );\n}\n\n/**\n * Retrieves name of block handling unregistered block types, or undefined if no\n * handler has been defined.\n *\n * @return {?string} Block name.\n */\nexport function getUnregisteredTypeHandlerName() {\n\treturn select( 'core/blocks' ).getUnregisteredFallbackBlockName();\n}\n\n/**\n * Assigns the default block name.\n *\n * @param {string} name Block name.\n */\nexport function setDefaultBlockName( name ) {\n\tdispatch( 'core/blocks' ).setDefaultBlockName( name );\n}\n\n/**\n * Assigns name of block for handling block grouping interactions.\n *\n * @param {string} name Block name.\n */\nexport function setGroupingBlockName( name ) {\n\tdispatch( 'core/blocks' ).setGroupingBlockName( name );\n}\n\n/**\n * Retrieves the default block name.\n *\n * @return {?string} Block name.\n */\nexport function getDefaultBlockName() {\n\treturn select( 'core/blocks' ).getDefaultBlockName();\n}\n\n/**\n * Returns a registered block type.\n *\n * @param {string} name Block name.\n *\n * @return {?Object} Block type.\n */\nexport function getBlockType( name ) {\n\treturn select( 'core/blocks' ).getBlockType( name );\n}\n\n/**\n * Returns all registered blocks.\n *\n * @return {Array} Block settings.\n */\nexport function getBlockTypes() {\n\treturn select( 'core/blocks' ).getBlockTypes();\n}\n\n/**\n * Returns the block support value for a feature, if defined.\n *\n * @param  {(string|Object)} nameOrType      Block name or type object\n * @param  {string}          feature         Feature to retrieve\n * @param  {*}               defaultSupports Default value to return if not\n *                                           explicitly defined\n *\n * @return {?*} Block support value\n */\nexport function getBlockSupport( nameOrType, feature, defaultSupports ) {\n\treturn select( 'core/blocks' ).getBlockSupport(\n\t\tnameOrType,\n\t\tfeature,\n\t\tdefaultSupports\n\t);\n}\n\n/**\n * Returns true if the block defines support for a feature, or false otherwise.\n *\n * @param {(string|Object)} nameOrType      Block name or type object.\n * @param {string}          feature         Feature to test.\n * @param {boolean}         defaultSupports Whether feature is supported by\n *                                          default if not explicitly defined.\n *\n * @return {boolean} Whether block supports feature.\n */\nexport function hasBlockSupport( nameOrType, feature, defaultSupports ) {\n\treturn select( 'core/blocks' ).hasBlockSupport(\n\t\tnameOrType,\n\t\tfeature,\n\t\tdefaultSupports\n\t);\n}\n\n/**\n * Determines whether or not the given block is a reusable block. This is a\n * special block type that is used to point to a global block stored via the\n * API.\n *\n * @param {Object} blockOrType Block or Block Type to test.\n *\n * @return {boolean} Whether the given block is a reusable block.\n */\nexport function isReusableBlock( blockOrType ) {\n\treturn blockOrType.name === 'core/block';\n}\n\n/**\n * Returns an array with the child blocks of a given block.\n *\n * @param {string} blockName Name of block (example: “latest-posts”).\n *\n * @return {Array} Array of child block names.\n */\nexport const getChildBlockNames = ( blockName ) => {\n\treturn select( 'core/blocks' ).getChildBlockNames( blockName );\n};\n\n/**\n * Returns a boolean indicating if a block has child blocks or not.\n *\n * @param {string} blockName Name of block (example: “latest-posts”).\n *\n * @return {boolean} True if a block contains child blocks and false otherwise.\n */\nexport const hasChildBlocks = ( blockName ) => {\n\treturn select( 'core/blocks' ).hasChildBlocks( blockName );\n};\n\n/**\n * Returns a boolean indicating if a block has at least one child block with inserter support.\n *\n * @param {string} blockName Block type name.\n *\n * @return {boolean} True if a block contains at least one child blocks with inserter support\n *                   and false otherwise.\n */\nexport const hasChildBlocksWithInserterSupport = ( blockName ) => {\n\treturn select( 'core/blocks' ).hasChildBlocksWithInserterSupport(\n\t\tblockName\n\t);\n};\n\n/**\n * Registers a new block style variation for the given block.\n *\n * @param {string} blockName      Name of block (example: “core/latest-posts”).\n * @param {Object} styleVariation Object containing `name` which is the class name applied to the block and `label` which identifies the variation to the user.\n */\nexport const registerBlockStyle = ( blockName, styleVariation ) => {\n\tdispatch( 'core/blocks' ).addBlockStyles( blockName, styleVariation );\n};\n\n/**\n * Unregisters a block style variation for the given block.\n *\n * @param {string} blockName          Name of block (example: “core/latest-posts”).\n * @param {string} styleVariationName Name of class applied to the block.\n */\nexport const unregisterBlockStyle = ( blockName, styleVariationName ) => {\n\tdispatch( 'core/blocks' ).removeBlockStyles(\n\t\tblockName,\n\t\tstyleVariationName\n\t);\n};\n\n/**\n * Registers a new block variation for the given block type.\n *\n * @param {string}           blockName Name of the block (example: “core/columns”).\n * @param {WPBlockVariation} variation Object describing a block variation.\n */\nexport const registerBlockVariation = ( blockName, variation ) => {\n\tdispatch( 'core/blocks' ).addBlockVariations( blockName, variation );\n};\n\n/**\n * Unregisters a block variation defined for the given block type.\n *\n * @param {string} blockName     Name of the block (example: “core/columns”).\n * @param {string} variationName Name of the variation defined for the block.\n */\nexport const unregisterBlockVariation = ( blockName, variationName ) => {\n\tdispatch( 'core/blocks' ).removeBlockVariations( blockName, variationName );\n};\n"]}