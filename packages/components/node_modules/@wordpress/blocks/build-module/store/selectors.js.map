{"version":3,"sources":["@wordpress/blocks/src/store/selectors.js"],"names":["createSelector","deburr","filter","findLast","first","flow","get","includes","map","some","getNormalizedBlockType","state","nameOrType","getBlockType","getBlockTypes","Object","values","blockTypes","blockType","variations","getBlockVariations","name","blockVariations","getBlockStyles","blockStyles","blockName","scope","variation","getDefaultBlockVariation","getCategories","categories","getCollections","collections","getDefaultBlockName","defaultBlockName","getFreeformFallbackBlockName","freeformFallbackBlockName","getUnregisteredFallbackBlockName","unregisteredFallbackBlockName","getGroupingBlockName","groupingBlockName","getChildBlockNames","parent","getBlockSupport","feature","defaultSupports","split","hasBlockSupport","isMatchingSearchTerm","searchTerm","getNormalizedSearchTerm","term","toLowerCase","trim","normalizedSearchTerm","isSearchMatch","normalizedCandidate","title","keywords","category","hasChildBlocks","length","hasChildBlocksWithInserterSupport","childBlockName"],"mappings":";;;;;;;AAAA;;;AAGA,OAAOA,cAAP,MAA2B,QAA3B;AACA,SACCC,MADD,EAECC,MAFD,EAGCC,QAHD,EAICC,KAJD,EAKCC,IALD,EAMCC,GAND,EAOCC,QAPD,EAQCC,GARD,EASCC,IATD,QAUO,QAVP;AAYA;;AACA;;AACA;;AAEA;;;;;;;;;;AASA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAEC,KAAF,EAASC,UAAT;AAAA,SAC9B,aAAa,OAAOA,UAApB,GACGC,YAAY,CAAEF,KAAF,EAASC,UAAT,CADf,GAEGA,UAH2B;AAAA,CAA/B;AAKA;;;;;;;;;AAOA,OAAO,IAAME,aAAa,GAAGd,cAAc,CAC1C,UAAEW,KAAF,EAAa;AACZ,SAAOI,MAAM,CAACC,MAAP,CAAeL,KAAK,CAACM,UAArB,EAAkCT,GAAlC,CAAuC,UAAEU,SAAF,EAAiB;AAC9D,6BACIA,SADJ;AAECC,MAAAA,UAAU,EAAEC,kBAAkB,CAAET,KAAF,EAASO,SAAS,CAACG,IAAnB;AAF/B;AAIA,GALM,CAAP;AAMA,CARyC,EAS1C,UAAEV,KAAF;AAAA,SAAa,CAAEA,KAAK,CAACM,UAAR,EAAoBN,KAAK,CAACW,eAA1B,CAAb;AAAA,CAT0C,CAApC;AAYP;;;;;;;;;AAQA,OAAO,SAAST,YAAT,CAAuBF,KAAvB,EAA8BU,IAA9B,EAAqC;AAC3C,SAAOV,KAAK,CAACM,UAAN,CAAkBI,IAAlB,CAAP;AACA;AAED;;;;;;;;;AAQA,OAAO,SAASE,cAAT,CAAyBZ,KAAzB,EAAgCU,IAAhC,EAAuC;AAC7C,SAAOV,KAAK,CAACa,WAAN,CAAmBH,IAAnB,CAAP;AACA;AAED;;;;;;;;;;AASA,OAAO,SAASD,kBAAT,CAA6BT,KAA7B,EAAoCc,SAApC,EAA+CC,KAA/C,EAAuD;AAC7D,MAAMP,UAAU,GAAGR,KAAK,CAACW,eAAN,CAAuBG,SAAvB,CAAnB;;AACA,MAAK,CAAEN,UAAF,IAAgB,CAAEO,KAAvB,EAA+B;AAC9B,WAAOP,UAAP;AACA;;AACD,SAAOA,UAAU,CAACjB,MAAX,CAAmB,UAAEyB,SAAF,EAAiB;AAC1C,WAAO,CAAEA,SAAS,CAACD,KAAZ,IAAqBC,SAAS,CAACD,KAAV,CAAgBnB,QAAhB,CAA0BmB,KAA1B,CAA5B;AACA,GAFM,CAAP;AAGA;AAED;;;;;;;;;;;;;AAYA,OAAO,SAASE,wBAAT,CAAmCjB,KAAnC,EAA0Cc,SAA1C,EAAqDC,KAArD,EAA6D;AACnE,MAAMP,UAAU,GAAGC,kBAAkB,CAAET,KAAF,EAASc,SAAT,EAAoBC,KAApB,CAArC;AAEA,SAAOvB,QAAQ,CAAEgB,UAAF,EAAc,WAAd,CAAR,IAAuCf,KAAK,CAAEe,UAAF,CAAnD;AACA;AAED;;;;;;;;AAOA,OAAO,SAASU,aAAT,CAAwBlB,KAAxB,EAAgC;AACtC,SAAOA,KAAK,CAACmB,UAAb;AACA;AAED;;;;;;;;AAOA,OAAO,SAASC,cAAT,CAAyBpB,KAAzB,EAAiC;AACvC,SAAOA,KAAK,CAACqB,WAAb;AACA;AAED;;;;;;;;AAOA,OAAO,SAASC,mBAAT,CAA8BtB,KAA9B,EAAsC;AAC5C,SAAOA,KAAK,CAACuB,gBAAb;AACA;AAED;;;;;;;;AAOA,OAAO,SAASC,4BAAT,CAAuCxB,KAAvC,EAA+C;AACrD,SAAOA,KAAK,CAACyB,yBAAb;AACA;AAED;;;;;;;;AAOA,OAAO,SAASC,gCAAT,CAA2C1B,KAA3C,EAAmD;AACzD,SAAOA,KAAK,CAAC2B,6BAAb;AACA;AAED;;;;;;;;AAOA,OAAO,SAASC,oBAAT,CAA+B5B,KAA/B,EAAuC;AAC7C,SAAOA,KAAK,CAAC6B,iBAAb;AACA;AAED;;;;;;;;;AAQA,OAAO,IAAMC,kBAAkB,GAAGzC,cAAc,CAC/C,UAAEW,KAAF,EAASc,SAAT,EAAwB;AACvB,SAAOjB,GAAG,CACTN,MAAM,CAAES,KAAK,CAACM,UAAR,EAAoB,UAAEC,SAAF,EAAiB;AAC1C,WAAOX,QAAQ,CAAEW,SAAS,CAACwB,MAAZ,EAAoBjB,SAApB,CAAf;AACA,GAFK,CADG,EAIT;AAAA,QAAIJ,IAAJ,QAAIA,IAAJ;AAAA,WAAgBA,IAAhB;AAAA,GAJS,CAAV;AAMA,CAR8C,EAS/C,UAAEV,KAAF;AAAA,SAAa,CAAEA,KAAK,CAACM,UAAR,CAAb;AAAA,CAT+C,CAAzC;AAYP;;;;;;;;;;;;AAWA,OAAO,IAAM0B,eAAe,GAAG,SAAlBA,eAAkB,CAC9BhC,KAD8B,EAE9BC,UAF8B,EAG9BgC,OAH8B,EAI9BC,eAJ8B,EAK1B;AACJ,MAAM3B,SAAS,GAAGR,sBAAsB,CAAEC,KAAF,EAASC,UAAT,CAAxC;AAEA,SAAON,GAAG,CACTY,SADS,GAEP,UAFO,4BAEQ0B,OAAO,CAACE,KAAR,CAAe,GAAf,CAFR,IAGTD,eAHS,CAAV;AAKA,CAbM;AAeP;;;;;;;;;;;;AAWA,OAAO,SAASE,eAAT,CAA0BpC,KAA1B,EAAiCC,UAAjC,EAA6CgC,OAA7C,EAAsDC,eAAtD,EAAwE;AAC9E,SAAO,CAAC,CAAEF,eAAe,CAAEhC,KAAF,EAASC,UAAT,EAAqBgC,OAArB,EAA8BC,eAA9B,CAAzB;AACA;AAED;;;;;;;;;;;AAUA,OAAO,SAASG,oBAAT,CAA+BrC,KAA/B,EAAsCC,UAAtC,EAAkDqC,UAAlD,EAA+D;AACrE,MAAM/B,SAAS,GAAGR,sBAAsB,CAAEC,KAAF,EAASC,UAAT,CAAxC;AAEA,MAAMsC,uBAAuB,GAAG7C,IAAI,CAAE,CACrC;AACA;AACAJ,EAAAA,MAHqC,EAKrC;AACA;AACA,YAAEkD,IAAF;AAAA,WAAYA,IAAI,CAACC,WAAL,EAAZ;AAAA,GAPqC,EASrC;AACA;AACA,YAAED,IAAF;AAAA,WAAYA,IAAI,CAACE,IAAL,EAAZ;AAAA,GAXqC,CAAF,CAApC;AAcA,MAAMC,oBAAoB,GAAGJ,uBAAuB,CAAED,UAAF,CAApD;AAEA,MAAMM,aAAa,GAAGlD,IAAI,CAAE,CAC3B6C,uBAD2B,EAE3B,UAAEM,mBAAF;AAAA,WACCjD,QAAQ,CAAEiD,mBAAF,EAAuBF,oBAAvB,CADT;AAAA,GAF2B,CAAF,CAA1B;AAMA,SACCC,aAAa,CAAErC,SAAS,CAACuC,KAAZ,CAAb,IACAhD,IAAI,CAAES,SAAS,CAACwC,QAAZ,EAAsBH,aAAtB,CADJ,IAEAA,aAAa,CAAErC,SAAS,CAACyC,QAAZ,CAHd;AAKA;AAED;;;;;;;;;AAQA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAEjD,KAAF,EAASc,SAAT,EAAwB;AACrD,SAAOgB,kBAAkB,CAAE9B,KAAF,EAASc,SAAT,CAAlB,CAAuCoC,MAAvC,GAAgD,CAAvD;AACA,CAFM;AAIP;;;;;;;;;;AASA,OAAO,IAAMC,iCAAiC,GAAG,SAApCA,iCAAoC,CAAEnD,KAAF,EAASc,SAAT,EAAwB;AACxE,SAAOhB,IAAI,CAAEgC,kBAAkB,CAAE9B,KAAF,EAASc,SAAT,CAApB,EAA0C,UAAEsC,cAAF,EAAsB;AAC1E,WAAOhB,eAAe,CAAEpC,KAAF,EAASoD,cAAT,EAAyB,UAAzB,EAAqC,IAArC,CAAtB;AACA,GAFU,CAAX;AAGA,CAJM","sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\nimport {\n\tdeburr,\n\tfilter,\n\tfindLast,\n\tfirst,\n\tflow,\n\tget,\n\tincludes,\n\tmap,\n\tsome,\n} from 'lodash';\n\n/** @typedef {import('../api/registration').WPBlockVariation} WPBlockVariation */\n/** @typedef {import('../api/registration').WPBlockVariationScope} WPBlockVariationScope */\n/** @typedef {import('./reducer').WPBlockCategory} WPBlockCategory */\n\n/**\n * Given a block name or block type object, returns the corresponding\n * normalized block type object.\n *\n * @param {Object}          state      Blocks state.\n * @param {(string|Object)} nameOrType Block name or type object\n *\n * @return {Object} Block type object.\n */\nconst getNormalizedBlockType = ( state, nameOrType ) =>\n\t'string' === typeof nameOrType\n\t\t? getBlockType( state, nameOrType )\n\t\t: nameOrType;\n\n/**\n * Returns all the available block types.\n *\n * @param {Object} state Data state.\n *\n * @return {Array} Block Types.\n */\nexport const getBlockTypes = createSelector(\n\t( state ) => {\n\t\treturn Object.values( state.blockTypes ).map( ( blockType ) => {\n\t\t\treturn {\n\t\t\t\t...blockType,\n\t\t\t\tvariations: getBlockVariations( state, blockType.name ),\n\t\t\t};\n\t\t} );\n\t},\n\t( state ) => [ state.blockTypes, state.blockVariations ]\n);\n\n/**\n * Returns a block type by name.\n *\n * @param {Object} state Data state.\n * @param {string} name Block type name.\n *\n * @return {Object?} Block Type.\n */\nexport function getBlockType( state, name ) {\n\treturn state.blockTypes[ name ];\n}\n\n/**\n * Returns block styles by block name.\n *\n * @param {Object} state Data state.\n * @param {string} name  Block type name.\n *\n * @return {Array?} Block Styles.\n */\nexport function getBlockStyles( state, name ) {\n\treturn state.blockStyles[ name ];\n}\n\n/**\n * Returns block variations by block name.\n *\n * @param {Object}                state     Data state.\n * @param {string}                blockName Block type name.\n * @param {WPBlockVariationScope} [scope]   Block variation scope name.\n *\n * @return {(WPBlockVariation[]|void)} Block variations.\n */\nexport function getBlockVariations( state, blockName, scope ) {\n\tconst variations = state.blockVariations[ blockName ];\n\tif ( ! variations || ! scope ) {\n\t\treturn variations;\n\t}\n\treturn variations.filter( ( variation ) => {\n\t\treturn ! variation.scope || variation.scope.includes( scope );\n\t} );\n}\n\n/**\n * Returns the default block variation for the given block type.\n * When there are multiple variations annotated as the default one,\n * the last added item is picked. This simplifies registering overrides.\n * When there is no default variation set, it returns the first item.\n *\n * @param {Object}                state     Data state.\n * @param {string}                blockName Block type name.\n * @param {WPBlockVariationScope} [scope]   Block variation scope name.\n *\n * @return {?WPBlockVariation} The default block variation.\n */\nexport function getDefaultBlockVariation( state, blockName, scope ) {\n\tconst variations = getBlockVariations( state, blockName, scope );\n\n\treturn findLast( variations, 'isDefault' ) || first( variations );\n}\n\n/**\n * Returns all the available categories.\n *\n * @param {Object} state Data state.\n *\n * @return {WPBlockCategory[]} Categories list.\n */\nexport function getCategories( state ) {\n\treturn state.categories;\n}\n\n/**\n * Returns all the available collections.\n *\n * @param {Object} state Data state.\n *\n * @return {Object} Collections list.\n */\nexport function getCollections( state ) {\n\treturn state.collections;\n}\n\n/**\n * Returns the name of the default block name.\n *\n * @param {Object} state Data state.\n *\n * @return {string?} Default block name.\n */\nexport function getDefaultBlockName( state ) {\n\treturn state.defaultBlockName;\n}\n\n/**\n * Returns the name of the block for handling non-block content.\n *\n * @param {Object} state Data state.\n *\n * @return {string?} Name of the block for handling non-block content.\n */\nexport function getFreeformFallbackBlockName( state ) {\n\treturn state.freeformFallbackBlockName;\n}\n\n/**\n * Returns the name of the block for handling unregistered blocks.\n *\n * @param {Object} state Data state.\n *\n * @return {string?} Name of the block for handling unregistered blocks.\n */\nexport function getUnregisteredFallbackBlockName( state ) {\n\treturn state.unregisteredFallbackBlockName;\n}\n\n/**\n * Returns the name of the block for handling unregistered blocks.\n *\n * @param {Object} state Data state.\n *\n * @return {string?} Name of the block for handling unregistered blocks.\n */\nexport function getGroupingBlockName( state ) {\n\treturn state.groupingBlockName;\n}\n\n/**\n * Returns an array with the child blocks of a given block.\n *\n * @param {Object} state     Data state.\n * @param {string} blockName Block type name.\n *\n * @return {Array} Array of child block names.\n */\nexport const getChildBlockNames = createSelector(\n\t( state, blockName ) => {\n\t\treturn map(\n\t\t\tfilter( state.blockTypes, ( blockType ) => {\n\t\t\t\treturn includes( blockType.parent, blockName );\n\t\t\t} ),\n\t\t\t( { name } ) => name\n\t\t);\n\t},\n\t( state ) => [ state.blockTypes ]\n);\n\n/**\n * Returns the block support value for a feature, if defined.\n *\n * @param  {Object}          state           Data state.\n * @param  {(string|Object)} nameOrType      Block name or type object\n * @param  {string}          feature         Feature to retrieve\n * @param  {*}               defaultSupports Default value to return if not\n *                                           explicitly defined\n *\n * @return {?*} Block support value\n */\nexport const getBlockSupport = (\n\tstate,\n\tnameOrType,\n\tfeature,\n\tdefaultSupports\n) => {\n\tconst blockType = getNormalizedBlockType( state, nameOrType );\n\n\treturn get(\n\t\tblockType,\n\t\t[ 'supports', ...feature.split( '.' ) ],\n\t\tdefaultSupports\n\t);\n};\n\n/**\n * Returns true if the block defines support for a feature, or false otherwise.\n *\n * @param  {Object}         state           Data state.\n * @param {(string|Object)} nameOrType      Block name or type object.\n * @param {string}          feature         Feature to test.\n * @param {boolean}         defaultSupports Whether feature is supported by\n *                                          default if not explicitly defined.\n *\n * @return {boolean} Whether block supports feature.\n */\nexport function hasBlockSupport( state, nameOrType, feature, defaultSupports ) {\n\treturn !! getBlockSupport( state, nameOrType, feature, defaultSupports );\n}\n\n/**\n * Returns true if the block type by the given name or object value matches a\n * search term, or false otherwise.\n *\n * @param {Object}          state      Blocks state.\n * @param {(string|Object)} nameOrType Block name or type object.\n * @param {string}          searchTerm Search term by which to filter.\n *\n * @return {Object[]} Whether block type matches search term.\n */\nexport function isMatchingSearchTerm( state, nameOrType, searchTerm ) {\n\tconst blockType = getNormalizedBlockType( state, nameOrType );\n\n\tconst getNormalizedSearchTerm = flow( [\n\t\t// Disregard diacritics.\n\t\t//  Input: \"média\"\n\t\tdeburr,\n\n\t\t// Lowercase.\n\t\t//  Input: \"MEDIA\"\n\t\t( term ) => term.toLowerCase(),\n\n\t\t// Strip leading and trailing whitespace.\n\t\t//  Input: \" media \"\n\t\t( term ) => term.trim(),\n\t] );\n\n\tconst normalizedSearchTerm = getNormalizedSearchTerm( searchTerm );\n\n\tconst isSearchMatch = flow( [\n\t\tgetNormalizedSearchTerm,\n\t\t( normalizedCandidate ) =>\n\t\t\tincludes( normalizedCandidate, normalizedSearchTerm ),\n\t] );\n\n\treturn (\n\t\tisSearchMatch( blockType.title ) ||\n\t\tsome( blockType.keywords, isSearchMatch ) ||\n\t\tisSearchMatch( blockType.category )\n\t);\n}\n\n/**\n * Returns a boolean indicating if a block has child blocks or not.\n *\n * @param {Object} state     Data state.\n * @param {string} blockName Block type name.\n *\n * @return {boolean} True if a block contains child blocks and false otherwise.\n */\nexport const hasChildBlocks = ( state, blockName ) => {\n\treturn getChildBlockNames( state, blockName ).length > 0;\n};\n\n/**\n * Returns a boolean indicating if a block has at least one child block with inserter support.\n *\n * @param {Object} state     Data state.\n * @param {string} blockName Block type name.\n *\n * @return {boolean} True if a block contains at least one child blocks with inserter support\n *                   and false otherwise.\n */\nexport const hasChildBlocksWithInserterSupport = ( state, blockName ) => {\n\treturn some( getChildBlockNames( state, blockName ), ( childBlockName ) => {\n\t\treturn hasBlockSupport( state, childBlockName, 'inserter', true );\n\t} );\n};\n"]}