{"version":3,"sources":["@wordpress/data/src/components/use-dispatch/use-dispatch.js"],"names":["useRegistry","useDispatch","storeName","dispatch"],"mappings":"AAAA;;;AAGA,OAAOA,WAAP,MAAwB,mCAAxB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAEC,SAAF,EAAiB;AAAA,qBACfF,WAAW,EADI;AAAA,MAC5BG,QAD4B,gBAC5BA,QAD4B;;AAEpC,SAAOD,SAAS,KAAK,KAAK,CAAnB,GAAuBC,QAAvB,GAAkCA,QAAQ,CAAED,SAAF,CAAjD;AACA,CAHD;;AAKA,eAAeD,WAAf","sourcesContent":["/**\n * Internal dependencies\n */\nimport useRegistry from '../registry-provider/use-registry';\n\n/**\n * A custom react hook returning the current registry dispatch actions creators.\n *\n * Note: The component using this hook must be within the context of a\n * RegistryProvider.\n *\n * @param {string} [storeName]  Optionally provide the name of the store from\n *                             which to retrieve action creators. If not\n *                             provided, the registry.dispatch function is\n *                             returned instead.\n *\n * @example\n * This illustrates a pattern where you may need to retrieve dynamic data from\n * the server via the `useSelect` hook to use in combination with the dispatch\n * action.\n *\n * ```jsx\n * const { useDispatch, useSelect } = wp.data;\n * const { useCallback } = wp.element;\n *\n * function Button( { onClick, children } ) {\n *   return <button type=\"button\" onClick={ onClick }>{ children }</button>\n * }\n *\n * const SaleButton = ( { children } ) => {\n *   const { stockNumber } = useSelect(\n *     ( select ) => select( 'my-shop' ).getStockNumber(),\n *     []\n *   );\n *   const { startSale } = useDispatch( 'my-shop' );\n *   const onClick = useCallback( () => {\n *     const discountPercent = stockNumber > 50 ? 10: 20;\n *     startSale( discountPercent );\n *   }, [ stockNumber ] );\n *   return <Button onClick={ onClick }>{ children }</Button>\n * }\n *\n * // Rendered somewhere in the application:\n * //\n * // <SaleButton>Start Sale!</SaleButton>\n * ```\n * @return {Function}  A custom react hook.\n */\nconst useDispatch = ( storeName ) => {\n\tconst { dispatch } = useRegistry();\n\treturn storeName === void 0 ? dispatch : dispatch( storeName );\n};\n\nexport default useDispatch;\n"]}