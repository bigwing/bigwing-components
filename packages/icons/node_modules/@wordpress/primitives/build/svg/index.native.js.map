{"version":3,"sources":["@wordpress/primitives/src/svg/index.native.js"],"names":["SVG","className","isPressed","props","colorScheme","stylesFromClasses","split","map","element","styles","filter","Boolean","defaultStyle","styleValues","Object","assign","style","appliedProps","color"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AAKA;;;;;;AAcO,IAAMA,GAAG,GAAG,SAANA,GAAM,OAA+C;AAAA,4BAA3CC,SAA2C;AAAA,MAA3CA,SAA2C,+BAA/B,EAA+B;AAAA,MAA3BC,SAA2B,QAA3BA,SAA2B;AAAA,MAAbC,KAAa;AACjE,MAAMC,WAAW,GAAGD,KAAK,CAACC,WAAN,IAAqB,OAAzC;AACA,MAAMC,iBAAiB,GAAGJ,SAAS,CACjCK,KADwB,CACjB,GADiB,EAExBC,GAFwB,CAEnB,UAAEC,OAAF;AAAA,WAAeC,eAAQD,OAAR,CAAf;AAAA,GAFmB,EAGxBE,MAHwB,CAGhBC,OAHgB,CAA1B;AAIA,MAAMC,YAAY,GAAGV,SAAS,GAC3BO,eAAQ,YAAR,CAD2B,GAE3BA,eAAQ,iCAAiCL,WAAzC,CAFH;AAGA,MAAMS,WAAW,GAAGC,MAAM,CAACC,MAAP,OAAAD,MAAM,GACzB,EADyB,EAEzBF,YAFyB,EAGzBT,KAAK,CAACa,KAHmB,0CAItBX,iBAJsB,GAA1B;;AAOA,MAAMY,YAAY,qBAAQd,KAAR;AAAea,IAAAA,KAAK,EAAEH;AAAtB,IAAlB;;AAEA,SACC,4BAAC,mBAAD,CACC;AADD;AAEC,IAAA,GAAG,EAAGI,YAAY,CAACD,KAAb,CAAmBE,KAF1B;AAGC,IAAA,MAAM,EAAC,MAHR;AAIC,IAAA,KAAK,EAAC;AAJP,KAKMD,YALN,EADD;AASA,CA3BM","sourcesContent":["/**\n * External dependencies\n */\nimport { Svg } from 'react-native-svg';\n\n/**\n * Internal dependencies\n */\nimport styles from './style.scss';\n\nexport {\n\tCircle,\n\tG,\n\tPath,\n\tPolygon,\n\tRect,\n\tDefs,\n\tRadialGradient,\n\tLinearGradient,\n\tStop,\n} from 'react-native-svg';\n\nexport const SVG = ( { className = '', isPressed, ...props } ) => {\n\tconst colorScheme = props.colorScheme || 'light';\n\tconst stylesFromClasses = className\n\t\t.split( ' ' )\n\t\t.map( ( element ) => styles[ element ] )\n\t\t.filter( Boolean );\n\tconst defaultStyle = isPressed\n\t\t? styles[ 'is-pressed' ]\n\t\t: styles[ 'components-toolbar__control-' + colorScheme ];\n\tconst styleValues = Object.assign(\n\t\t{},\n\t\tdefaultStyle,\n\t\tprops.style,\n\t\t...stylesFromClasses\n\t);\n\n\tconst appliedProps = { ...props, style: styleValues };\n\n\treturn (\n\t\t<Svg\n\t\t\t//We want to re-render when style color is changed\n\t\t\tkey={ appliedProps.style.color }\n\t\t\theight=\"100%\"\n\t\t\twidth=\"100%\"\n\t\t\t{ ...appliedProps }\n\t\t/>\n\t);\n};\n"]}